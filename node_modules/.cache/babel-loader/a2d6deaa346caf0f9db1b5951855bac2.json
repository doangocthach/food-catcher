{"ast":null,"code":"import _slicedToArray from\"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createForOfIteratorHelper from\"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";import{Vector2}from\"gdxjs\";var checkKerning=function checkKerning(id1,id2,kerningsData){var check=false;var amount=0;var _iterator=_createForOfIteratorHelper(kerningsData),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var kerning=_step.value;if(kerning.first===id1&&kerning.second===id2){amount=kerning.amount;check=true;break;}else{check=false;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(check){return amount;}else{return 0;}};var GlyphLayour=function GlyphLayour(pageImage,regions,keringsData,canvasWidth){var _this=this;_classCallCheck(this,GlyphLayour);this.addToCache=function(line,px,py,lineBreak,lineH){var xAdvance=0;for(var index=0;index<line.length;index++){var currChar=line.charCodeAt(index);var preChar=line.charCodeAt(index-1);var key=_this.findRegions(currChar);var kerningAmount=checkKerning(preChar,currChar,_this.kerningsData);// let kerningAmount = checkKerning(currChar, preChar, this.kerningsData);\n_this.cache.push({key:key,x:px+xAdvance+key.xoffset*_this.scale+kerningAmount*_this.scale,y:py+key.yoffset*_this.scale+lineBreak*_this.scale+lineH,width:key.width*_this.scale,height:key.height*_this.scale});xAdvance+=key.xadvance*_this.scale;}};this.beforeDrawing=function(posX,posY,fontSize,CharSequence){if(_this.preDraw){var spaceXadvance=0;var tmpLength=0;var tmplist=[];// find longest sequence\nfor(var i=0;i<CharSequence.length;i++){var char=CharSequence.charCodeAt(i);var key=_this.findRegions(char);if(char!==32){tmpLength+=key.xadvance*_this.scale;}else{spaceXadvance=key.xadvance*_this.scale;tmplist.push(tmpLength);tmpLength=0;}}var maxSeq=Math.max.apply(Math,tmplist)+spaceXadvance;//////////////////\n_this.newbase=fontSize;_this.scale=_this.newbase/_this.baseLine;CharSequence=CharSequence.trim();// split string between /n\nvar listCharSeq=CharSequence.split(\"/n\").map(function(s){return s.trim();});var lineH=0;for(var si=0;si<listCharSeq.length;si++){CharSequence=listCharSeq[si];// find new origin Width for each line\n_this.oriWidth=0;for(var _i=0;_i<CharSequence.length;_i++){var _char=CharSequence.charCodeAt(_i);var preChar=CharSequence.charCodeAt(_i-1);var _key=_this.findRegions(_char);var kerningAmount=checkKerning(preChar,_char,_this.kerningsData);// new\n_this.oriWidth+=kerningAmount*_this.scale;// new\nif(_i<CharSequence.length-1){_this.oriWidth+=_key.xadvance*_this.scale;}else{_this.oriWidth+=_key.width*_this.scale;}}var tmpRatio=_this.oriWidth/_this.fixedWidth;lineH=_this.lineHeight*_this.scale*si;var accumulate=0;var tmpChar=\"\";var lineBreak=0;// finding position break and length of each line\n// only execute if oriWidth > fixedWidth and fixedWidth > longest seq\nif(tmpRatio>1&&_this.fixedWidth>maxSeq){for(var _i2=0;_i2<CharSequence.length;_i2++){tmpChar+=CharSequence[_i2];var _char2=CharSequence.charCodeAt(_i2);var _key2=_this.findRegions(_char2);accumulate+=_key2.xadvance*_this.scale;// every line before last line\nif(accumulate>=_this.fixedWidth){var j=_i2;while(j>=0){_i2--;j--;var key2=_this.findRegions(CharSequence.charCodeAt(_i2));accumulate-=key2.xadvance*_this.scale;tmpChar=tmpChar.substring(0,tmpChar.length-1);if(accumulate<=_this.fixedWidth&&key2.id===32){lineBreak=_this.lineHeight*_this.positionBreak.length;_this.positionBreak.push(_i2);///\n_this.lastBreakIndex=_i2;var line=tmpChar.trim();var tmp=0;var key3=0;for(var index=0;index<line.length;index++){key3=_this.findRegions(line.charCodeAt(index));if(index===line.length-1){tmp+=key3.width*_this.scale;}else{tmp+=key3.xadvance*_this.scale;}}var _this$getPositionBase=_this.getPositionBasedOnMode(posX,posY,tmp),_this$getPositionBase2=_slicedToArray(_this$getPositionBase,2),px=_this$getPositionBase2[0],py=_this$getPositionBase2[1];_this.addToCache(line,px,py,lineBreak,lineH);accumulate=0;j=-1;tmpChar=\"\";}}}// last line\nif(_i2===CharSequence.length-1&&accumulate<_this.oriWidth){var _tmpChar=\"\";for(var _j=_this.lastBreakIndex;_j<=_i2;_j++){_tmpChar+=CharSequence[_j];}var lastLine=_tmpChar.trim();var tmpXadvance=0;var lastKey=0;for(var _index=0;_index<lastLine.length;_index++){lastKey=_this.findRegions(lastLine.charCodeAt(_index));if(_index===lastLine.length-1){tmpXadvance+=lastKey.width*_this.scale;}else{tmpXadvance+=lastKey.xadvance*_this.scale;}}var _this$getPositionBase3=_this.getPositionBasedOnMode(posX,posY,tmpXadvance),_this$getPositionBase4=_slicedToArray(_this$getPositionBase3,2),_px=_this$getPositionBase4[0],_py=_this$getPositionBase4[1];lineBreak=_this.lineHeight*_this.positionBreak.length;_this.addToCache(lastLine,_px,_py,lineBreak,lineH);}}}// if originWidth < fixedWidth or fixedWidth < longest sequence\nif(tmpRatio<=1||_this.fixedWidth<maxSeq){var _this$getPositionBase5=_this.getPositionBasedOnMode(posX,posY,_this.oriWidth),_this$getPositionBase6=_slicedToArray(_this$getPositionBase5,2),_px2=_this$getPositionBase6[0],_py2=_this$getPositionBase6[1];_this.addToCache(CharSequence,_px2,_py2,0,lineH);}}if(_this.type===0){_this.preDraw=false;}_this.oriHeight=_this.newbase;}};this.getPositionBasedOnMode=function(posX,posY,oriWidth){if(_this.align===0){// posY -= Math.round(this.oriHeight / 2);\nposX-=Math.round(oriWidth/2);}else if(_this.align===1){posX-=oriWidth;}return[posX,posY];};this.setAlignMode=function(mode){_this.align=mode;};this.setType=function(type){_this.type=type;};this.setLineHeight=function(lineHeight){_this.lineHeight=lineHeight;};this.setFixedGlyphWidth=function(fixedW){_this.fixedWidth=fixedW;// this.fixedHeight = fixedH;\n};this.findRegions=function(id){for(var i=0;i<_this.regions.length;i++){if(_this.regions[i].id===id){return _this.regions[i];}}};this.draw=function(batch){var CharSequence=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";var posX=arguments.length>2?arguments[2]:undefined;var posY=arguments.length>3?arguments[3]:undefined;var fontSize=arguments.length>4&&arguments[4]!==undefined?arguments[4]:_this.baseLine;if(_this.type===0){if(_this.preDraw){_this.beforeDrawing(posX,posY,fontSize,CharSequence);}for(var i=0;i<_this.cache.length;i++){var cache=_this.cache[i];cache.key.draw(batch,cache.x,cache.y,cache.width,cache.height);}}if(_this.type===1){_this.beforeDrawing(posX,posY,fontSize,CharSequence);for(var _i3=0;_i3<_this.cache.length;_i3++){var _cache=_this.cache[_i3];_cache.key.draw(batch,_cache.x,_cache.y,_cache.width,_cache.height);}_this.cache.length=0;_this.positionBreak.length=0;}};this.pageImage=pageImage;this.regions=regions;this.kerningsData=keringsData;this.canvasWidth=canvasWidth;this.type=0;this.align=2;this.lineHeight=pageImage.lineHeight;this.baseLine=pageImage.base;this.fixedWidth=canvasWidth;// temp variable\nthis.position=new Vector2(0,0);this.scale=0;this.newBase=0;this.oriWidth=0;this.oriHeight=0;this.positionBreak=[];// list of break-position's index\nthis.lastBreakIndex=0;// pre draw\nthis.cache=[];this.preDraw=true;};export{GlyphLayour as default};","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/utils/glyphLayout.js"],"names":["Vector2","checkKerning","id1","id2","kerningsData","check","amount","kerning","first","second","GlyphLayour","pageImage","regions","keringsData","canvasWidth","addToCache","line","px","py","lineBreak","lineH","xAdvance","index","length","currChar","charCodeAt","preChar","key","findRegions","kerningAmount","cache","push","x","xoffset","scale","y","yoffset","width","height","xadvance","beforeDrawing","posX","posY","fontSize","CharSequence","preDraw","spaceXadvance","tmpLength","tmplist","i","char","maxSeq","Math","max","newbase","baseLine","trim","listCharSeq","split","map","s","si","oriWidth","tmpRatio","fixedWidth","lineHeight","accumulate","tmpChar","j","key2","substring","id","positionBreak","lastBreakIndex","tmp","key3","getPositionBasedOnMode","lastLine","tmpXadvance","lastKey","type","oriHeight","align","round","setAlignMode","mode","setType","setLineHeight","setFixedGlyphWidth","fixedW","draw","batch","base","position","newBase"],"mappings":"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","sourcesContent":["import { Vector2 } from \"gdxjs\";\r\n\r\nconst checkKerning = (id1, id2, kerningsData) => {\r\n  let check = false;\r\n  let amount = 0;\r\n  for (let kerning of kerningsData) {\r\n    if (kerning.first === id1 && kerning.second === id2) {\r\n      amount = kerning.amount;\r\n      check = true;\r\n      break;\r\n    } else {\r\n      check = false;\r\n    }\r\n  }\r\n  if (check) {\r\n    return amount;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nexport default class GlyphLayour {\r\n  constructor(pageImage, regions, keringsData, canvasWidth) {\r\n    this.pageImage = pageImage;\r\n    this.regions = regions;\r\n    this.kerningsData = keringsData;\r\n    this.canvasWidth = canvasWidth;\r\n    this.type = 0;\r\n    this.align = 2;\r\n    this.lineHeight = pageImage.lineHeight;\r\n    this.baseLine = pageImage.base;\r\n    this.fixedWidth = canvasWidth;\r\n    // temp variable\r\n    this.position = new Vector2(0, 0);\r\n    this.scale = 0;\r\n    this.newBase = 0;\r\n    this.oriWidth = 0;\r\n    this.oriHeight = 0;\r\n    this.positionBreak = []; // list of break-position's index\r\n    this.lastBreakIndex = 0;\r\n    // pre draw\r\n    this.cache = [];\r\n    this.preDraw = true;\r\n  }\r\n  addToCache = (line, px, py, lineBreak, lineH) => {\r\n    let xAdvance = 0;\r\n    for (let index = 0; index < line.length; index++) {\r\n      const currChar = line.charCodeAt(index);\r\n      const preChar = line.charCodeAt(index - 1);\r\n      let key = this.findRegions(currChar);\r\n      let kerningAmount = checkKerning(preChar, currChar, this.kerningsData);\r\n      // let kerningAmount = checkKerning(currChar, preChar, this.kerningsData);\r\n      this.cache.push({\r\n        key: key,\r\n        x:\r\n          px + xAdvance + key.xoffset * this.scale + kerningAmount * this.scale,\r\n        y: py + key.yoffset * this.scale + lineBreak * this.scale + lineH,\r\n        width: key.width * this.scale,\r\n        height: key.height * this.scale,\r\n      });\r\n      xAdvance += key.xadvance * this.scale;\r\n    }\r\n  };\r\n\r\n  beforeDrawing = (posX, posY, fontSize, CharSequence) => {\r\n    if (this.preDraw) {\r\n      let spaceXadvance = 0;\r\n      let tmpLength = 0;\r\n      let tmplist = [];\r\n      // find longest sequence\r\n      for (let i = 0; i < CharSequence.length; i++) {\r\n        const char = CharSequence.charCodeAt(i);\r\n        const key = this.findRegions(char);\r\n        if (char !== 32) {\r\n          tmpLength += key.xadvance * this.scale;\r\n        } else {\r\n          spaceXadvance = key.xadvance * this.scale;\r\n          tmplist.push(tmpLength);\r\n          tmpLength = 0;\r\n        }\r\n      }\r\n      let maxSeq = Math.max(...tmplist) + spaceXadvance;\r\n      //////////////////\r\n      this.newbase = fontSize;\r\n      this.scale = this.newbase / this.baseLine;\r\n      CharSequence = CharSequence.trim();\r\n\r\n      // split string between /n\r\n      let listCharSeq = CharSequence.split(\"/n\").map((s) => s.trim());\r\n      let lineH = 0;\r\n      for (let si = 0; si < listCharSeq.length; si++) {\r\n        CharSequence = listCharSeq[si];\r\n        // find new origin Width for each line\r\n        this.oriWidth = 0;\r\n        for (let i = 0; i < CharSequence.length; i++) {\r\n          const char = CharSequence.charCodeAt(i);\r\n          const preChar = CharSequence.charCodeAt(i - 1);\r\n          const key = this.findRegions(char);\r\n          let kerningAmount = checkKerning(preChar, char, this.kerningsData); // new\r\n          this.oriWidth += kerningAmount * this.scale; // new\r\n          if (i < CharSequence.length - 1) {\r\n            this.oriWidth += key.xadvance * this.scale;\r\n          } else {\r\n            this.oriWidth += key.width * this.scale;\r\n          }\r\n        }\r\n        let tmpRatio = this.oriWidth / this.fixedWidth;\r\n        lineH = this.lineHeight * this.scale * si;\r\n        let accumulate = 0;\r\n        let tmpChar = \"\";\r\n        let lineBreak = 0;\r\n        // finding position break and length of each line\r\n        // only execute if oriWidth > fixedWidth and fixedWidth > longest seq\r\n        if (tmpRatio > 1 && this.fixedWidth > maxSeq) {\r\n          for (let i = 0; i < CharSequence.length; i++) {\r\n            tmpChar += CharSequence[i];\r\n            const char = CharSequence.charCodeAt(i);\r\n            const key = this.findRegions(char);\r\n            accumulate += key.xadvance * this.scale;\r\n            // every line before last line\r\n            if (accumulate >= this.fixedWidth) {\r\n              let j = i;\r\n              while (j >= 0) {\r\n                i--;\r\n                j--;\r\n                const key2 = this.findRegions(CharSequence.charCodeAt(i));\r\n                accumulate -= key2.xadvance * this.scale;\r\n                tmpChar = tmpChar.substring(0, tmpChar.length - 1);\r\n                if (accumulate <= this.fixedWidth && key2.id === 32) {\r\n                  lineBreak = this.lineHeight * this.positionBreak.length;\r\n                  this.positionBreak.push(i); ///\r\n                  this.lastBreakIndex = i;\r\n                  const line = tmpChar.trim();\r\n                  let tmp = 0;\r\n                  let key3 = 0;\r\n\r\n                  for (let index = 0; index < line.length; index++) {\r\n                    key3 = this.findRegions(line.charCodeAt(index));\r\n                    if (index === line.length - 1) {\r\n                      tmp += key3.width * this.scale;\r\n                    } else {\r\n                      tmp += key3.xadvance * this.scale;\r\n                    }\r\n                  }\r\n                  let [px, py] = this.getPositionBasedOnMode(posX, posY, tmp);\r\n\r\n                  this.addToCache(line, px, py, lineBreak, lineH);\r\n\r\n                  accumulate = 0;\r\n                  j = -1;\r\n                  tmpChar = \"\";\r\n                }\r\n              }\r\n            }\r\n            // last line\r\n            if (i === CharSequence.length - 1 && accumulate < this.oriWidth) {\r\n              let tmpChar = \"\";\r\n              for (let j = this.lastBreakIndex; j <= i; j++) {\r\n                tmpChar += CharSequence[j];\r\n              }\r\n              const lastLine = tmpChar.trim();\r\n              let tmpXadvance = 0;\r\n              let lastKey = 0;\r\n              for (let index = 0; index < lastLine.length; index++) {\r\n                lastKey = this.findRegions(lastLine.charCodeAt(index));\r\n                if (index === lastLine.length - 1) {\r\n                  tmpXadvance += lastKey.width * this.scale;\r\n                } else {\r\n                  tmpXadvance += lastKey.xadvance * this.scale;\r\n                }\r\n              }\r\n              let [px, py] = this.getPositionBasedOnMode(\r\n                posX,\r\n                posY,\r\n                tmpXadvance\r\n              );\r\n              lineBreak = this.lineHeight * this.positionBreak.length;\r\n              this.addToCache(lastLine, px, py, lineBreak, lineH);\r\n            }\r\n          }\r\n        }\r\n        // if originWidth < fixedWidth or fixedWidth < longest sequence\r\n        if (tmpRatio <= 1 || this.fixedWidth < maxSeq) {\r\n          let [px, py] = this.getPositionBasedOnMode(posX, posY, this.oriWidth);\r\n          this.addToCache(CharSequence, px, py, 0, lineH);\r\n        }\r\n      }\r\n      if (this.type === 0) {\r\n        this.preDraw = false;\r\n      }\r\n      this.oriHeight = this.newbase;\r\n    }\r\n  };\r\n\r\n  getPositionBasedOnMode = (posX, posY, oriWidth) => {\r\n    if (this.align === 0) {\r\n      // posY -= Math.round(this.oriHeight / 2);\r\n      posX -= Math.round(oriWidth / 2);\r\n    } else if (this.align === 1) {\r\n      posX -= oriWidth;\r\n    }\r\n    return [posX, posY];\r\n  };\r\n\r\n  setAlignMode = (mode) => {\r\n    this.align = mode;\r\n  };\r\n\r\n  setType = (type) => {\r\n    this.type = type;\r\n  };\r\n\r\n  setLineHeight = (lineHeight) => {\r\n    this.lineHeight = lineHeight;\r\n  };\r\n\r\n  setFixedGlyphWidth = (fixedW) => {\r\n    this.fixedWidth = fixedW;\r\n    // this.fixedHeight = fixedH;\r\n  };\r\n\r\n  findRegions = (id) => {\r\n    for (let i = 0; i < this.regions.length; i++) {\r\n      if (this.regions[i].id === id) {\r\n        return this.regions[i];\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (batch, CharSequence = \"\", posX, posY, fontSize = this.baseLine) => {\r\n    if (this.type === 0) {\r\n      if (this.preDraw) {\r\n        this.beforeDrawing(posX, posY, fontSize, CharSequence);\r\n      }\r\n      for (let i = 0; i < this.cache.length; i++) {\r\n        let cache = this.cache[i];\r\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\r\n      }\r\n    }\r\n\r\n    if (this.type === 1) {\r\n      this.beforeDrawing(posX, posY, fontSize, CharSequence);\r\n      for (let i = 0; i < this.cache.length; i++) {\r\n        let cache = this.cache[i];\r\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\r\n      }\r\n      this.cache.length = 0;\r\n      this.positionBreak.length = 0;\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}