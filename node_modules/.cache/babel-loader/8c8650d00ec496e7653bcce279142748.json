{"ast":null,"code":"import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i = void 0,\n        l = void 0;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/kami-batch2/node_modules/gl-matrix/lib/gl-matrix/vec3.js"],"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","length","x","y","z","Math","sqrt","fromValues","copy","set","add","b","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","hermite","c","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","random","r","RANDOM","PI","zScale","cos","sin","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","p","rotateY","rotateZ","angle","tempA","tempB","cosine","acos","str","exactEquals","equals","a0","a1","a2","b0","b1","b2","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"mappings":"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","sourcesContent":["import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();"]},"metadata":{},"sourceType":"module"}