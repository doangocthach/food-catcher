{"ast":null,"code":"import axios from \"../../utils/axios\";\nimport { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\nimport createStartScreenSystem from \"./StartScreen\";\nimport { checkPointInsideRect } from \"./utils/coordUtils\";\n\nconst getHeightBaseOnWidth = (texture, textWidth) => {\n  return [textWidth, textWidth * texture.height / texture.width];\n};\n\nconst censorEmail = email => {\n  let tmp = email.split(\"@\");\n  const nameLimitter = 7;\n  const domainLimitter = 6;\n  const lastChar = tmp[0].slice(-1);\n\n  if (tmp[0].length > nameLimitter) {\n    tmp[0] = tmp[0].slice(0, nameLimitter);\n  }\n\n  if (tmp[1].length > domainLimitter) {\n    tmp[1] = tmp[1].slice(0, domainLimitter);\n    tmp[1] += \"..\";\n  }\n\n  let numOfDisplay = Math.max(1, Math.floor(tmp[0].length / 3));\n  let resultString = \"\";\n\n  for (let i = 0; i < numOfDisplay; i++) {\n    resultString += tmp[0].charAt(i);\n  }\n\n  return resultString + \"*\".repeat(tmp[0].length - 2) + lastChar + \"@\" + tmp[1];\n};\n\nconst createLeaderBoardSystem = Game => {\n  const {\n    canvas,\n    viewport,\n    width,\n    height,\n    camera,\n    batch,\n    assets,\n    score,\n    whiteTex,\n    font\n  } = Game;\n\n  const goToStartScreen = async () => {\n    Game.setCurrentScreen(await createStartScreenSystem(Game));\n  };\n\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const bg = assets.backGround;\n  const atlas = assets.leaderBoard;\n  const logo = atlas.findRegion(\"logo-2\", -1);\n  const header = atlas.findRegion(\"header\", -1);\n  const footer = atlas.findRegion(\"footer\", -1);\n  const yourScore = atlas.findRegion(\"your-score\", -1);\n  const no1 = atlas.findRegion(\"no1\", -1);\n  const no2 = atlas.findRegion(\"no2\", -1);\n  const retry = atlas.findRegion(\"thu-lai\", -1);\n  const [LOGO_WIDTH, LOGO_HEIGHT] = getHeightBaseOnWidth(logo, width / 4.1);\n  const [HEADER_WIDTH, HEADER_HEIGHT] = getHeightBaseOnWidth(header, width / 2);\n  const [FOOTER_WIDTH, FOOTER_HEIGHt] = getHeightBaseOnWidth(footer, width * 0.9);\n  const [S_WIDTH, S_HIEGHT] = getHeightBaseOnWidth(yourScore, width / 2);\n  const [NO1_WIDTH, NO1_HEIGHT] = getHeightBaseOnWidth(no1, width / 8);\n  const [NO2_WIDTH, NO2_HEIGHT] = getHeightBaseOnWidth(no2, width / 8);\n  const [BUTTON_WIDTH, BUTTON_HEIGHT] = getHeightBaseOnWidth(retry, width / 3);\n  const BUTTON_RECTS = [width / 2 - BUTTON_WIDTH / 2, height * 2.2 / 3, BUTTON_WIDTH, BUTTON_HEIGHT];\n  const medalList = [{\n    texture: no1,\n    width: NO1_WIDTH,\n    height: NO1_HEIGHT\n  }, {\n    texture: no2,\n    width: NO2_WIDTH,\n    height: NO2_HEIGHT\n  }];\n  const CONTAINER_MARGIN = width / 17;\n  const CONTAINER_WIDTH = width - CONTAINER_MARGIN * 2;\n  const CONTAINER_HEIGHT = height - CONTAINER_MARGIN * 2;\n  let players = [];\n\n  const getData = async () => {\n    try {\n      const res = await axios.post(\"/leader-board\", {\n        score\n      }, {\n        headers: {\n          \"x-access-token\": localStorage.getItem(\"@Token\")\n        }\n      });\n      players = res.data;\n    } catch (e) {}\n  };\n\n  getData();\n  let coord = new Vector2();\n  inputHandler.addEventListener(\"touchStart\", () => {\n    coord.setVector(inputHandler.getTouchedWorldCoord());\n\n    if (checkPointInsideRect(coord, BUTTON_RECTS)) {\n      Game.score = 0;\n      goToStartScreen();\n    }\n  });\n  const {\n    numberFont,\n    textFont\n  } = font;\n  const userScore = numberFont.setNewText(width);\n  const scoreSize = width / 5.3;\n  const RESULT_START_X = width / 3;\n  const NAME_START_Y = height * 0.6 / 3;\n  const SCORE_START_Y = height * 0.69 / 3;\n  const userNameText = [textFont.setNewText(width), textFont.setNewText(width), textFont.setNewText(width)];\n  const userScoreText = [numberFont.setNewText(width), numberFont.setNewText(width), numberFont.setNewText(width)];\n  const userNameSize = width / 14;\n  const userScoreSize = width / 10;\n  let loopLength = 0; // top 3 player ll be display\n\n  let gotData = false;\n\n  const update = delta => {\n    if (players.length > 0 && !gotData) {\n      gotData = true;\n\n      for (let i = 0; i < players.length; i++) {\n        players[i].email = censorEmail(players[i].email);\n      }\n    }\n\n    batch.setProjection(camera.combined);\n    batch.begin();\n    fillRect(batch, bg, 0, 0, width, height);\n    batch.setColor(0, 0, 0, 1);\n    fillRect(batch, whiteTex, width / 2 - (CONTAINER_WIDTH + width / 100) / 2, height / 2 - (CONTAINER_HEIGHT + width / 100) / 2, CONTAINER_WIDTH + width / 100, CONTAINER_HEIGHT + width / 100);\n    batch.setColor(255 / 255, 246 / 255, 234 / 255, 1);\n    fillRect(batch, whiteTex, width / 2 - CONTAINER_WIDTH / 2, height / 2 - CONTAINER_HEIGHT / 2, CONTAINER_WIDTH, CONTAINER_HEIGHT);\n    batch.setColor(1, 1, 1, 1);\n    logo.draw(batch, width * 1 / 12, height / 50, LOGO_WIDTH, LOGO_HEIGHT);\n    header.draw(batch, width * 1.1 / 3, height / 25, HEADER_WIDTH, HEADER_HEIGHT);\n    yourScore.draw(batch, width / 3, height * 1.7 / 3, S_WIDTH, S_HIEGHT);\n    batch.setColor(0, 0, 0, 1);\n    userScore.draw(batch, `${Game.score}`, width / 3, height * 1.79 / 3, scoreSize);\n    batch.setColor(1, 1, 1, 1);\n    retry.draw(batch, BUTTON_RECTS[0], BUTTON_RECTS[1], BUTTON_RECTS[2], BUTTON_RECTS[3]);\n    footer.draw(batch, width / 2 - FOOTER_WIDTH / 2, height - FOOTER_HEIGHt + height / 200, FOOTER_WIDTH, FOOTER_HEIGHt);\n\n    if (players.length > 0) {\n      loopLength = players.length > 3 ? 3 : players.length;\n\n      for (let i = 0; i < loopLength; i++) {\n        batch.setColor(0, 0, 0, 1);\n        userNameText[i].draw(batch, players[i].email, RESULT_START_X, NAME_START_Y + i * height / 9, userNameSize);\n        batch.setColor(255 / 255, 115 / 255, 23 / 255, 1);\n        userScoreText[i].draw(batch, players[i].score.toString(), RESULT_START_X, SCORE_START_Y + i * height / 9, userScoreSize);\n\n        if (i === 0 || i === 1) {\n          batch.setColor(1, 1, 1, 1);\n          medalList[i].texture.draw(batch, width * 0.55 / 3, height * 0.6 / 3 + height / 8.6 * i, medalList[i].width, medalList[i].height);\n        }\n      }\n    }\n\n    batch.setColor(1, 1, 1, 1);\n    batch.end();\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createLeaderBoardSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/LeaderBoardScreen.js"],"names":["axios","createViewportAwareInputHandler","fillRect","Vector2","createStartScreenSystem","checkPointInsideRect","getHeightBaseOnWidth","texture","textWidth","height","width","censorEmail","email","tmp","split","nameLimitter","domainLimitter","lastChar","slice","length","numOfDisplay","Math","max","floor","resultString","i","charAt","repeat","createLeaderBoardSystem","Game","canvas","viewport","camera","batch","assets","score","whiteTex","font","goToStartScreen","setCurrentScreen","inputHandler","bg","backGround","atlas","leaderBoard","logo","findRegion","header","footer","yourScore","no1","no2","retry","LOGO_WIDTH","LOGO_HEIGHT","HEADER_WIDTH","HEADER_HEIGHT","FOOTER_WIDTH","FOOTER_HEIGHt","S_WIDTH","S_HIEGHT","NO1_WIDTH","NO1_HEIGHT","NO2_WIDTH","NO2_HEIGHT","BUTTON_WIDTH","BUTTON_HEIGHT","BUTTON_RECTS","medalList","CONTAINER_MARGIN","CONTAINER_WIDTH","CONTAINER_HEIGHT","players","getData","res","post","headers","localStorage","getItem","data","e","coord","addEventListener","setVector","getTouchedWorldCoord","numberFont","textFont","userScore","setNewText","scoreSize","RESULT_START_X","NAME_START_Y","SCORE_START_Y","userNameText","userScoreText","userNameSize","userScoreSize","loopLength","gotData","update","delta","setProjection","combined","begin","setColor","draw","toString","end","destroy","cleanup"],"mappings":"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","sourcesContent":["import axios from \"../../utils/axios\";\r\nimport { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\r\nimport createStartScreenSystem from \"./StartScreen\";\r\nimport { checkPointInsideRect } from \"./utils/coordUtils\";\r\n\r\nconst getHeightBaseOnWidth = (texture, textWidth) => {\r\n  return [textWidth, (textWidth * texture.height) / texture.width];\r\n};\r\n\r\nconst censorEmail = (email) => {\r\n  let tmp = email.split(\"@\");\r\n  const nameLimitter = 7;\r\n  const domainLimitter = 6;\r\n  const lastChar = tmp[0].slice(-1);\r\n  if (tmp[0].length > nameLimitter) {\r\n    tmp[0] = tmp[0].slice(0, nameLimitter);\r\n  }\r\n  if (tmp[1].length > domainLimitter) {\r\n    tmp[1] = tmp[1].slice(0, domainLimitter);\r\n    tmp[1] += \"..\";\r\n  }\r\n\r\n  let numOfDisplay = Math.max(1, Math.floor(tmp[0].length / 3));\r\n  let resultString = \"\";\r\n  for (let i = 0; i < numOfDisplay; i++) {\r\n    resultString += tmp[0].charAt(i);\r\n  }\r\n  return resultString + \"*\".repeat(tmp[0].length - 2) + lastChar + \"@\" + tmp[1];\r\n};\r\n\r\nconst createLeaderBoardSystem = (Game) => {\r\n  const {\r\n    canvas,\r\n    viewport,\r\n    width,\r\n    height,\r\n    camera,\r\n    batch,\r\n    assets,\r\n    score,\r\n    whiteTex,\r\n    font,\r\n  } = Game;\r\n\r\n  const goToStartScreen = async () => {\r\n    Game.setCurrentScreen(await createStartScreenSystem(Game));\r\n  };\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const bg = assets.backGround;\r\n  const atlas = assets.leaderBoard;\r\n  const logo = atlas.findRegion(\"logo-2\", -1);\r\n  const header = atlas.findRegion(\"header\", -1);\r\n  const footer = atlas.findRegion(\"footer\", -1);\r\n  const yourScore = atlas.findRegion(\"your-score\", -1);\r\n  const no1 = atlas.findRegion(\"no1\", -1);\r\n  const no2 = atlas.findRegion(\"no2\", -1);\r\n  const retry = atlas.findRegion(\"thu-lai\", -1);\r\n\r\n  const [LOGO_WIDTH, LOGO_HEIGHT] = getHeightBaseOnWidth(logo, width / 4.1);\r\n  const [HEADER_WIDTH, HEADER_HEIGHT] = getHeightBaseOnWidth(header, width / 2);\r\n  const [FOOTER_WIDTH, FOOTER_HEIGHt] = getHeightBaseOnWidth(\r\n    footer,\r\n    width * 0.9\r\n  );\r\n  const [S_WIDTH, S_HIEGHT] = getHeightBaseOnWidth(yourScore, width / 2);\r\n  const [NO1_WIDTH, NO1_HEIGHT] = getHeightBaseOnWidth(no1, width / 8);\r\n  const [NO2_WIDTH, NO2_HEIGHT] = getHeightBaseOnWidth(no2, width / 8);\r\n  const [BUTTON_WIDTH, BUTTON_HEIGHT] = getHeightBaseOnWidth(retry, width / 3);\r\n\r\n  const BUTTON_RECTS = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 2.2) / 3,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT,\r\n  ];\r\n\r\n  const medalList = [\r\n    { texture: no1, width: NO1_WIDTH, height: NO1_HEIGHT },\r\n    { texture: no2, width: NO2_WIDTH, height: NO2_HEIGHT },\r\n  ];\r\n\r\n  const CONTAINER_MARGIN = width / 17;\r\n  const CONTAINER_WIDTH = width - CONTAINER_MARGIN * 2;\r\n  const CONTAINER_HEIGHT = height - CONTAINER_MARGIN * 2;\r\n\r\n  let players = [];\r\n  const getData = async () => {\r\n    try {\r\n      const res = await axios.post(\r\n        \"/leader-board\",\r\n        { score },\r\n        {\r\n          headers: { \"x-access-token\": localStorage.getItem(\"@Token\") },\r\n        }\r\n      );\r\n      players = res.data;\r\n    } catch (e) {}\r\n  };\r\n  getData();\r\n\r\n  let coord = new Vector2();\r\n  inputHandler.addEventListener(\"touchStart\", () => {\r\n    coord.setVector(inputHandler.getTouchedWorldCoord());\r\n    if (checkPointInsideRect(coord, BUTTON_RECTS)) {\r\n      Game.score = 0;\r\n      goToStartScreen();\r\n    }\r\n  });\r\n\r\n  const { numberFont, textFont } = font;\r\n  const userScore = numberFont.setNewText(width);\r\n  const scoreSize = width / 5.3;\r\n\r\n  const RESULT_START_X = width / 3;\r\n  const NAME_START_Y = (height * 0.6) / 3;\r\n  const SCORE_START_Y = (height * 0.69) / 3;\r\n\r\n  const userNameText = [\r\n    textFont.setNewText(width),\r\n    textFont.setNewText(width),\r\n    textFont.setNewText(width),\r\n  ];\r\n  const userScoreText = [\r\n    numberFont.setNewText(width),\r\n    numberFont.setNewText(width),\r\n    numberFont.setNewText(width),\r\n  ];\r\n  const userNameSize = width / 14;\r\n  const userScoreSize = width / 10;\r\n  let loopLength = 0; // top 3 player ll be display\r\n\r\n  let gotData = false;\r\n  const update = (delta) => {\r\n    if (players.length > 0 && !gotData) {\r\n      gotData = true;\r\n      for (let i = 0; i < players.length; i++) {\r\n        players[i].email = censorEmail(players[i].email);\r\n      }\r\n    }\r\n\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    fillRect(batch, bg, 0, 0, width, height);\r\n    batch.setColor(0, 0, 0, 1);\r\n    fillRect(\r\n      batch,\r\n      whiteTex,\r\n      width / 2 - (CONTAINER_WIDTH + width / 100) / 2,\r\n      height / 2 - (CONTAINER_HEIGHT + width / 100) / 2,\r\n      CONTAINER_WIDTH + width / 100,\r\n      CONTAINER_HEIGHT + width / 100\r\n    );\r\n    batch.setColor(255 / 255, 246 / 255, 234 / 255, 1);\r\n    fillRect(\r\n      batch,\r\n      whiteTex,\r\n      width / 2 - CONTAINER_WIDTH / 2,\r\n      height / 2 - CONTAINER_HEIGHT / 2,\r\n      CONTAINER_WIDTH,\r\n      CONTAINER_HEIGHT\r\n    );\r\n    batch.setColor(1, 1, 1, 1);\r\n    logo.draw(batch, (width * 1) / 12, height / 50, LOGO_WIDTH, LOGO_HEIGHT);\r\n    header.draw(\r\n      batch,\r\n      (width * 1.1) / 3,\r\n      height / 25,\r\n      HEADER_WIDTH,\r\n      HEADER_HEIGHT\r\n    );\r\n    yourScore.draw(batch, width / 3, (height * 1.7) / 3, S_WIDTH, S_HIEGHT);\r\n    batch.setColor(0, 0, 0, 1);\r\n    userScore.draw(\r\n      batch,\r\n      `${Game.score}`,\r\n      width / 3,\r\n      (height * 1.79) / 3,\r\n      scoreSize\r\n    );\r\n    batch.setColor(1, 1, 1, 1);\r\n    retry.draw(\r\n      batch,\r\n      BUTTON_RECTS[0],\r\n      BUTTON_RECTS[1],\r\n      BUTTON_RECTS[2],\r\n      BUTTON_RECTS[3]\r\n    );\r\n    footer.draw(\r\n      batch,\r\n      width / 2 - FOOTER_WIDTH / 2,\r\n      height - FOOTER_HEIGHt + height / 200,\r\n      FOOTER_WIDTH,\r\n      FOOTER_HEIGHt\r\n    );\r\n    if (players.length > 0) {\r\n      loopLength = players.length > 3 ? 3 : players.length;\r\n      for (let i = 0; i < loopLength; i++) {\r\n        batch.setColor(0, 0, 0, 1);\r\n        userNameText[i].draw(\r\n          batch,\r\n          players[i].email,\r\n          RESULT_START_X,\r\n          NAME_START_Y + (i * height) / 9,\r\n          userNameSize\r\n        );\r\n        batch.setColor(255 / 255, 115 / 255, 23 / 255, 1);\r\n        userScoreText[i].draw(\r\n          batch,\r\n          players[i].score.toString(),\r\n          RESULT_START_X,\r\n          SCORE_START_Y + (i * height) / 9,\r\n          userScoreSize\r\n        );\r\n        if (i === 0 || i === 1) {\r\n          batch.setColor(1, 1, 1, 1);\r\n          medalList[i].texture.draw(\r\n            batch,\r\n            (width * 0.55) / 3,\r\n            (height * 0.6) / 3 + (height / 8.6) * i,\r\n            medalList[i].width,\r\n            medalList[i].height\r\n          );\r\n        }\r\n      }\r\n    }\r\n    batch.setColor(1, 1, 1, 1);\r\n\r\n    batch.end();\r\n  };\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\nexport default createLeaderBoardSystem;\r\n"]},"metadata":{},"sourceType":"module"}