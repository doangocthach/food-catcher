{"ast":null,"code":"const createFoodRenderSystem = () => {\n  let FOOD_WIDTH, FOOD_HEIGHT;\n  return {\n    init({\n      foodTex\n    }, {\n      width,\n      height\n    }) {\n      let tmpFood;\n\n      for (let tex of foodTex) {\n        if (tex.index === 0) {\n          tmpFood = tex.image;\n          break;\n        }\n      }\n\n      FOOD_WIDTH = width / 6;\n      FOOD_HEIGHT = FOOD_WIDTH * tmpFood.height / tmpFood.width;\n    },\n\n    update(delta, {\n      foods,\n      foodTex\n    }, {\n      width,\n      height,\n      batch,\n      camera\n    }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n\n      for (let i = foods.length - 1; i >= 0; i--) {\n        let image;\n\n        for (let j = 0; j < foodTex.length; j++) {\n          if (foodTex[j].index === foods[i].type) {\n            image = foodTex[j].image;\n          }\n        }\n\n        foods[i].oriOpacity = Math.min(foods[i].oriOpacity += delta * foods[i].opacitySpeed, 1);\n        foods[i].oriScale = Math.min(foods[i].oriScale += delta * foods[i].scaleSpeed, 1);\n        batch.setColor(1, 1, 1, foods[i].oriOpacity);\n        image.draw(batch, foods[i].x - FOOD_WIDTH / 2, foods[i].y, FOOD_WIDTH, FOOD_HEIGHT, FOOD_WIDTH / 2, FOOD_HEIGHT / 2, 0, foods[i].oriScale, foods[i].oriScale);\n      }\n\n      batch.end();\n    }\n\n  };\n};\n\nexport default createFoodRenderSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/FoodRenderSystem.js"],"names":["createFoodRenderSystem","FOOD_WIDTH","FOOD_HEIGHT","init","foodTex","width","height","tmpFood","tex","index","image","update","delta","foods","batch","camera","setProjection","combined","begin","i","length","j","type","oriOpacity","Math","min","opacitySpeed","oriScale","scaleSpeed","setColor","draw","x","y","end"],"mappings":"AAAA,MAAMA,sBAAsB,GAAG,MAAM;AACnC,MAAIC,UAAJ,EAAgBC,WAAhB;AAEA,SAAO;AACLC,IAAAA,IAAI,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAc;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAd,EAAiC;AACnC,UAAIC,OAAJ;;AACA,WAAK,IAAIC,GAAT,IAAgBJ,OAAhB,EAAyB;AACvB,YAAII,GAAG,CAACC,KAAJ,KAAc,CAAlB,EAAqB;AACnBF,UAAAA,OAAO,GAAGC,GAAG,CAACE,KAAd;AACA;AACD;AACF;;AACDT,MAAAA,UAAU,GAAGI,KAAK,GAAG,CAArB;AACAH,MAAAA,WAAW,GAAID,UAAU,GAAGM,OAAO,CAACD,MAAtB,GAAgCC,OAAO,CAACF,KAAtD;AACD,KAXI;;AAaLM,IAAAA,MAAM,CAACC,KAAD,EAAQ;AAAEC,MAAAA,KAAF;AAAST,MAAAA;AAAT,KAAR,EAA4B;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBQ,MAAAA,KAAjB;AAAwBC,MAAAA;AAAxB,KAA5B,EAA8D;AAClED,MAAAA,KAAK,CAACE,aAAN,CAAoBD,MAAM,CAACE,QAA3B;AACAH,MAAAA,KAAK,CAACI,KAAN;;AACA,WAAK,IAAIC,CAAC,GAAGN,KAAK,CAACO,MAAN,GAAe,CAA5B,EAA+BD,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AAC1C,YAAIT,KAAJ;;AACA,aAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,OAAO,CAACgB,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,cAAIjB,OAAO,CAACiB,CAAD,CAAP,CAAWZ,KAAX,KAAqBI,KAAK,CAACM,CAAD,CAAL,CAASG,IAAlC,EAAwC;AACtCZ,YAAAA,KAAK,GAAGN,OAAO,CAACiB,CAAD,CAAP,CAAWX,KAAnB;AACD;AACF;;AAEDG,QAAAA,KAAK,CAACM,CAAD,CAAL,CAASI,UAAT,GAAsBC,IAAI,CAACC,GAAL,CACnBZ,KAAK,CAACM,CAAD,CAAL,CAASI,UAAT,IAAuBX,KAAK,GAAGC,KAAK,CAACM,CAAD,CAAL,CAASO,YADrB,EAEpB,CAFoB,CAAtB;AAIAb,QAAAA,KAAK,CAACM,CAAD,CAAL,CAASQ,QAAT,GAAoBH,IAAI,CAACC,GAAL,CACjBZ,KAAK,CAACM,CAAD,CAAL,CAASQ,QAAT,IAAqBf,KAAK,GAAGC,KAAK,CAACM,CAAD,CAAL,CAASS,UADrB,EAElB,CAFkB,CAApB;AAIAd,QAAAA,KAAK,CAACe,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwBhB,KAAK,CAACM,CAAD,CAAL,CAASI,UAAjC;AACAb,QAAAA,KAAK,CAACoB,IAAN,CACEhB,KADF,EAEED,KAAK,CAACM,CAAD,CAAL,CAASY,CAAT,GAAa9B,UAAU,GAAG,CAF5B,EAGEY,KAAK,CAACM,CAAD,CAAL,CAASa,CAHX,EAIE/B,UAJF,EAKEC,WALF,EAMED,UAAU,GAAG,CANf,EAOEC,WAAW,GAAG,CAPhB,EAQE,CARF,EASEW,KAAK,CAACM,CAAD,CAAL,CAASQ,QATX,EAUEd,KAAK,CAACM,CAAD,CAAL,CAASQ,QAVX;AAYD;;AACDb,MAAAA,KAAK,CAACmB,GAAN;AACD;;AA/CI,GAAP;AAiDD,CApDD;;AAsDA,eAAejC,sBAAf","sourcesContent":["const createFoodRenderSystem = () => {\r\n  let FOOD_WIDTH, FOOD_HEIGHT;\r\n\r\n  return {\r\n    init({ foodTex }, { width, height }) {\r\n      let tmpFood;\r\n      for (let tex of foodTex) {\r\n        if (tex.index === 0) {\r\n          tmpFood = tex.image;\r\n          break;\r\n        }\r\n      }\r\n      FOOD_WIDTH = width / 6;\r\n      FOOD_HEIGHT = (FOOD_WIDTH * tmpFood.height) / tmpFood.width;\r\n    },\r\n\r\n    update(delta, { foods, foodTex }, { width, height, batch, camera }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      for (let i = foods.length - 1; i >= 0; i--) {\r\n        let image;\r\n        for (let j = 0; j < foodTex.length; j++) {\r\n          if (foodTex[j].index === foods[i].type) {\r\n            image = foodTex[j].image;\r\n          }\r\n        }\r\n\r\n        foods[i].oriOpacity = Math.min(\r\n          (foods[i].oriOpacity += delta * foods[i].opacitySpeed),\r\n          1\r\n        );\r\n        foods[i].oriScale = Math.min(\r\n          (foods[i].oriScale += delta * foods[i].scaleSpeed),\r\n          1\r\n        );\r\n        batch.setColor(1, 1, 1, foods[i].oriOpacity);\r\n        image.draw(\r\n          batch,\r\n          foods[i].x - FOOD_WIDTH / 2,\r\n          foods[i].y,\r\n          FOOD_WIDTH,\r\n          FOOD_HEIGHT,\r\n          FOOD_WIDTH / 2,\r\n          FOOD_HEIGHT / 2,\r\n          0,\r\n          foods[i].oriScale,\r\n          foods[i].oriScale\r\n        );\r\n      }\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createFoodRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}