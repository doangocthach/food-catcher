{"ast":null,"code":"import _slicedToArray from \"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport createOrthoCamera from './orthoCamera';\nimport resizeCanvas from './resizeCanvas';\nvar defaultOptions = {\n  autoUpdate: true,\n  pixelRatio: undefined\n};\nexport default (function (canvas, width, height, options) {\n  options = _objectSpread(_objectSpread({}, defaultOptions), options);\n  var gl = canvas.getContext('webgl');\n  var _options = options,\n      autoUpdate = _options.autoUpdate,\n      pixelRatio = _options.pixelRatio;\n  pixelRatio = pixelRatio || window.devicePixelRatio || 1;\n  var viewportInfo = {\n    pixelRatio: pixelRatio,\n    x: 0,\n    y: 0,\n    width: width,\n    height: height\n  };\n  var resizeHandler;\n\n  var _resizeCanvas = resizeCanvas(canvas, pixelRatio),\n      _resizeCanvas2 = _slicedToArray(_resizeCanvas, 2),\n      vWidth = _resizeCanvas2[0],\n      vHeight = _resizeCanvas2[1];\n\n  var camera = createOrthoCamera(width, height, vWidth, vHeight);\n\n  if (autoUpdate) {\n    resizeHandler = function resizeHandler(e) {\n      viewportObject.update();\n    };\n\n    window.addEventListener('resize', resizeHandler);\n  }\n\n  var viewportObject = {\n    getViewportInfo: function getViewportInfo() {\n      return viewportInfo;\n    },\n    getCamera: function getCamera() {\n      return camera;\n    },\n    getContext: function getContext() {\n      return gl;\n    },\n    update: function update() {\n      var _resizeCanvas3 = resizeCanvas(canvas, pixelRatio),\n          _resizeCanvas4 = _slicedToArray(_resizeCanvas3, 2),\n          vWidth = _resizeCanvas4[0],\n          vHeight = _resizeCanvas4[1];\n\n      var ratio = width / height;\n      var vRatio = vWidth / vHeight;\n      var displayWidth, displayHeight;\n\n      if (ratio < vRatio) {\n        displayHeight = vHeight;\n        displayWidth = vHeight * ratio;\n      } else {\n        displayWidth = vWidth;\n        displayHeight = vWidth / ratio;\n      }\n\n      var displayX = (vWidth - displayWidth) / 2;\n      var displayY = (vHeight - displayHeight) / 2;\n      viewportInfo.x = displayX;\n      viewportInfo.y = displayY;\n      viewportInfo.width = displayWidth;\n      viewportInfo.height = displayHeight;\n      gl.viewport(displayX, displayY, displayWidth, displayHeight);\n      camera.resize(width, height, displayWidth, displayHeight);\n    },\n    cleanUp: function cleanUp() {\n      if (resizeHandler) {\n        window.removeEventListener('resize', resizeHandler);\n      }\n    }\n  };\n  autoUpdate && viewportObject.update();\n  return viewportObject;\n});","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/gdxjs/lib/createViewport.js"],"names":["createOrthoCamera","resizeCanvas","defaultOptions","autoUpdate","pixelRatio","undefined","canvas","width","height","options","gl","getContext","window","devicePixelRatio","viewportInfo","x","y","resizeHandler","vWidth","vHeight","camera","e","viewportObject","update","addEventListener","getViewportInfo","getCamera","ratio","vRatio","displayWidth","displayHeight","displayX","displayY","viewport","resize","cleanUp","removeEventListener"],"mappings":"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","sourcesContent":["import createOrthoCamera from './orthoCamera';\nimport resizeCanvas from './resizeCanvas';\nconst defaultOptions = {\n  autoUpdate: true,\n  pixelRatio: undefined\n};\nexport default ((canvas, width, height, options) => {\n  options = { ...defaultOptions,\n    ...options\n  };\n  const gl = canvas.getContext('webgl');\n  let {\n    autoUpdate,\n    pixelRatio\n  } = options;\n  pixelRatio = pixelRatio || window.devicePixelRatio || 1;\n  const viewportInfo = {\n    pixelRatio,\n    x: 0,\n    y: 0,\n    width,\n    height\n  };\n  let resizeHandler;\n  const [vWidth, vHeight] = resizeCanvas(canvas, pixelRatio);\n  const camera = createOrthoCamera(width, height, vWidth, vHeight);\n\n  if (autoUpdate) {\n    resizeHandler = e => {\n      viewportObject.update();\n    };\n\n    window.addEventListener('resize', resizeHandler);\n  }\n\n  const viewportObject = {\n    getViewportInfo() {\n      return viewportInfo;\n    },\n\n    getCamera() {\n      return camera;\n    },\n\n    getContext() {\n      return gl;\n    },\n\n    update() {\n      let [vWidth, vHeight] = resizeCanvas(canvas, pixelRatio);\n      const ratio = width / height;\n      const vRatio = vWidth / vHeight;\n      let displayWidth, displayHeight;\n\n      if (ratio < vRatio) {\n        displayHeight = vHeight;\n        displayWidth = vHeight * ratio;\n      } else {\n        displayWidth = vWidth;\n        displayHeight = vWidth / ratio;\n      }\n\n      const displayX = (vWidth - displayWidth) / 2;\n      const displayY = (vHeight - displayHeight) / 2;\n      viewportInfo.x = displayX;\n      viewportInfo.y = displayY;\n      viewportInfo.width = displayWidth;\n      viewportInfo.height = displayHeight;\n      gl.viewport(displayX, displayY, displayWidth, displayHeight);\n      camera.resize(width, height, displayWidth, displayHeight);\n    },\n\n    cleanUp() {\n      if (resizeHandler) {\n        window.removeEventListener('resize', resizeHandler);\n      }\n    }\n\n  };\n  autoUpdate && viewportObject.update();\n  return viewportObject;\n});"]},"metadata":{},"sourceType":"module"}