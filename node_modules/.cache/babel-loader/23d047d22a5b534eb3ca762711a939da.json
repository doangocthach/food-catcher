{"ast":null,"code":"import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i = void 0,\n        l = void 0;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/kami-batch2/node_modules/gl-matrix/lib/gl-matrix/vec4.js"],"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","fromValues","x","y","z","w","copy","set","add","b","subtract","multiply","divide","ceil","Math","floor","min","max","round","scale","scaleAndAdd","distance","sqrt","squaredDistance","length","squaredLength","negate","inverse","normalize","len","dot","lerp","t","ax","ay","az","aw","random","v1","v2","v3","v4","s1","s2","RANDOM","d","transformMat4","m","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","str","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"mappings":"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","sourcesContent":["import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();"]},"metadata":{},"sourceType":"module"}