{"ast":null,"code":"import { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\nimport createGameScreenSystem from \"./GameScreen\";\nimport { checkPointInsideRect } from \"./utils/coordUtils\";\n\nconst createInstructionScreenSystem = Game => {\n  const goToGameScreen = async () => {\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\n  };\n\n  const {\n    canvas,\n    viewport,\n    width,\n    height,\n    camera,\n    batch,\n    assets\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const atlas = assets.startScreen;\n  const bg = assets.backGround;\n  const button = atlas.findRegion(\"button-play\", -1);\n  const banner1 = atlas.findRegion(\"hung_nguyen_lieu_de_ghi_diem\", -1);\n  const banner2 = atlas.findRegion(\"ne_cac_nguyen_lieu_khong_co_trong_menu\", -1);\n  const B1_WIDTH = width * 0.9;\n  const B1_HEIGHT = B1_WIDTH * banner1.height / banner1.width;\n  const B2_WIDTH = width * 0.9;\n  const B2_HEIGHT = B2_WIDTH * banner2.height / banner2.width;\n  const BUTTON_WIDTH = width / 3.5;\n  const BUTTON_HEIGHT = BUTTON_WIDTH * button.height / button.width;\n  const buttonInfos = [width / 2 - BUTTON_WIDTH / 2, height * 2.6 / 3, BUTTON_WIDTH, BUTTON_HEIGHT];\n  const coord = new Vector2();\n  let point;\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\n    coord.setVector(inputHandler.getTouchedWorldCoord());\n    point = {\n      x: coord.x,\n      y: coord.y\n    };\n\n    if (checkPointInsideRect(point, buttonInfos)) {\n      goToGameScreen();\n    }\n  });\n\n  const update = delta => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(1, 1, 1, 1);\n    fillRect(batch, bg, 0, 0, width, height);\n    banner1.draw(batch, width / 2 - B1_WIDTH / 2, height / 16, B1_WIDTH, B1_HEIGHT);\n    banner2.draw(batch, width / 2 - B2_WIDTH / 2, height * 1.4 / 3, B2_WIDTH, B2_HEIGHT);\n    button.draw(batch, buttonInfos[0], buttonInfos[1], buttonInfos[2], buttonInfos[3]);\n    batch.end();\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createInstructionScreenSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/InstructionScreen.js"],"names":["createViewportAwareInputHandler","fillRect","Vector2","createGameScreenSystem","checkPointInsideRect","createInstructionScreenSystem","Game","goToGameScreen","setCurrentScreen","canvas","viewport","width","height","camera","batch","assets","inputHandler","atlas","startScreen","bg","backGround","button","findRegion","banner1","banner2","B1_WIDTH","B1_HEIGHT","B2_WIDTH","B2_HEIGHT","BUTTON_WIDTH","BUTTON_HEIGHT","buttonInfos","coord","point","addEventListener","x","y","setVector","getTouchedWorldCoord","update","delta","setProjection","combined","begin","setColor","draw","end","destroy","cleanup"],"mappings":"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","sourcesContent":["import { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\r\nimport createGameScreenSystem from \"./GameScreen\";\r\nimport { checkPointInsideRect } from \"./utils/coordUtils\";\r\n\r\nconst createInstructionScreenSystem = (Game) => {\r\n  const goToGameScreen = async () => {\r\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\r\n  };\r\n\r\n  const { canvas, viewport, width, height, camera, batch, assets } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.startScreen;\r\n  const bg = assets.backGround;\r\n\r\n  const button = atlas.findRegion(\"button-play\", -1);\r\n  const banner1 = atlas.findRegion(\"hung_nguyen_lieu_de_ghi_diem\", -1);\r\n  const banner2 = atlas.findRegion(\r\n    \"ne_cac_nguyen_lieu_khong_co_trong_menu\",\r\n    -1\r\n  );\r\n\r\n  const B1_WIDTH = width * 0.9;\r\n  const B1_HEIGHT = (B1_WIDTH * banner1.height) / banner1.width;\r\n\r\n  const B2_WIDTH = width * 0.9;\r\n  const B2_HEIGHT = (B2_WIDTH * banner2.height) / banner2.width;\r\n\r\n  const BUTTON_WIDTH = width / 3.5;\r\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\r\n\r\n  const buttonInfos = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 2.6) / 3,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT,\r\n  ];\r\n\r\n  const coord = new Vector2();\r\n  let point;\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    coord.setVector(inputHandler.getTouchedWorldCoord());\r\n    point = { x: coord.x, y: coord.y };\r\n    if (checkPointInsideRect(point, buttonInfos)) {\r\n      goToGameScreen();\r\n    }\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 1);\r\n    fillRect(batch, bg, 0, 0, width, height);\r\n    banner1.draw(\r\n      batch,\r\n      width / 2 - B1_WIDTH / 2,\r\n      height / 16,\r\n      B1_WIDTH,\r\n      B1_HEIGHT\r\n    );\r\n\r\n    banner2.draw(\r\n      batch,\r\n      width / 2 - B2_WIDTH / 2,\r\n      (height * 1.4) / 3,\r\n      B2_WIDTH,\r\n      B2_HEIGHT\r\n    );\r\n\r\n    button.draw(\r\n      batch,\r\n      buttonInfos[0],\r\n      buttonInfos[1],\r\n      buttonInfos[2],\r\n      buttonInfos[3]\r\n    );\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createInstructionScreenSystem;\r\n"]},"metadata":{},"sourceType":"module"}