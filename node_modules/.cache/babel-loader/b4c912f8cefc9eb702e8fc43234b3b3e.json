{"ast":null,"code":"var _jsxFileName = \"E:\\\\fcatcher-client\\\\src\\\\components\\\\game\\\\StartScreen.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport RegisterModal from \"../RegisterModal\";\nimport { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\nimport { checkPointInsideRect } from \"./utils/coordUtils\";\nimport axios from \"../../utils/axios\";\nimport createInstructionScreen from \"./InstructionScreen\";\n\nconst createStartScreenSystem = Game => {\n  const goToInstructionScreen = async () => {\n    Game.setCurrentScreen(await createInstructionScreen(Game));\n  };\n\n  const {\n    canvas,\n    viewport,\n    width,\n    height,\n    camera,\n    batch,\n    assets\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const atlas = assets.startScreen;\n  const bg = assets.backGround2;\n  const banner = atlas.findRegion(\"1nam-an-lau-mien-phi\", -1);\n  const text = atlas.findRegion(\"content\", -1);\n  const logo = atlas.findRegion(\"logo\", -1);\n  const button = atlas.findRegion(\"button-play\", -1);\n  const TEXT_WIDTH = width * 0.9;\n  const TEXT_HEIGHT = TEXT_WIDTH * text.height / text.width;\n  const LOGO_WIDTH = width * 2 / 3;\n  const LOGO_HEIGHT = LOGO_WIDTH * logo.height / logo.width;\n  const BANNER_WIDTH = width * 0.96;\n  const BANNER_HEIGHT = BANNER_WIDTH * banner.height / banner.width;\n  const BUTTON_WIDTH = width / 3.5;\n  const BUTTON_HEIGHT = BUTTON_WIDTH * button.height / button.width;\n  const buttonInfos = [width / 2 - BUTTON_WIDTH / 2, height * 1.6 / 3, BUTTON_WIDTH, BUTTON_HEIGHT];\n  const coord = new Vector2();\n  let point;\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\n    coord.setVector(inputHandler.getTouchedWorldCoord());\n    point = {\n      x: coord.x,\n      y: coord.y\n    };\n\n    if (checkPointInsideRect(point, buttonInfos)) {\n      const token = localStorage.getItem(\"@Token\");\n\n      if (!token) {\n        const wrapper = document.createElement(\"div\");\n        document.body.append(wrapper);\n        ReactDOM.render( /*#__PURE__*/React.createElement(RegisterModal, {\n          onSubmit: async formBody => {\n            try {\n              const res = await axios.post(\"/register\", formBody);\n              const token = res.data;\n              localStorage.setItem(\"@Token\", token);\n              document.body.removeChild(wrapper);\n              goToInstructionScreen();\n            } catch (e) {}\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 11\n          }\n        }), wrapper);\n      } else {\n        goToInstructionScreen();\n      }\n    }\n  });\n\n  const update = delta => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(1, 1, 1, 1);\n    fillRect(batch, bg, 0, 0, width, height);\n    logo.draw(batch, width / 2 - LOGO_WIDTH / 2, height / 30, LOGO_WIDTH, LOGO_HEIGHT);\n    text.draw(batch, width / 2 - TEXT_WIDTH / 2, height * 0.95 / 3, TEXT_WIDTH, TEXT_HEIGHT);\n    banner.draw(batch, width / 2 - BANNER_WIDTH / 2, height * 1.9 / 3, BANNER_WIDTH, BANNER_HEIGHT);\n    button.draw(batch, buttonInfos[0], buttonInfos[1], buttonInfos[2], buttonInfos[3]);\n    batch.end();\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createStartScreenSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/StartScreen.js"],"names":["React","ReactDOM","RegisterModal","createViewportAwareInputHandler","fillRect","Vector2","checkPointInsideRect","axios","createInstructionScreen","createStartScreenSystem","Game","goToInstructionScreen","setCurrentScreen","canvas","viewport","width","height","camera","batch","assets","inputHandler","atlas","startScreen","bg","backGround2","banner","findRegion","text","logo","button","TEXT_WIDTH","TEXT_HEIGHT","LOGO_WIDTH","LOGO_HEIGHT","BANNER_WIDTH","BANNER_HEIGHT","BUTTON_WIDTH","BUTTON_HEIGHT","buttonInfos","coord","point","addEventListener","x","y","setVector","getTouchedWorldCoord","token","localStorage","getItem","wrapper","document","createElement","body","append","render","formBody","res","post","data","setItem","removeChild","e","update","delta","setProjection","combined","begin","setColor","draw","end","destroy","cleanup"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport RegisterModal from \"../RegisterModal\";\r\n\r\nimport { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\r\nimport { checkPointInsideRect } from \"./utils/coordUtils\";\r\nimport axios from \"../../utils/axios\";\r\nimport createInstructionScreen from \"./InstructionScreen\";\r\n\r\nconst createStartScreenSystem = (Game) => {\r\n  const goToInstructionScreen = async () => {\r\n    Game.setCurrentScreen(await createInstructionScreen(Game));\r\n  };\r\n\r\n  const { canvas, viewport, width, height, camera, batch, assets } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.startScreen;\r\n  const bg = assets.backGround2;\r\n\r\n  const banner = atlas.findRegion(\"1nam-an-lau-mien-phi\", -1);\r\n  const text = atlas.findRegion(\"content\", -1);\r\n  const logo = atlas.findRegion(\"logo\", -1);\r\n  const button = atlas.findRegion(\"button-play\", -1);\r\n  const TEXT_WIDTH = width * 0.9;\r\n  const TEXT_HEIGHT = (TEXT_WIDTH * text.height) / text.width;\r\n\r\n  const LOGO_WIDTH = (width * 2) / 3;\r\n  const LOGO_HEIGHT = (LOGO_WIDTH * logo.height) / logo.width;\r\n\r\n  const BANNER_WIDTH = width * 0.96;\r\n  const BANNER_HEIGHT = (BANNER_WIDTH * banner.height) / banner.width;\r\n\r\n  const BUTTON_WIDTH = width / 3.5;\r\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\r\n\r\n  const buttonInfos = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 1.6) / 3,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT,\r\n  ];\r\n\r\n  const coord = new Vector2();\r\n  let point;\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    coord.setVector(inputHandler.getTouchedWorldCoord());\r\n    point = { x: coord.x, y: coord.y };\r\n    if (checkPointInsideRect(point, buttonInfos)) {\r\n      const token = localStorage.getItem(\"@Token\");\r\n      if (!token) {\r\n        const wrapper = document.createElement(\"div\");\r\n        document.body.append(wrapper);\r\n        ReactDOM.render(\r\n          <RegisterModal\r\n            onSubmit={async (formBody) => {\r\n              try {\r\n                const res = await axios.post(\"/register\", formBody);\r\n                const token = res.data;\r\n                localStorage.setItem(\"@Token\", token);\r\n                document.body.removeChild(wrapper);\r\n                goToInstructionScreen();\r\n              } catch (e) {}\r\n            }}\r\n          />,\r\n          wrapper\r\n        );\r\n      } else {\r\n        goToInstructionScreen();\r\n      }\r\n    }\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 1);\r\n    fillRect(batch, bg, 0, 0, width, height);\r\n    logo.draw(\r\n      batch,\r\n      width / 2 - LOGO_WIDTH / 2,\r\n      height / 30,\r\n      LOGO_WIDTH,\r\n      LOGO_HEIGHT\r\n    );\r\n    text.draw(\r\n      batch,\r\n      width / 2 - TEXT_WIDTH / 2,\r\n      (height * 0.95) / 3,\r\n      TEXT_WIDTH,\r\n      TEXT_HEIGHT\r\n    );\r\n    banner.draw(\r\n      batch,\r\n      width / 2 - BANNER_WIDTH / 2,\r\n      (height * 1.9) / 3,\r\n      BANNER_WIDTH,\r\n      BANNER_HEIGHT\r\n    );\r\n    button.draw(\r\n      batch,\r\n      buttonInfos[0],\r\n      buttonInfos[1],\r\n      buttonInfos[2],\r\n      buttonInfos[3]\r\n    );\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createStartScreenSystem;\r\n"]},"metadata":{},"sourceType":"module"}