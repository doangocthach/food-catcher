{"ast":null,"code":"export default class TextureRegion {\n  static splitTexture(texture, cols, rows) {\n    const {\n      width,\n      height\n    } = texture;\n    const regionWidth = width / cols;\n    const regionHeight = height / rows;\n    const regions = [];\n\n    for (let x = 0; x < cols; x++) {\n      for (let y = 0; y < rows; y++) {\n        regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\n      }\n    }\n\n    return regions;\n  }\n\n  constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight, rotate) {\n    if (!invTexWidth || !invTexHeight) {\n      invTexWidth = 1 / tex.width;\n      invTexHeight = 1 / tex.height;\n    }\n\n    const u = x * invTexWidth;\n    const v = y * invTexHeight;\n    const u2 = (x + width) * invTexWidth;\n    const v2 = (y + height) * invTexHeight;\n    this.texture = tex;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n\n    if (rotate) {\n      this.u = u2;\n      this.v = v;\n      this.u2 = u;\n      this.v2 = v2;\n    } else {\n      this.u = u;\n      this.v = v;\n      this.u2 = u2;\n      this.v2 = v2;\n    }\n\n    for (let key in extraData) {\n      this[key] = extraData[key];\n    }\n  }\n\n  draw(batch, x, y, width, height, originX = 0, originY = 0, rotation = 0, scaleX = 1, scaleY = 1) {\n    batch.draw(this.texture, x, y, width, height, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2);\n  }\n\n}","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/gdxjs/lib/TextureRegion.js"],"names":["TextureRegion","splitTexture","texture","cols","rows","width","height","regionWidth","regionHeight","regions","x","y","push","constructor","tex","extraData","invTexWidth","invTexHeight","rotate","u","v","u2","v2","key","draw","batch","originX","originY","rotation","scaleX","scaleY"],"mappings":"AAAA,eAAe,MAAMA,aAAN,CAAoB;AACjC,SAAOC,YAAP,CAAoBC,OAApB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;AACvC,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA;AAFI,QAGFJ,OAHJ;AAIA,UAAMK,WAAW,GAAGF,KAAK,GAAGF,IAA5B;AACA,UAAMK,YAAY,GAAGF,MAAM,GAAGF,IAA9B;AACA,UAAMK,OAAO,GAAG,EAAhB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAApB,EAA0BO,CAAC,EAA3B,EAA+B;AAC7B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAApB,EAA0BO,CAAC,EAA3B,EAA+B;AAC7BF,QAAAA,OAAO,CAACG,IAAR,CAAa,IAAIZ,aAAJ,CAAkBE,OAAlB,EAA2BQ,CAAC,GAAGH,WAA/B,EAA4CI,CAAC,GAAGH,YAAhD,EAA8DD,WAA9D,EAA2EC,YAA3E,EAAyF,EAAzF,CAAb;AACD;AACF;;AAED,WAAOC,OAAP;AACD;;AAEDI,EAAAA,WAAW,CAACC,GAAD,EAAMJ,CAAN,EAASC,CAAT,EAAYN,KAAZ,EAAmBC,MAAnB,EAA2BS,SAA3B,EAAsCC,WAAtC,EAAmDC,YAAnD,EAAiEC,MAAjE,EAAyE;AAClF,QAAI,CAACF,WAAD,IAAgB,CAACC,YAArB,EAAmC;AACjCD,MAAAA,WAAW,GAAG,IAAIF,GAAG,CAACT,KAAtB;AACAY,MAAAA,YAAY,GAAG,IAAIH,GAAG,CAACR,MAAvB;AACD;;AAED,UAAMa,CAAC,GAAGT,CAAC,GAAGM,WAAd;AACA,UAAMI,CAAC,GAAGT,CAAC,GAAGM,YAAd;AACA,UAAMI,EAAE,GAAG,CAACX,CAAC,GAAGL,KAAL,IAAcW,WAAzB;AACA,UAAMM,EAAE,GAAG,CAACX,CAAC,GAAGL,MAAL,IAAeW,YAA1B;AACA,SAAKf,OAAL,GAAeY,GAAf;AACA,SAAKJ,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKN,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;;AAEA,QAAIY,MAAJ,EAAY;AACV,WAAKC,CAAL,GAASE,EAAT;AACA,WAAKD,CAAL,GAASA,CAAT;AACA,WAAKC,EAAL,GAAUF,CAAV;AACA,WAAKG,EAAL,GAAUA,EAAV;AACD,KALD,MAKO;AACL,WAAKH,CAAL,GAASA,CAAT;AACA,WAAKC,CAAL,GAASA,CAAT;AACA,WAAKC,EAAL,GAAUA,EAAV;AACA,WAAKC,EAAL,GAAUA,EAAV;AACD;;AAED,SAAK,IAAIC,GAAT,IAAgBR,SAAhB,EAA2B;AACzB,WAAKQ,GAAL,IAAYR,SAAS,CAACQ,GAAD,CAArB;AACD;AACF;;AAEDC,EAAAA,IAAI,CAACC,KAAD,EAAQf,CAAR,EAAWC,CAAX,EAAcN,KAAd,EAAqBC,MAArB,EAA6BoB,OAAO,GAAG,CAAvC,EAA0CC,OAAO,GAAG,CAApD,EAAuDC,QAAQ,GAAG,CAAlE,EAAqEC,MAAM,GAAG,CAA9E,EAAiFC,MAAM,GAAG,CAA1F,EAA6F;AAC/FL,IAAAA,KAAK,CAACD,IAAN,CAAW,KAAKtB,OAAhB,EAAyBQ,CAAzB,EAA4BC,CAA5B,EAA+BN,KAA/B,EAAsCC,MAAtC,EAA8CoB,OAA9C,EAAuDC,OAAvD,EAAgEC,QAAhE,EAA0EC,MAA1E,EAAkFC,MAAlF,EAA0F,KAAKX,CAA/F,EAAkG,KAAKC,CAAvG,EAA0G,KAAKC,EAA/G,EAAmH,KAAKC,EAAxH;AACD;;AAtDgC","sourcesContent":["export default class TextureRegion {\n  static splitTexture(texture, cols, rows) {\n    const {\n      width,\n      height\n    } = texture;\n    const regionWidth = width / cols;\n    const regionHeight = height / rows;\n    const regions = [];\n\n    for (let x = 0; x < cols; x++) {\n      for (let y = 0; y < rows; y++) {\n        regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\n      }\n    }\n\n    return regions;\n  }\n\n  constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight, rotate) {\n    if (!invTexWidth || !invTexHeight) {\n      invTexWidth = 1 / tex.width;\n      invTexHeight = 1 / tex.height;\n    }\n\n    const u = x * invTexWidth;\n    const v = y * invTexHeight;\n    const u2 = (x + width) * invTexWidth;\n    const v2 = (y + height) * invTexHeight;\n    this.texture = tex;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n\n    if (rotate) {\n      this.u = u2;\n      this.v = v;\n      this.u2 = u;\n      this.v2 = v2;\n    } else {\n      this.u = u;\n      this.v = v;\n      this.u2 = u2;\n      this.v2 = v2;\n    }\n\n    for (let key in extraData) {\n      this[key] = extraData[key];\n    }\n  }\n\n  draw(batch, x, y, width, height, originX = 0, originY = 0, rotation = 0, scaleX = 1, scaleY = 1) {\n    batch.draw(this.texture, x, y, width, height, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}