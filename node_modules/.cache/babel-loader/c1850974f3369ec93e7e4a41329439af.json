{"ast":null,"code":"import { loadTexture, TextureRegion } from \"gdxjs\";\nimport GlyphLayour from \"./glyphLayout\";\nexport const AlignMode = {\n  center: 0,\n  right: 1,\n  left: 2\n};\nexport const TextType = {\n  static: 0,\n  dynamic: 1\n};\n\nfunction concatAndResolveUrl(url, concat) {\n  let url1 = url.split(\"/\");\n  let url2 = concat.split(\"/\");\n  let url3 = [];\n\n  for (let i = 0, l = url1.length; i < l; i++) {\n    if (url1[i] === \"..\") {\n      url3.pop();\n    } else if (url1[i] === \".\") {\n      continue;\n    } else {\n      url3.push(url1[i]);\n    }\n  }\n\n  for (let i = 0, l = url2.length; i < l; i++) {\n    if (url2[i] === \"..\") {\n      url3.pop();\n    } else if (url2[i] === \".\") {\n      continue;\n    } else {\n      url3.push(url2[i]);\n    }\n  }\n\n  return url3.join(\"/\");\n}\n\nexport default (async (gl, packFileUrl, textureOptions) => {\n  const packFileContent = await fetch(packFileUrl).then(res => res.text());\n  const pages = [];\n  const regionsData = [];\n  const kerningsData = [];\n  let pageImage = null;\n  const lines = packFileContent.split(\"\\n\");\n  let i = 0;\n  let tuple;\n  let tmp_array = [];\n  let push_to_kerning = false;\n  let numOfPages = 0;\n  let startPageLine = 2;\n\n  while (true) {\n    let line = lines[startPageLine];\n    tmp_array.length = 0;\n    tuple = line.split(\" \").map(s => s.trim());\n\n    if (tuple[0] === \"page\") {\n      numOfPages += 1;\n    } else {\n      break;\n    }\n\n    startPageLine += 1;\n  }\n\n  let pageCounter = -1;\n  let saveIndex = 2 + numOfPages + 1; // index to start finding region data\n\n  while (true) {\n    let line = lines[i];\n\n    if (line === undefined) {\n      push_to_kerning = false;\n      break;\n    }\n\n    if (line.split(\" \").length === 2) {\n      const tmp = line.split(\" \");\n\n      if (tmp[0] === \"kernings\") {\n        push_to_kerning = true;\n      }\n\n      i++;\n      line = lines[i];\n    }\n\n    if (push_to_kerning && pageImage !== null) {\n      tuple = line.split(\" \").map(s => s.trim());\n      tuple = tuple.filter(item => item !== \"\");\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n\n      const first = parseInt(tmp_array[0], 10);\n      const second = parseInt(tmp_array[1], 10);\n      const amount = parseInt(tmp_array[2], 10);\n      kerningsData.push({\n        first,\n        second,\n        amount\n      });\n    }\n\n    if (pageImage === null) {\n      pageCounter += 1;\n      tmp_array.length = 0;\n      tuple = line.split(\" \").map(s => s.trim());\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n\n      const face = tmp_array[0];\n      const size = parseInt(tmp_array[1], 10);\n      const bold = parseInt(tmp_array[2], 10) === 0 ? false : true;\n      const italic = parseInt(tmp_array[3], 10) === 0 ? false : true;\n      const charset = tmp_array[4];\n      const unicode = parseInt(tmp_array[5], 10);\n      const stretchH = parseInt(tmp_array[6], 10); // percentage\n\n      const smooth = parseInt(tmp_array[7], 10);\n      const aa = parseInt(tmp_array[8], 10);\n      const padding = tmp_array[9].split(\",\").map(i => parseInt(i, 10));\n      const spacing = tmp_array[10].split(\",\").map(i => parseInt(i, 10));\n      const outline = parseInt(tmp_array[11], 10);\n      i++;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(\" \").map(s => s.trim());\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n\n      const lineHeight = parseInt(tmp_array[0], 10);\n      const base = parseInt(tmp_array[1], 10);\n      const scaleW = parseInt(tmp_array[2], 10);\n      const scaleH = parseInt(tmp_array[3], 10);\n      const num_of_pages = parseInt(tmp_array[4], 10);\n      const packed = parseInt(tmp_array[5], 10);\n      const alphaChnl = parseInt(tmp_array[6], 10);\n      const redChnl = parseInt(tmp_array[7], 10);\n      const greenChnl = parseInt(tmp_array[8], 10);\n      const blueChnl = parseInt(tmp_array[9], 10);\n      i = i + pageCounter + 1;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(\" \").map(s => s.trim());\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n\n      const page_id = parseInt(tmp_array[0], 10);\n      const url = tmp_array[1].split('\"');\n      const file = concatAndResolveUrl(packFileUrl, `../${url[1]}`);\n      pageImage = {\n        file,\n        page_id,\n        face,\n        size,\n        bold,\n        italic,\n        charset,\n        unicode,\n        stretchH,\n        smooth,\n        aa,\n        padding,\n        spacing,\n        outline,\n        lineHeight,\n        base,\n        scaleW,\n        scaleH,\n        num_of_pages,\n        packed,\n        alphaChnl,\n        redChnl,\n        greenChnl,\n        blueChnl\n      };\n      pages.push(pageImage);\n      i = saveIndex;\n      line = lines[i];\n    }\n\n    if (!push_to_kerning && pageImage !== null) {\n      tuple = line.split(\" \").map(s => s.trim());\n      tuple = tuple.filter(item => item !== \"\");\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split(\"=\")[1]);\n      }\n\n      const id = parseInt(tmp_array[0], 10);\n      const left = parseInt(tmp_array[1], 10);\n      const top = parseInt(tmp_array[2], 10);\n      const width = parseInt(tmp_array[3], 10);\n      const height = parseInt(tmp_array[4], 10);\n      const xoffset = parseInt(tmp_array[5], 10);\n      const yoffset = parseInt(tmp_array[6], 10);\n      const xadvance = parseInt(tmp_array[7], 10);\n      const page = parseInt(tmp_array[8], 10);\n      const region = {\n        id,\n        left,\n        top,\n        width,\n        height,\n        xoffset,\n        yoffset,\n        xadvance,\n        page: pageImage,\n        id_page: page\n      };\n\n      if (region.id_page === pageCounter) {\n        regionsData.push(region);\n      } else {\n        if (pageCounter === numOfPages - 1) {\n          push_to_kerning = true;\n        } else {\n          saveIndex = i;\n          i = -1;\n          pageImage = null;\n        }\n      }\n    }\n\n    i++;\n  } //   console.log(kerningsData);\n  //   console.log(pages);\n  //   console.log(regionsData);\n\n\n  for (let page of pages) {\n    page.texture = await loadTexture(gl, page.file, textureOptions);\n    page.invTextWidth = 1 / page.texture.width;\n    page.invTextHeight = 1 / page.texture.height;\n  }\n\n  const regions = [];\n\n  for (let regionData of regionsData) {\n    const left = regionData.left;\n    const top = regionData.top;\n    const width = regionData.width;\n    const height = regionData.height;\n    const {\n      texture,\n      invTexWidth,\n      invTexHeight\n    } = regionData.page;\n    regions.push(new TextureRegion(texture, left, top, width, height, regionData, invTexWidth, invTexHeight));\n  }\n\n  return {\n    getLineHeight() {\n      return pageImage.lineHeight;\n    },\n\n    getPages() {\n      return pages;\n    },\n\n    getRegions() {\n      return regions;\n    },\n\n    findRegions(id) {\n      for (let i = 0; i < regions.length; i++) {\n        if (regions[i].id === id) {\n          return regions[i];\n        }\n      }\n    },\n\n    setNewText(canvasWidth) {\n      return new GlyphLayour(pageImage, regions, kerningsData, canvasWidth);\n    }\n\n  };\n});","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/utils/loadFontFile.js"],"names":["loadTexture","TextureRegion","GlyphLayour","AlignMode","center","right","left","TextType","static","dynamic","concatAndResolveUrl","url","concat","url1","split","url2","url3","i","l","length","pop","push","join","gl","packFileUrl","textureOptions","packFileContent","fetch","then","res","text","pages","regionsData","kerningsData","pageImage","lines","tuple","tmp_array","push_to_kerning","numOfPages","startPageLine","line","map","s","trim","pageCounter","saveIndex","undefined","tmp","filter","item","first","parseInt","second","amount","face","size","bold","italic","charset","unicode","stretchH","smooth","aa","padding","spacing","outline","lineHeight","base","scaleW","scaleH","num_of_pages","packed","alphaChnl","redChnl","greenChnl","blueChnl","page_id","file","id","top","width","height","xoffset","yoffset","xadvance","page","region","id_page","texture","invTextWidth","invTextHeight","regions","regionData","invTexWidth","invTexHeight","getLineHeight","getPages","getRegions","findRegions","setNewText","canvasWidth"],"mappings":"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","sourcesContent":["import { loadTexture, TextureRegion } from \"gdxjs\";\r\nimport GlyphLayour from \"./glyphLayout\";\r\n\r\nexport const AlignMode = {\r\n  center: 0,\r\n  right: 1,\r\n  left: 2,\r\n};\r\n\r\nexport const TextType = {\r\n  static: 0,\r\n  dynamic: 1,\r\n};\r\n\r\nfunction concatAndResolveUrl(url, concat) {\r\n  let url1 = url.split(\"/\");\r\n  let url2 = concat.split(\"/\");\r\n  let url3 = [];\r\n\r\n  for (let i = 0, l = url1.length; i < l; i++) {\r\n    if (url1[i] === \"..\") {\r\n      url3.pop();\r\n    } else if (url1[i] === \".\") {\r\n      continue;\r\n    } else {\r\n      url3.push(url1[i]);\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = url2.length; i < l; i++) {\r\n    if (url2[i] === \"..\") {\r\n      url3.pop();\r\n    } else if (url2[i] === \".\") {\r\n      continue;\r\n    } else {\r\n      url3.push(url2[i]);\r\n    }\r\n  }\r\n\r\n  return url3.join(\"/\");\r\n}\r\n\r\nexport default async (gl, packFileUrl, textureOptions) => {\r\n  const packFileContent = await fetch(packFileUrl).then((res) => res.text());\r\n  const pages = [];\r\n  const regionsData = [];\r\n  const kerningsData = [];\r\n  let pageImage = null;\r\n  const lines = packFileContent.split(\"\\n\");\r\n  let i = 0;\r\n  let tuple;\r\n  let tmp_array = [];\r\n  let push_to_kerning = false;\r\n\r\n  let numOfPages = 0;\r\n  let startPageLine = 2;\r\n  while (true) {\r\n    let line = lines[startPageLine];\r\n    tmp_array.length = 0;\r\n    tuple = line.split(\" \").map((s) => s.trim());\r\n    if (tuple[0] === \"page\") {\r\n      numOfPages += 1;\r\n    } else {\r\n      break;\r\n    }\r\n    startPageLine += 1;\r\n  }\r\n\r\n  let pageCounter = -1;\r\n  let saveIndex = 2 + numOfPages + 1; // index to start finding region data\r\n\r\n  while (true) {\r\n    let line = lines[i];\r\n\r\n    if (line === undefined) {\r\n      push_to_kerning = false;\r\n      break;\r\n    }\r\n\r\n    if (line.split(\" \").length === 2) {\r\n      const tmp = line.split(\" \");\r\n      if (tmp[0] === \"kernings\") {\r\n        push_to_kerning = true;\r\n      }\r\n      i++;\r\n      line = lines[i];\r\n    }\r\n\r\n    if (push_to_kerning && pageImage !== null) {\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      tuple = tuple.filter((item) => item !== \"\");\r\n      tmp_array.length = 0;\r\n\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const first = parseInt(tmp_array[0], 10);\r\n      const second = parseInt(tmp_array[1], 10);\r\n      const amount = parseInt(tmp_array[2], 10);\r\n      kerningsData.push({ first, second, amount });\r\n    }\r\n\r\n    if (pageImage === null) {\r\n      pageCounter += 1;\r\n\r\n      tmp_array.length = 0;\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const face = tmp_array[0];\r\n      const size = parseInt(tmp_array[1], 10);\r\n      const bold = parseInt(tmp_array[2], 10) === 0 ? false : true;\r\n      const italic = parseInt(tmp_array[3], 10) === 0 ? false : true;\r\n      const charset = tmp_array[4];\r\n      const unicode = parseInt(tmp_array[5], 10);\r\n      const stretchH = parseInt(tmp_array[6], 10); // percentage\r\n      const smooth = parseInt(tmp_array[7], 10);\r\n      const aa = parseInt(tmp_array[8], 10);\r\n      const padding = tmp_array[9].split(\",\").map((i) => parseInt(i, 10));\r\n      const spacing = tmp_array[10].split(\",\").map((i) => parseInt(i, 10));\r\n      const outline = parseInt(tmp_array[11], 10);\r\n\r\n      i++;\r\n      line = lines[i];\r\n      tmp_array.length = 0;\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const lineHeight = parseInt(tmp_array[0], 10);\r\n      const base = parseInt(tmp_array[1], 10);\r\n      const scaleW = parseInt(tmp_array[2], 10);\r\n      const scaleH = parseInt(tmp_array[3], 10);\r\n      const num_of_pages = parseInt(tmp_array[4], 10);\r\n      const packed = parseInt(tmp_array[5], 10);\r\n      const alphaChnl = parseInt(tmp_array[6], 10);\r\n      const redChnl = parseInt(tmp_array[7], 10);\r\n      const greenChnl = parseInt(tmp_array[8], 10);\r\n      const blueChnl = parseInt(tmp_array[9], 10);\r\n\r\n      i = i + pageCounter + 1;\r\n      line = lines[i];\r\n      tmp_array.length = 0;\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const page_id = parseInt(tmp_array[0], 10);\r\n      const url = tmp_array[1].split('\"');\r\n      const file = concatAndResolveUrl(packFileUrl, `../${url[1]}`);\r\n\r\n      pageImage = {\r\n        file,\r\n        page_id,\r\n        face,\r\n        size,\r\n        bold,\r\n        italic,\r\n        charset,\r\n        unicode,\r\n        stretchH,\r\n        smooth,\r\n        aa,\r\n        padding,\r\n        spacing,\r\n        outline,\r\n        lineHeight,\r\n        base,\r\n        scaleW,\r\n        scaleH,\r\n        num_of_pages,\r\n        packed,\r\n        alphaChnl,\r\n        redChnl,\r\n        greenChnl,\r\n        blueChnl,\r\n      };\r\n      pages.push(pageImage);\r\n\r\n      i = saveIndex;\r\n      line = lines[i];\r\n    }\r\n\r\n    if (!push_to_kerning && pageImage !== null) {\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      tuple = tuple.filter((item) => item !== \"\");\r\n      tmp_array.length = 0;\r\n\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const id = parseInt(tmp_array[0], 10);\r\n      const left = parseInt(tmp_array[1], 10);\r\n      const top = parseInt(tmp_array[2], 10);\r\n      const width = parseInt(tmp_array[3], 10);\r\n      const height = parseInt(tmp_array[4], 10);\r\n      const xoffset = parseInt(tmp_array[5], 10);\r\n      const yoffset = parseInt(tmp_array[6], 10);\r\n      const xadvance = parseInt(tmp_array[7], 10);\r\n      const page = parseInt(tmp_array[8], 10);\r\n      const region = {\r\n        id,\r\n        left,\r\n        top,\r\n        width,\r\n        height,\r\n        xoffset,\r\n        yoffset,\r\n        xadvance,\r\n        page: pageImage,\r\n        id_page: page,\r\n      };\r\n\r\n      if (region.id_page === pageCounter) {\r\n        regionsData.push(region);\r\n      } else {\r\n        if (pageCounter === numOfPages - 1) {\r\n          push_to_kerning = true;\r\n        } else {\r\n          saveIndex = i;\r\n          i = -1;\r\n          pageImage = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    i++;\r\n  }\r\n\r\n  //   console.log(kerningsData);\r\n  //   console.log(pages);\r\n  //   console.log(regionsData);\r\n  for (let page of pages) {\r\n    page.texture = await loadTexture(gl, page.file, textureOptions);\r\n    page.invTextWidth = 1 / page.texture.width;\r\n    page.invTextHeight = 1 / page.texture.height;\r\n  }\r\n\r\n  const regions = [];\r\n\r\n  for (let regionData of regionsData) {\r\n    const left = regionData.left;\r\n    const top = regionData.top;\r\n    const width = regionData.width;\r\n    const height = regionData.height;\r\n    const { texture, invTexWidth, invTexHeight } = regionData.page;\r\n    regions.push(\r\n      new TextureRegion(\r\n        texture,\r\n        left,\r\n        top,\r\n        width,\r\n        height,\r\n        regionData,\r\n        invTexWidth,\r\n        invTexHeight\r\n      )\r\n    );\r\n  }\r\n\r\n  return {\r\n    getLineHeight() {\r\n      return pageImage.lineHeight;\r\n    },\r\n\r\n    getPages() {\r\n      return pages;\r\n    },\r\n\r\n    getRegions() {\r\n      return regions;\r\n    },\r\n\r\n    findRegions(id) {\r\n      for (let i = 0; i < regions.length; i++) {\r\n        if (regions[i].id === id) {\r\n          return regions[i];\r\n        }\r\n      }\r\n    },\r\n\r\n    setNewText(canvasWidth) {\r\n      return new GlyphLayour(pageImage, regions, kerningsData, canvasWidth);\r\n    },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}