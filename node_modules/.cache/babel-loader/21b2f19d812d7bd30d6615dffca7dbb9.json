{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{createViewportAwareInputHandler,fillRect,Vector2}from\"gdxjs\";import createGameScreenSystem from\"./GameScreen\";import{checkPointInsideRect}from\"./utils/coordUtils\";var createInstructionScreenSystem=function createInstructionScreenSystem(Game){var goToGameScreen=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=Game;_context.next=3;return createGameScreenSystem(Game);case 3:_context.t1=_context.sent;_context.t0.setCurrentScreen.call(_context.t0,_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return function goToGameScreen(){return _ref.apply(this,arguments);};}();var canvas=Game.canvas,viewport=Game.viewport,width=Game.width,height=Game.height,camera=Game.camera,batch=Game.batch,assets=Game.assets;var inputHandler=createViewportAwareInputHandler(canvas,viewport);var atlas=assets.startScreen;var bg=assets.backGround;var button=atlas.findRegion(\"button-play\",-1);var banner1=atlas.findRegion(\"hung_nguyen_lieu_de_ghi_diem\",-1);var banner2=atlas.findRegion(\"ne_cac_nguyen_lieu_khong_co_trong_menu\",-1);var B1_WIDTH=width*0.9;var B1_HEIGHT=B1_WIDTH*banner1.height/banner1.width;var B2_WIDTH=width*0.9;var B2_HEIGHT=B2_WIDTH*banner2.height/banner2.width;var BUTTON_WIDTH=width/3.5;var BUTTON_HEIGHT=BUTTON_WIDTH*button.height/button.width;var buttonInfos=[width/2-BUTTON_WIDTH/2,height*2.6/3,BUTTON_WIDTH,BUTTON_HEIGHT];var coord=new Vector2();var point;inputHandler.addEventListener(\"touchStart\",function(x,y){coord.setVector(inputHandler.getTouchedWorldCoord());point={x:coord.x,y:coord.y};if(checkPointInsideRect(point,buttonInfos)){goToGameScreen();}});var update=function update(delta){batch.setProjection(camera.combined);batch.begin();batch.setColor(1,1,1,1);fillRect(batch,bg,0,0,width,height);banner1.draw(batch,width/2-B1_WIDTH/2,height/16,B1_WIDTH,B1_HEIGHT);banner2.draw(batch,width/2-B2_WIDTH/2,height*1.4/3,B2_WIDTH,B2_HEIGHT);button.draw(batch,buttonInfos[0],buttonInfos[1],buttonInfos[2],buttonInfos[3]);batch.end();};return{update:update,destroy:function destroy(){inputHandler.cleanup();}};};export default createInstructionScreenSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/InstructionScreen.js"],"names":["createViewportAwareInputHandler","fillRect","Vector2","createGameScreenSystem","checkPointInsideRect","createInstructionScreenSystem","Game","goToGameScreen","setCurrentScreen","canvas","viewport","width","height","camera","batch","assets","inputHandler","atlas","startScreen","bg","backGround","button","findRegion","banner1","banner2","B1_WIDTH","B1_HEIGHT","B2_WIDTH","B2_HEIGHT","BUTTON_WIDTH","BUTTON_HEIGHT","buttonInfos","coord","point","addEventListener","x","y","setVector","getTouchedWorldCoord","update","delta","setProjection","combined","begin","setColor","draw","end","destroy","cleanup"],"mappings":"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","sourcesContent":["import { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\r\nimport createGameScreenSystem from \"./GameScreen\";\r\nimport { checkPointInsideRect } from \"./utils/coordUtils\";\r\n\r\nconst createInstructionScreenSystem = (Game) => {\r\n  const goToGameScreen = async () => {\r\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\r\n  };\r\n\r\n  const { canvas, viewport, width, height, camera, batch, assets } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.startScreen;\r\n  const bg = assets.backGround;\r\n\r\n  const button = atlas.findRegion(\"button-play\", -1);\r\n  const banner1 = atlas.findRegion(\"hung_nguyen_lieu_de_ghi_diem\", -1);\r\n  const banner2 = atlas.findRegion(\r\n    \"ne_cac_nguyen_lieu_khong_co_trong_menu\",\r\n    -1\r\n  );\r\n\r\n  const B1_WIDTH = width * 0.9;\r\n  const B1_HEIGHT = (B1_WIDTH * banner1.height) / banner1.width;\r\n\r\n  const B2_WIDTH = width * 0.9;\r\n  const B2_HEIGHT = (B2_WIDTH * banner2.height) / banner2.width;\r\n\r\n  const BUTTON_WIDTH = width / 3.5;\r\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\r\n\r\n  const buttonInfos = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 2.6) / 3,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT,\r\n  ];\r\n\r\n  const coord = new Vector2();\r\n  let point;\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    coord.setVector(inputHandler.getTouchedWorldCoord());\r\n    point = { x: coord.x, y: coord.y };\r\n    if (checkPointInsideRect(point, buttonInfos)) {\r\n      goToGameScreen();\r\n    }\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 1);\r\n    fillRect(batch, bg, 0, 0, width, height);\r\n    banner1.draw(\r\n      batch,\r\n      width / 2 - B1_WIDTH / 2,\r\n      height / 16,\r\n      B1_WIDTH,\r\n      B1_HEIGHT\r\n    );\r\n\r\n    banner2.draw(\r\n      batch,\r\n      width / 2 - B2_WIDTH / 2,\r\n      (height * 1.4) / 3,\r\n      B2_WIDTH,\r\n      B2_HEIGHT\r\n    );\r\n\r\n    button.draw(\r\n      batch,\r\n      buttonInfos[0],\r\n      buttonInfos[1],\r\n      buttonInfos[2],\r\n      buttonInfos[3]\r\n    );\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createInstructionScreenSystem;\r\n"]},"metadata":{},"sourceType":"module"}