{"ast":null,"code":"const createTrayCollideFoodSystem = () => {\n  return {\n    update(delta, worldState, {\n      batch,\n      camera,\n      width,\n      height\n    }) {\n      const {\n        recipes,\n        trayState,\n        foods,\n        collection,\n        stateTime,\n        life,\n        whiteSmokeList\n      } = worldState;\n\n      for (let i = 0; i < foods.length; i++) {\n        if (foods[i].x > trayState.x - trayState.width / 2 && foods[i].x < trayState.x + trayState.width / 2 && foods[i].y > // trayState.y - trayState.height - trayState.offsetCheckY &&\n        trayState.y - trayState.height && foods[i].y < trayState.y + trayState.height && stateTime > foods[i].upTime) {\n          for (let j = 0; j < recipes.length; j++) {\n            if (foods[i].type === recipes[j].type && !worldState.correctCatch) {\n              worldState.correctCatch = true;\n\n              if (recipes[j].counter === 0) {\n                // only push that kind of food one time to collection\n                // trayState.offsetCheckY += trayState.height * 0.7; // update offsetY\n                collection.push({\n                  type: foods[i].type,\n                  stateTimeSmoke: 0,\n                  stateTimeFood: 0,\n                  startSmoke: true\n                });\n                whiteSmokeList.push({\n                  inPot: true,\n                  stateTime: 0 // width: trayState.width,\n                  // height: trayState.height,\n\n                });\n              } else {\n                whiteSmokeList.push({\n                  x: foods[i].x,\n                  y: foods[i].y,\n                  stateTime: 0,\n                  scale: foods[i].oriScale\n                });\n              }\n\n              recipes[j].counter = Math.min(recipes[j].amount, recipes[j].counter += 1);\n\n              if (recipes[j].counter === recipes[j].amount) {\n                recipes[j].finished = true;\n              } //   console.log(\"hit\");\n\n\n              foods.splice(i, 1);\n              break; // if there is any one match => break the loop\n            } else if (foods[i].type !== recipes[j].type) {} //   console.log(\"miss\");\n            //wrong catch\n\n\n            if (j === recipes.length - 1) {\n              worldState.comboCounter = 0;\n              worldState.comboCheckIndex.length = 0;\n              life[worldState.lifeIndex].red = false;\n              worldState.lifeIndex = Math.max(0, worldState.lifeIndex -= 1);\n              worldState.stunScreen.check = true;\n              foods.splice(i, 1);\n            }\n          }\n        }\n      }\n    }\n\n  };\n};\n\nexport default createTrayCollideFoodSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/TrayCollideFoodSystem.js"],"names":["createTrayCollideFoodSystem","update","delta","worldState","batch","camera","width","height","recipes","trayState","foods","collection","stateTime","life","whiteSmokeList","i","length","x","y","upTime","j","type","correctCatch","counter","push","stateTimeSmoke","stateTimeFood","startSmoke","inPot","scale","oriScale","Math","min","amount","finished","splice","comboCounter","comboCheckIndex","lifeIndex","red","max","stunScreen","check"],"mappings":"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","sourcesContent":["const createTrayCollideFoodSystem = () => {\r\n  return {\r\n    update(delta, worldState, { batch, camera, width, height }) {\r\n      const {\r\n        recipes,\r\n        trayState,\r\n        foods,\r\n        collection,\r\n        stateTime,\r\n        life,\r\n        whiteSmokeList,\r\n      } = worldState;\r\n\r\n      for (let i = 0; i < foods.length; i++) {\r\n        if (\r\n          foods[i].x > trayState.x - trayState.width / 2 &&\r\n          foods[i].x < trayState.x + trayState.width / 2 &&\r\n          foods[i].y >\r\n            // trayState.y - trayState.height - trayState.offsetCheckY &&\r\n            trayState.y - trayState.height &&\r\n          foods[i].y < trayState.y + trayState.height &&\r\n          stateTime > foods[i].upTime\r\n        ) {\r\n          for (let j = 0; j < recipes.length; j++) {\r\n            if (foods[i].type === recipes[j].type && !worldState.correctCatch) {\r\n              worldState.correctCatch = true;\r\n              if (recipes[j].counter === 0) {\r\n                // only push that kind of food one time to collection\r\n                // trayState.offsetCheckY += trayState.height * 0.7; // update offsetY\r\n                collection.push({\r\n                  type: foods[i].type,\r\n                  stateTimeSmoke: 0,\r\n                  stateTimeFood: 0,\r\n                  startSmoke: true,\r\n                });\r\n\r\n                whiteSmokeList.push({\r\n                  inPot: true,\r\n\r\n                  stateTime: 0,\r\n                  // width: trayState.width,\r\n                  // height: trayState.height,\r\n                });\r\n              } else {\r\n                whiteSmokeList.push({\r\n                  x: foods[i].x,\r\n                  y: foods[i].y,\r\n                  stateTime: 0,\r\n                  scale: foods[i].oriScale,\r\n                });\r\n              }\r\n\r\n              recipes[j].counter = Math.min(\r\n                recipes[j].amount,\r\n                (recipes[j].counter += 1)\r\n              );\r\n\r\n              if (recipes[j].counter === recipes[j].amount) {\r\n                recipes[j].finished = true;\r\n              }\r\n              //   console.log(\"hit\");\r\n              foods.splice(i, 1);\r\n              break; // if there is any one match => break the loop\r\n            } else if (foods[i].type !== recipes[j].type) {\r\n              //   console.log(\"miss\");\r\n            }\r\n\r\n            //wrong catch\r\n            if (j === recipes.length - 1) {\r\n              worldState.comboCounter = 0;\r\n              worldState.comboCheckIndex.length = 0;\r\n              life[worldState.lifeIndex].red = false;\r\n              worldState.lifeIndex = Math.max(0, (worldState.lifeIndex -= 1));\r\n              worldState.stunScreen.check = true;\r\n              foods.splice(i, 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createTrayCollideFoodSystem;\r\n"]},"metadata":{},"sourceType":"module"}