{"ast":null,"code":"const createCollectionRenderSystem = () => {\n  let COLLECTION_WIDTH, COLLECTION_HEIGHT; // let SMOKE_WIDTH, SMOKE_HEIGHT;\n\n  let foodInPotTex;\n  let foodPosition;\n  return {\n    init({\n      trayState\n    }, {\n      width,\n      assets\n    }) {\n      COLLECTION_WIDTH = width / 7;\n      COLLECTION_HEIGHT = COLLECTION_WIDTH * 255 / 400; // SMOKE_WIDTH = COLLECTION_WIDTH * 4;\n      // SMOKE_HEIGHT = COLLECTION_HEIGHT * 4;\n    },\n\n    update(delta, {\n      trayState,\n      foodAnimation,\n      smokeAnimation,\n      collection,\n      foodInPot\n    }, {\n      batch,\n      width,\n      height,\n      camera\n    }) {\n      foodPosition = [{\n        x: trayState.x - COLLECTION_WIDTH / 2,\n        y: trayState.y - trayState.height / 1.4\n      }, {\n        x: trayState.x - trayState.width / 2.2,\n        y: trayState.y - trayState.height / 1.4\n      }, {\n        x: trayState.x + trayState.width / 2.4 - COLLECTION_WIDTH,\n        y: trayState.y - trayState.height / 1.4\n      }, {\n        x: trayState.x - COLLECTION_WIDTH / 2,\n        y: trayState.y - trayState.height * 1.2\n      }];\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n\n      for (let i = collection.length - 1; i >= 0; i--) {\n        for (let j = 0; j < foodInPot.length; j++) {\n          if (collection[i].type === foodInPot[j].index) {\n            foodInPotTex = foodInPot[j];\n          }\n        }\n\n        foodInPotTex.image.draw(batch, foodPosition[i].x, foodPosition[i].y, COLLECTION_WIDTH, COLLECTION_HEIGHT);\n      }\n\n      batch.end();\n    }\n\n  };\n};\n\nexport default createCollectionRenderSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/CollectionRenderSystem.js"],"names":["createCollectionRenderSystem","COLLECTION_WIDTH","COLLECTION_HEIGHT","foodInPotTex","foodPosition","init","trayState","width","assets","update","delta","foodAnimation","smokeAnimation","collection","foodInPot","batch","height","camera","x","y","setProjection","combined","begin","setColor","i","length","j","type","index","image","draw","end"],"mappings":"AAAA,MAAMA,4BAA4B,GAAG,MAAM;AACzC,MAAIC,gBAAJ,EAAsBC,iBAAtB,CADyC,CAEzC;;AACA,MAAIC,YAAJ;AACA,MAAIC,YAAJ;AACA,SAAO;AACLC,IAAAA,IAAI,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAgB;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAhB,EAAmC;AACrCP,MAAAA,gBAAgB,GAAGM,KAAK,GAAG,CAA3B;AACAL,MAAAA,iBAAiB,GAAID,gBAAgB,GAAG,GAApB,GAA2B,GAA/C,CAFqC,CAIrC;AACA;AACD,KAPI;;AAQLQ,IAAAA,MAAM,CACJC,KADI,EAEJ;AAAEJ,MAAAA,SAAF;AAAaK,MAAAA,aAAb;AAA4BC,MAAAA,cAA5B;AAA4CC,MAAAA,UAA5C;AAAwDC,MAAAA;AAAxD,KAFI,EAGJ;AAAEC,MAAAA,KAAF;AAASR,MAAAA,KAAT;AAAgBS,MAAAA,MAAhB;AAAwBC,MAAAA;AAAxB,KAHI,EAIJ;AACAb,MAAAA,YAAY,GAAG,CACb;AACEc,QAAAA,CAAC,EAAEZ,SAAS,CAACY,CAAV,GAAcjB,gBAAgB,GAAG,CADtC;AAEEkB,QAAAA,CAAC,EAAEb,SAAS,CAACa,CAAV,GAAcb,SAAS,CAACU,MAAV,GAAmB;AAFtC,OADa,EAKb;AACEE,QAAAA,CAAC,EAAEZ,SAAS,CAACY,CAAV,GAAcZ,SAAS,CAACC,KAAV,GAAkB,GADrC;AAEEY,QAAAA,CAAC,EAAEb,SAAS,CAACa,CAAV,GAAcb,SAAS,CAACU,MAAV,GAAmB;AAFtC,OALa,EASb;AACEE,QAAAA,CAAC,EAAEZ,SAAS,CAACY,CAAV,GAAcZ,SAAS,CAACC,KAAV,GAAkB,GAAhC,GAAsCN,gBAD3C;AAEEkB,QAAAA,CAAC,EAAEb,SAAS,CAACa,CAAV,GAAcb,SAAS,CAACU,MAAV,GAAmB;AAFtC,OATa,EAab;AACEE,QAAAA,CAAC,EAAEZ,SAAS,CAACY,CAAV,GAAcjB,gBAAgB,GAAG,CADtC;AAEEkB,QAAAA,CAAC,EAAEb,SAAS,CAACa,CAAV,GAAcb,SAAS,CAACU,MAAV,GAAmB;AAFtC,OAba,CAAf;AAkBAD,MAAAA,KAAK,CAACK,aAAN,CAAoBH,MAAM,CAACI,QAA3B;AACAN,MAAAA,KAAK,CAACO,KAAN;AACAP,MAAAA,KAAK,CAACQ,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;;AACA,WAAK,IAAIC,CAAC,GAAGX,UAAU,CAACY,MAAX,GAAoB,CAAjC,EAAoCD,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC/C,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,SAAS,CAACW,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACzC,cAAIb,UAAU,CAACW,CAAD,CAAV,CAAcG,IAAd,KAAuBb,SAAS,CAACY,CAAD,CAAT,CAAaE,KAAxC,EAA+C;AAC7CzB,YAAAA,YAAY,GAAGW,SAAS,CAACY,CAAD,CAAxB;AACD;AACF;;AAEDvB,QAAAA,YAAY,CAAC0B,KAAb,CAAmBC,IAAnB,CACEf,KADF,EAEEX,YAAY,CAACoB,CAAD,CAAZ,CAAgBN,CAFlB,EAGEd,YAAY,CAACoB,CAAD,CAAZ,CAAgBL,CAHlB,EAIElB,gBAJF,EAKEC,iBALF;AAOD;;AAEDa,MAAAA,KAAK,CAACgB,GAAN;AACD;;AAnDI,GAAP;AAqDD,CA1DD;;AA4DA,eAAe/B,4BAAf","sourcesContent":["const createCollectionRenderSystem = () => {\r\n  let COLLECTION_WIDTH, COLLECTION_HEIGHT;\r\n  // let SMOKE_WIDTH, SMOKE_HEIGHT;\r\n  let foodInPotTex;\r\n  let foodPosition;\r\n  return {\r\n    init({ trayState }, { width, assets }) {\r\n      COLLECTION_WIDTH = width / 7;\r\n      COLLECTION_HEIGHT = (COLLECTION_WIDTH * 255) / 400;\r\n\r\n      // SMOKE_WIDTH = COLLECTION_WIDTH * 4;\r\n      // SMOKE_HEIGHT = COLLECTION_HEIGHT * 4;\r\n    },\r\n    update(\r\n      delta,\r\n      { trayState, foodAnimation, smokeAnimation, collection, foodInPot },\r\n      { batch, width, height, camera }\r\n    ) {\r\n      foodPosition = [\r\n        {\r\n          x: trayState.x - COLLECTION_WIDTH / 2,\r\n          y: trayState.y - trayState.height / 1.4,\r\n        },\r\n        {\r\n          x: trayState.x - trayState.width / 2.2,\r\n          y: trayState.y - trayState.height / 1.4,\r\n        },\r\n        {\r\n          x: trayState.x + trayState.width / 2.4 - COLLECTION_WIDTH,\r\n          y: trayState.y - trayState.height / 1.4,\r\n        },\r\n        {\r\n          x: trayState.x - COLLECTION_WIDTH / 2,\r\n          y: trayState.y - trayState.height * 1.2,\r\n        },\r\n      ];\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      for (let i = collection.length - 1; i >= 0; i--) {\r\n        for (let j = 0; j < foodInPot.length; j++) {\r\n          if (collection[i].type === foodInPot[j].index) {\r\n            foodInPotTex = foodInPot[j];\r\n          }\r\n        }\r\n\r\n        foodInPotTex.image.draw(\r\n          batch,\r\n          foodPosition[i].x,\r\n          foodPosition[i].y,\r\n          COLLECTION_WIDTH,\r\n          COLLECTION_HEIGHT\r\n        );\r\n      }\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createCollectionRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}