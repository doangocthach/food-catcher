{"ast":null,"code":"const createLifeRenderSystem = () => {\n  let redLife, blackLife, LIFE_WIDTH, LIFE_HEIGHT, LIFE_START_X, LIFE_START_Y, LIFE_MARGIN_RIGHT;\n  let tex;\n  return {\n    init({\n      trayState\n    }, {\n      width,\n      assets,\n      height\n    }) {\n      const atlas = assets.foodInPot;\n      redLife = atlas.findRegion(\"tim_do\", -1);\n      blackLife = atlas.findRegion(\"tim_den\", -1);\n      LIFE_WIDTH = width / 12;\n      LIFE_HEIGHT = LIFE_WIDTH * redLife.height / redLife.width;\n      LIFE_START_X = width * 0.3;\n      LIFE_START_Y = height / 9;\n      LIFE_MARGIN_RIGHT = width / 9;\n    },\n\n    update(delta, {\n      life\n    }, {\n      batch,\n      width,\n      height,\n      camera\n    }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n\n      for (let i = 0; i < life.length; i++) {\n        if (life[i].red) {\n          tex = redLife;\n        } else {\n          tex = blackLife;\n        }\n\n        tex.draw(batch, LIFE_START_X + LIFE_MARGIN_RIGHT * i, LIFE_START_Y, LIFE_WIDTH, LIFE_HEIGHT);\n      }\n\n      batch.end();\n    }\n\n  };\n};\n\nexport default createLifeRenderSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/LifeRenderSystem.js"],"names":["createLifeRenderSystem","redLife","blackLife","LIFE_WIDTH","LIFE_HEIGHT","LIFE_START_X","LIFE_START_Y","LIFE_MARGIN_RIGHT","tex","init","trayState","width","assets","height","atlas","foodInPot","findRegion","update","delta","life","batch","camera","setProjection","combined","begin","setColor","i","length","red","draw","end"],"mappings":"AAAA,MAAMA,sBAAsB,GAAG,MAAM;AACnC,MAAIC,OAAJ,EACEC,SADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,YALF,EAMEC,iBANF;AAOA,MAAIC,GAAJ;AAEA,SAAO;AACLC,IAAAA,IAAI,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAgB;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBC,MAAAA;AAAjB,KAAhB,EAA2C;AAC7C,YAAMC,KAAK,GAAGF,MAAM,CAACG,SAArB;AAEAd,MAAAA,OAAO,GAAGa,KAAK,CAACE,UAAN,CAAiB,QAAjB,EAA2B,CAAC,CAA5B,CAAV;AACAd,MAAAA,SAAS,GAAGY,KAAK,CAACE,UAAN,CAAiB,SAAjB,EAA4B,CAAC,CAA7B,CAAZ;AAEAb,MAAAA,UAAU,GAAGQ,KAAK,GAAG,EAArB;AACAP,MAAAA,WAAW,GAAID,UAAU,GAAGF,OAAO,CAACY,MAAtB,GAAgCZ,OAAO,CAACU,KAAtD;AAEAN,MAAAA,YAAY,GAAGM,KAAK,GAAG,GAAvB;AACAL,MAAAA,YAAY,GAAGO,MAAM,GAAG,CAAxB;AAEAN,MAAAA,iBAAiB,GAAGI,KAAK,GAAG,CAA5B;AACD,KAdI;;AAeLM,IAAAA,MAAM,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAkB;AAAEC,MAAAA,KAAF;AAAST,MAAAA,KAAT;AAAgBE,MAAAA,MAAhB;AAAwBQ,MAAAA;AAAxB,KAAlB,EAAoD;AACxDD,MAAAA,KAAK,CAACE,aAAN,CAAoBD,MAAM,CAACE,QAA3B;AACAH,MAAAA,KAAK,CAACI,KAAN;AACAJ,MAAAA,KAAK,CAACK,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,YAAIP,IAAI,CAACO,CAAD,CAAJ,CAAQE,GAAZ,EAAiB;AACfpB,UAAAA,GAAG,GAAGP,OAAN;AACD,SAFD,MAEO;AACLO,UAAAA,GAAG,GAAGN,SAAN;AACD;;AACDM,QAAAA,GAAG,CAACqB,IAAJ,CACET,KADF,EAEEf,YAAY,GAAGE,iBAAiB,GAAGmB,CAFrC,EAGEpB,YAHF,EAIEH,UAJF,EAKEC,WALF;AAOD;;AAEDgB,MAAAA,KAAK,CAACU,GAAN;AACD;;AApCI,GAAP;AAsCD,CAhDD;;AAkDA,eAAe9B,sBAAf","sourcesContent":["const createLifeRenderSystem = () => {\r\n  let redLife,\r\n    blackLife,\r\n    LIFE_WIDTH,\r\n    LIFE_HEIGHT,\r\n    LIFE_START_X,\r\n    LIFE_START_Y,\r\n    LIFE_MARGIN_RIGHT;\r\n  let tex;\r\n\r\n  return {\r\n    init({ trayState }, { width, assets, height }) {\r\n      const atlas = assets.foodInPot;\r\n\r\n      redLife = atlas.findRegion(\"tim_do\", -1);\r\n      blackLife = atlas.findRegion(\"tim_den\", -1);\r\n\r\n      LIFE_WIDTH = width / 12;\r\n      LIFE_HEIGHT = (LIFE_WIDTH * redLife.height) / redLife.width;\r\n\r\n      LIFE_START_X = width * 0.3;\r\n      LIFE_START_Y = height / 9;\r\n\r\n      LIFE_MARGIN_RIGHT = width / 9;\r\n    },\r\n    update(delta, { life }, { batch, width, height, camera }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n\r\n      for (let i = 0; i < life.length; i++) {\r\n        if (life[i].red) {\r\n          tex = redLife;\r\n        } else {\r\n          tex = blackLife;\r\n        }\r\n        tex.draw(\r\n          batch,\r\n          LIFE_START_X + LIFE_MARGIN_RIGHT * i,\r\n          LIFE_START_Y,\r\n          LIFE_WIDTH,\r\n          LIFE_HEIGHT\r\n        );\r\n      }\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createLifeRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}