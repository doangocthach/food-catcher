{"ast":null,"code":"const createWhiteSmokeRenderSystem = () => {\n  let SMOKE_WIDTH, SMOKE_HEIGHT;\n  return {\n    init({\n      foodTex\n    }, {\n      width,\n      height\n    }) {\n      SMOKE_WIDTH = width / 2;\n      SMOKE_HEIGHT = SMOKE_WIDTH * 3 / 5;\n    },\n\n    update(delta, worldState, {\n      batch,\n      camera,\n      width,\n      height\n    }) {\n      const {\n        whiteSmokeList,\n        smokeAnimation,\n        trayState\n      } = worldState;\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n\n      for (let i = whiteSmokeList.length - 1; i >= 0; i--) {\n        if (whiteSmokeList[i].inPot) {\n          whiteSmokeList[i].stateTime += delta;\n          smokeAnimation.animation.getKeyFrame(whiteSmokeList[i].stateTime, 1).draw(batch, trayState.x - trayState.width * 0.8, trayState.y - trayState.height * 1.6, SMOKE_WIDTH, SMOKE_HEIGHT, SMOKE_WIDTH / 2, SMOKE_HEIGHT / 2, 0, 1.3, 1.3);\n        } else {\n          whiteSmokeList[i].stateTime += delta;\n          smokeAnimation.animation.getKeyFrame(whiteSmokeList[i].stateTime, 1).draw(batch, whiteSmokeList[i].x - SMOKE_WIDTH / 2.5, whiteSmokeList[i].y - SMOKE_HEIGHT / 3, SMOKE_WIDTH, SMOKE_HEIGHT, SMOKE_WIDTH / 2, SMOKE_HEIGHT / 2, 0, whiteSmokeList[i].scale, whiteSmokeList[i].scale);\n        }\n\n        if (whiteSmokeList[i].stateTime > smokeAnimation.duration * smokeAnimation.frameLength) {\n          whiteSmokeList.splice(i, 1);\n        }\n      }\n\n      batch.end();\n    }\n\n  };\n};\n\nexport default createWhiteSmokeRenderSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/WhiteSmokeRenderSystem.js"],"names":["createWhiteSmokeRenderSystem","SMOKE_WIDTH","SMOKE_HEIGHT","init","foodTex","width","height","update","delta","worldState","batch","camera","whiteSmokeList","smokeAnimation","trayState","setProjection","combined","begin","setColor","i","length","inPot","stateTime","animation","getKeyFrame","draw","x","y","scale","duration","frameLength","splice","end"],"mappings":"AAAA,MAAMA,4BAA4B,GAAG,MAAM;AACzC,MAAIC,WAAJ,EAAiBC,YAAjB;AACA,SAAO;AACLC,IAAAA,IAAI,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAc;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAd,EAAiC;AACnCL,MAAAA,WAAW,GAAGI,KAAK,GAAG,CAAtB;AACAH,MAAAA,YAAY,GAAID,WAAW,GAAG,CAAf,GAAoB,CAAnC;AACD,KAJI;;AAMLM,IAAAA,MAAM,CAACC,KAAD,EAAQC,UAAR,EAAoB;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBN,MAAAA,KAAjB;AAAwBC,MAAAA;AAAxB,KAApB,EAAsD;AAC1D,YAAM;AAAEM,QAAAA,cAAF;AAAkBC,QAAAA,cAAlB;AAAkCC,QAAAA;AAAlC,UAAgDL,UAAtD;AACAC,MAAAA,KAAK,CAACK,aAAN,CAAoBJ,MAAM,CAACK,QAA3B;AACAN,MAAAA,KAAK,CAACO,KAAN;AACAP,MAAAA,KAAK,CAACQ,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;;AACA,WAAK,IAAIC,CAAC,GAAGP,cAAc,CAACQ,MAAf,GAAwB,CAArC,EAAwCD,CAAC,IAAI,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;AACnD,YAAIP,cAAc,CAACO,CAAD,CAAd,CAAkBE,KAAtB,EAA6B;AAC3BT,UAAAA,cAAc,CAACO,CAAD,CAAd,CAAkBG,SAAlB,IAA+Bd,KAA/B;AACAK,UAAAA,cAAc,CAACU,SAAf,CACGC,WADH,CACeZ,cAAc,CAACO,CAAD,CAAd,CAAkBG,SADjC,EAC4C,CAD5C,EAEGG,IAFH,CAGIf,KAHJ,EAIII,SAAS,CAACY,CAAV,GAAcZ,SAAS,CAACT,KAAV,GAAkB,GAJpC,EAKIS,SAAS,CAACa,CAAV,GAAcb,SAAS,CAACR,MAAV,GAAmB,GALrC,EAMIL,WANJ,EAOIC,YAPJ,EAQID,WAAW,GAAG,CARlB,EASIC,YAAY,GAAG,CATnB,EAUI,CAVJ,EAWI,GAXJ,EAYI,GAZJ;AAcD,SAhBD,MAgBO;AACLU,UAAAA,cAAc,CAACO,CAAD,CAAd,CAAkBG,SAAlB,IAA+Bd,KAA/B;AACAK,UAAAA,cAAc,CAACU,SAAf,CACGC,WADH,CACeZ,cAAc,CAACO,CAAD,CAAd,CAAkBG,SADjC,EAC4C,CAD5C,EAEGG,IAFH,CAGIf,KAHJ,EAIIE,cAAc,CAACO,CAAD,CAAd,CAAkBO,CAAlB,GAAsBzB,WAAW,GAAG,GAJxC,EAKIW,cAAc,CAACO,CAAD,CAAd,CAAkBQ,CAAlB,GAAsBzB,YAAY,GAAG,CALzC,EAMID,WANJ,EAOIC,YAPJ,EAQID,WAAW,GAAG,CARlB,EASIC,YAAY,GAAG,CATnB,EAUI,CAVJ,EAWIU,cAAc,CAACO,CAAD,CAAd,CAAkBS,KAXtB,EAYIhB,cAAc,CAACO,CAAD,CAAd,CAAkBS,KAZtB;AAcD;;AACD,YACEhB,cAAc,CAACO,CAAD,CAAd,CAAkBG,SAAlB,GACAT,cAAc,CAACgB,QAAf,GAA0BhB,cAAc,CAACiB,WAF3C,EAGE;AACAlB,UAAAA,cAAc,CAACmB,MAAf,CAAsBZ,CAAtB,EAAyB,CAAzB;AACD;AACF;;AACDT,MAAAA,KAAK,CAACsB,GAAN;AACD;;AArDI,GAAP;AAuDD,CAzDD;;AA2DA,eAAehC,4BAAf","sourcesContent":["const createWhiteSmokeRenderSystem = () => {\r\n  let SMOKE_WIDTH, SMOKE_HEIGHT;\r\n  return {\r\n    init({ foodTex }, { width, height }) {\r\n      SMOKE_WIDTH = width / 2;\r\n      SMOKE_HEIGHT = (SMOKE_WIDTH * 3) / 5;\r\n    },\r\n\r\n    update(delta, worldState, { batch, camera, width, height }) {\r\n      const { whiteSmokeList, smokeAnimation, trayState } = worldState;\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      for (let i = whiteSmokeList.length - 1; i >= 0; i--) {\r\n        if (whiteSmokeList[i].inPot) {\r\n          whiteSmokeList[i].stateTime += delta;\r\n          smokeAnimation.animation\r\n            .getKeyFrame(whiteSmokeList[i].stateTime, 1)\r\n            .draw(\r\n              batch,\r\n              trayState.x - trayState.width * 0.8,\r\n              trayState.y - trayState.height * 1.6,\r\n              SMOKE_WIDTH,\r\n              SMOKE_HEIGHT,\r\n              SMOKE_WIDTH / 2,\r\n              SMOKE_HEIGHT / 2,\r\n              0,\r\n              1.3,\r\n              1.3\r\n            );\r\n        } else {\r\n          whiteSmokeList[i].stateTime += delta;\r\n          smokeAnimation.animation\r\n            .getKeyFrame(whiteSmokeList[i].stateTime, 1)\r\n            .draw(\r\n              batch,\r\n              whiteSmokeList[i].x - SMOKE_WIDTH / 2.5,\r\n              whiteSmokeList[i].y - SMOKE_HEIGHT / 3,\r\n              SMOKE_WIDTH,\r\n              SMOKE_HEIGHT,\r\n              SMOKE_WIDTH / 2,\r\n              SMOKE_HEIGHT / 2,\r\n              0,\r\n              whiteSmokeList[i].scale,\r\n              whiteSmokeList[i].scale\r\n            );\r\n        }\r\n        if (\r\n          whiteSmokeList[i].stateTime >\r\n          smokeAnimation.duration * smokeAnimation.frameLength\r\n        ) {\r\n          whiteSmokeList.splice(i, 1);\r\n        }\r\n      }\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createWhiteSmokeRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}