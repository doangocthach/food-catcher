{"ast":null,"code":"import _classCallCheck from \"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { EventEmitter } from 'fbemitter';\n\nvar InputHandler = /*#__PURE__*/function () {\n  function InputHandler(canvas) {\n    var _this = this;\n\n    _classCallCheck(this, InputHandler);\n\n    this.canvas = canvas;\n    this.lastX = 0;\n    this.lastY = 0;\n    this.touched = false;\n    var emitter = this.emitter = new EventEmitter();\n\n    this.mouseDownHandler = function (evt) {\n      _this.touched = true;\n\n      _this.handleMove(evt);\n\n      emitter.emit('touchStart', _this.getX(), _this.getY());\n    };\n\n    this.mouseUpHandler = function (evt) {\n      _this.touched = false;\n      emitter.emit('touchEnd', _this.getX(), _this.getY());\n    };\n\n    this.mouseMoveHandler = function (evt) {\n      _this.handleMove(evt);\n\n      emitter.emit('touchMove', _this.getX(), _this.getY());\n    };\n\n    this.touchStartHandler = function (evt) {\n      evt.preventDefault(); // TODO: handle multi touch\n\n      var touch = evt.touches[0];\n\n      _this.canvas.dispatchEvent(new MouseEvent('mousedown', {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n      }));\n    };\n\n    this.touchEndHandler = function (evt) {\n      evt.preventDefault();\n\n      _this.canvas.dispatchEvent(new MouseEvent('mouseup'));\n    };\n\n    this.touchMoveHandler = function (evt) {\n      evt.preventDefault();\n      var touch = evt.touches[0];\n\n      _this.canvas.dispatchEvent(new MouseEvent('mousemove', {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n      }));\n    };\n\n    this.canvas.addEventListener('mousedown', this.mouseDownHandler, false);\n    this.canvas.addEventListener('mouseup', this.mouseUpHandler, false);\n    this.canvas.addEventListener('mousemove', this.mouseMoveHandler, false);\n    this.canvas.addEventListener('touchstart', this.touchStartHandler, false);\n    this.canvas.addEventListener('touchend', this.touchEndHandler, false);\n    this.canvas.addEventListener('touchmove', this.touchMoveHandler, false);\n  }\n\n  _createClass(InputHandler, [{\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.canvas.removeEventListener('mousedown', this.mouseDownHandler);\n      this.canvas.removeEventListener('mouseup', this.mouseUpHandler);\n      this.canvas.removeEventListener('mousemove', this.mouseMoveHandler);\n      this.canvas.removeEventListener('touchstart', this.touchStartHandler);\n      this.canvas.removeEventListener('touchend', this.touchEndHandler);\n      this.canvas.removeEventListener('touchmove', this.touchMoveHandler);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(event, listener) {\n      this.emitter.addListener(event, listener);\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(evt) {\n      var rect = this.canvas.getBoundingClientRect();\n      var x = evt.clientX - rect.left;\n      var y = evt.clientY - rect.top;\n      this.lastX = x;\n      this.lastY = y;\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      return this.lastX;\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      return this.lastY;\n    }\n  }, {\n    key: \"isTouched\",\n    value: function isTouched() {\n      return this.touched;\n    }\n  }]);\n\n  return InputHandler;\n}();\n\nexport { InputHandler as default };","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/gdxjs/lib/InputHandler.js"],"names":["EventEmitter","InputHandler","canvas","lastX","lastY","touched","emitter","mouseDownHandler","evt","handleMove","emit","getX","getY","mouseUpHandler","mouseMoveHandler","touchStartHandler","preventDefault","touch","touches","dispatchEvent","MouseEvent","clientX","clientY","touchEndHandler","touchMoveHandler","addEventListener","removeEventListener","event","listener","addListener","rect","getBoundingClientRect","x","left","y","top"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'fbemitter';\nexport default class InputHandler {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.lastX = 0;\n    this.lastY = 0;\n    this.touched = false;\n    const emitter = this.emitter = new EventEmitter();\n\n    this.mouseDownHandler = evt => {\n      this.touched = true;\n      this.handleMove(evt);\n      emitter.emit('touchStart', this.getX(), this.getY());\n    };\n\n    this.mouseUpHandler = evt => {\n      this.touched = false;\n      emitter.emit('touchEnd', this.getX(), this.getY());\n    };\n\n    this.mouseMoveHandler = evt => {\n      this.handleMove(evt);\n      emitter.emit('touchMove', this.getX(), this.getY());\n    };\n\n    this.touchStartHandler = evt => {\n      evt.preventDefault(); // TODO: handle multi touch\n\n      let touch = evt.touches[0];\n      this.canvas.dispatchEvent(new MouseEvent('mousedown', {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n      }));\n    };\n\n    this.touchEndHandler = evt => {\n      evt.preventDefault();\n      this.canvas.dispatchEvent(new MouseEvent('mouseup'));\n    };\n\n    this.touchMoveHandler = evt => {\n      evt.preventDefault();\n      let touch = evt.touches[0];\n      this.canvas.dispatchEvent(new MouseEvent('mousemove', {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n      }));\n    };\n\n    this.canvas.addEventListener('mousedown', this.mouseDownHandler, false);\n    this.canvas.addEventListener('mouseup', this.mouseUpHandler, false);\n    this.canvas.addEventListener('mousemove', this.mouseMoveHandler, false);\n    this.canvas.addEventListener('touchstart', this.touchStartHandler, false);\n    this.canvas.addEventListener('touchend', this.touchEndHandler, false);\n    this.canvas.addEventListener('touchmove', this.touchMoveHandler, false);\n  }\n\n  cleanup() {\n    this.canvas.removeEventListener('mousedown', this.mouseDownHandler);\n    this.canvas.removeEventListener('mouseup', this.mouseUpHandler);\n    this.canvas.removeEventListener('mousemove', this.mouseMoveHandler);\n    this.canvas.removeEventListener('touchstart', this.touchStartHandler);\n    this.canvas.removeEventListener('touchend', this.touchEndHandler);\n    this.canvas.removeEventListener('touchmove', this.touchMoveHandler);\n  }\n\n  addEventListener(event, listener) {\n    this.emitter.addListener(event, listener);\n  }\n\n  handleMove(evt) {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = evt.clientX - rect.left;\n    const y = evt.clientY - rect.top;\n    this.lastX = x;\n    this.lastY = y;\n  }\n\n  getX() {\n    return this.lastX;\n  }\n\n  getY() {\n    return this.lastY;\n  }\n\n  isTouched() {\n    return this.touched;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}