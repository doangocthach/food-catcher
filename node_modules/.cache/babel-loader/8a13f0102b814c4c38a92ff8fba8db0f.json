{"ast":null,"code":"import _createForOfIteratorHelper from\"E:\\\\fcatcher-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";var createFoodRenderSystem=function createFoodRenderSystem(){var FOOD_WIDTH,FOOD_HEIGHT;return{init:function init(_ref,_ref2){var foodTex=_ref.foodTex;var width=_ref2.width,height=_ref2.height;var tmpFood;var _iterator=_createForOfIteratorHelper(foodTex),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var tex=_step.value;if(tex.index===0){tmpFood=tex.image;break;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}FOOD_WIDTH=width/6;FOOD_HEIGHT=FOOD_WIDTH*tmpFood.height/tmpFood.width;},update:function update(delta,_ref3,_ref4){var foods=_ref3.foods,foodTex=_ref3.foodTex;var width=_ref4.width,height=_ref4.height,batch=_ref4.batch,camera=_ref4.camera;batch.setProjection(camera.combined);batch.begin();for(var i=foods.length-1;i>=0;i--){var image=void 0;for(var j=0;j<foodTex.length;j++){if(foodTex[j].index===foods[i].type){image=foodTex[j].image;}}foods[i].oriOpacity=Math.min(foods[i].oriOpacity+=delta*foods[i].opacitySpeed,1);foods[i].oriScale=Math.min(foods[i].oriScale+=delta*foods[i].scaleSpeed,1);batch.setColor(1,1,1,foods[i].oriOpacity);image.draw(batch,foods[i].x-FOOD_WIDTH/2,foods[i].y,FOOD_WIDTH,FOOD_HEIGHT,FOOD_WIDTH/2,FOOD_HEIGHT/2,0,foods[i].oriScale,foods[i].oriScale);}batch.end();}};};export default createFoodRenderSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/FoodRenderSystem.js"],"names":["createFoodRenderSystem","FOOD_WIDTH","FOOD_HEIGHT","init","foodTex","width","height","tmpFood","tex","index","image","update","delta","foods","batch","camera","setProjection","combined","begin","i","length","j","type","oriOpacity","Math","min","opacitySpeed","oriScale","scaleSpeed","setColor","draw","x","y","end"],"mappings":"uKAAA,GAAMA,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CACnC,GAAIC,CAAAA,UAAJ,CAAgBC,WAAhB,CAEA,MAAO,CACLC,IADK,0BACgC,IAA9BC,CAAAA,OAA8B,MAA9BA,OAA8B,IAAjBC,CAAAA,KAAiB,OAAjBA,KAAiB,CAAVC,MAAU,OAAVA,MAAU,CACnC,GAAIC,CAAAA,OAAJ,CADmC,yCAEnBH,OAFmB,YAEnC,+CAAyB,IAAhBI,CAAAA,GAAgB,aACvB,GAAIA,GAAG,CAACC,KAAJ,GAAc,CAAlB,CAAqB,CACnBF,OAAO,CAAGC,GAAG,CAACE,KAAd,CACA,MACD,CACF,CAPkC,qDAQnCT,UAAU,CAAGI,KAAK,CAAG,CAArB,CACAH,WAAW,CAAID,UAAU,CAAGM,OAAO,CAACD,MAAtB,CAAgCC,OAAO,CAACF,KAAtD,CACD,CAXI,CAaLM,MAbK,iBAaEC,KAbF,aAa+D,IAApDC,CAAAA,KAAoD,OAApDA,KAAoD,CAA7CT,OAA6C,OAA7CA,OAA6C,IAAhCC,CAAAA,KAAgC,OAAhCA,KAAgC,CAAzBC,MAAyB,OAAzBA,MAAyB,CAAjBQ,KAAiB,OAAjBA,KAAiB,CAAVC,MAAU,OAAVA,MAAU,CAClED,KAAK,CAACE,aAAN,CAAoBD,MAAM,CAACE,QAA3B,EACAH,KAAK,CAACI,KAAN,GACA,IAAK,GAAIC,CAAAA,CAAC,CAAGN,KAAK,CAACO,MAAN,CAAe,CAA5B,CAA+BD,CAAC,EAAI,CAApC,CAAuCA,CAAC,EAAxC,CAA4C,CAC1C,GAAIT,CAAAA,KAAK,OAAT,CACA,IAAK,GAAIW,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGjB,OAAO,CAACgB,MAA5B,CAAoCC,CAAC,EAArC,CAAyC,CACvC,GAAIjB,OAAO,CAACiB,CAAD,CAAP,CAAWZ,KAAX,GAAqBI,KAAK,CAACM,CAAD,CAAL,CAASG,IAAlC,CAAwC,CACtCZ,KAAK,CAAGN,OAAO,CAACiB,CAAD,CAAP,CAAWX,KAAnB,CACD,CACF,CAEDG,KAAK,CAACM,CAAD,CAAL,CAASI,UAAT,CAAsBC,IAAI,CAACC,GAAL,CACnBZ,KAAK,CAACM,CAAD,CAAL,CAASI,UAAT,EAAuBX,KAAK,CAAGC,KAAK,CAACM,CAAD,CAAL,CAASO,YADrB,CAEpB,CAFoB,CAAtB,CAIAb,KAAK,CAACM,CAAD,CAAL,CAASQ,QAAT,CAAoBH,IAAI,CAACC,GAAL,CACjBZ,KAAK,CAACM,CAAD,CAAL,CAASQ,QAAT,EAAqBf,KAAK,CAAGC,KAAK,CAACM,CAAD,CAAL,CAASS,UADrB,CAElB,CAFkB,CAApB,CAIAd,KAAK,CAACe,QAAN,CAAe,CAAf,CAAkB,CAAlB,CAAqB,CAArB,CAAwBhB,KAAK,CAACM,CAAD,CAAL,CAASI,UAAjC,EACAb,KAAK,CAACoB,IAAN,CACEhB,KADF,CAEED,KAAK,CAACM,CAAD,CAAL,CAASY,CAAT,CAAa9B,UAAU,CAAG,CAF5B,CAGEY,KAAK,CAACM,CAAD,CAAL,CAASa,CAHX,CAIE/B,UAJF,CAKEC,WALF,CAMED,UAAU,CAAG,CANf,CAOEC,WAAW,CAAG,CAPhB,CAQE,CARF,CASEW,KAAK,CAACM,CAAD,CAAL,CAASQ,QATX,CAUEd,KAAK,CAACM,CAAD,CAAL,CAASQ,QAVX,EAYD,CACDb,KAAK,CAACmB,GAAN,GACD,CA/CI,CAAP,CAiDD,CApDD,CAsDA,cAAejC,CAAAA,sBAAf","sourcesContent":["const createFoodRenderSystem = () => {\r\n  let FOOD_WIDTH, FOOD_HEIGHT;\r\n\r\n  return {\r\n    init({ foodTex }, { width, height }) {\r\n      let tmpFood;\r\n      for (let tex of foodTex) {\r\n        if (tex.index === 0) {\r\n          tmpFood = tex.image;\r\n          break;\r\n        }\r\n      }\r\n      FOOD_WIDTH = width / 6;\r\n      FOOD_HEIGHT = (FOOD_WIDTH * tmpFood.height) / tmpFood.width;\r\n    },\r\n\r\n    update(delta, { foods, foodTex }, { width, height, batch, camera }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      for (let i = foods.length - 1; i >= 0; i--) {\r\n        let image;\r\n        for (let j = 0; j < foodTex.length; j++) {\r\n          if (foodTex[j].index === foods[i].type) {\r\n            image = foodTex[j].image;\r\n          }\r\n        }\r\n\r\n        foods[i].oriOpacity = Math.min(\r\n          (foods[i].oriOpacity += delta * foods[i].opacitySpeed),\r\n          1\r\n        );\r\n        foods[i].oriScale = Math.min(\r\n          (foods[i].oriScale += delta * foods[i].scaleSpeed),\r\n          1\r\n        );\r\n        batch.setColor(1, 1, 1, foods[i].oriOpacity);\r\n        image.draw(\r\n          batch,\r\n          foods[i].x - FOOD_WIDTH / 2,\r\n          foods[i].y,\r\n          FOOD_WIDTH,\r\n          FOOD_HEIGHT,\r\n          FOOD_WIDTH / 2,\r\n          FOOD_HEIGHT / 2,\r\n          0,\r\n          foods[i].oriScale,\r\n          foods[i].oriScale\r\n        );\r\n      }\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createFoodRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}