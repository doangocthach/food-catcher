{"ast":null,"code":"var getGL = require('webgl-context');\n\nmodule.exports = function (opts) {\n  if (!opts || !opts.vertex || !opts.fragment) throw \"must specify 'vertex' and 'fragment' source\";\n  var vertSource = opts.vertex.trim();\n  var fragSource = opts.fragment.trim();\n  var gl = opts.gl;\n\n  if (!gl) {\n    gl = getGL();\n    if (!gl) throw new Error(\"WebGL not supported -- try another browser\");\n  }\n\n  return compile(gl, vertSource, fragSource, opts.attributeLocations, opts.verbose);\n}; //Compiles the shaders, throwing an error if the program was invalid.\n\n\nfunction compile(gl, vertSource, fragSource, attribs, verbose) {\n  var log = \"\";\n  var vert = loadShader(gl, gl.VERTEX_SHADER, vertSource, verbose);\n  var frag = loadShader(gl, gl.FRAGMENT_SHADER, fragSource, verbose);\n  var vertShader = vert.shader;\n  var fragShader = frag.shader;\n  log += vert.log + \"\\n\" + frag.log;\n  var program = gl.createProgram();\n  gl.attachShader(program, vertShader);\n  gl.attachShader(program, fragShader); //TODO: Chrome seems a bit buggy with attribute bindings...\n\n  if (attribs) {\n    for (var key in attribs) {\n      if (attribs.hasOwnProperty(key)) {\n        gl.bindAttribLocation(program, Math.floor(attribs[key]), key);\n      }\n    }\n  }\n\n  gl.linkProgram(program);\n  log += gl.getProgramInfoLog(program) || \"\";\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    if (verbose) {\n      console.error(\"Shader error:\\n\" + log);\n      console.error(\"Problematic shaders:\\nVERTEX_SHADER:\\n\" + addLineNumbers(vertSource) + \"\\n\\nFRAGMENT_SHADER:\\n\" + addLineNumbers(fragSource));\n    } //delete before throwing error    \n\n\n    gl.detachShader(program, vertShader);\n    gl.detachShader(program, fragShader);\n    gl.deleteShader(vertShader);\n    gl.deleteShader(fragShader);\n    throw new Error(\"Error linking the shader program:\\n\" + log);\n  }\n\n  return {\n    program: program,\n    vertex: vertShader,\n    fragment: fragShader,\n    log: log.trim()\n  };\n}\n\nfunction loadShader(gl, type, source, verbose) {\n  var shader = gl.createShader(type);\n  if (!shader) //should not occur...\n    return -1;\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader); //we do this so the user knows which shader has the error\n\n  var typeStr = type === gl.VERTEX_SHADER ? \"vertex\" : \"fragment\";\n  var logResult = gl.getShaderInfoLog(shader) || \"\"; //Chrome will just print \"Uncaught error object\" if the Error.message \n  //is longer than 250 chars... WTF!\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    if (verbose) {\n      console.error(\"Shader error:\\n\" + logResult);\n      console.error(\"Problematic \" + typeStr + \" shader:\\n\" + addLineNumbers(source));\n    }\n\n    throw new Error(\"Could not compile \" + typeStr + \" shader:\\n\" + logResult);\n  }\n\n  if (!shader) throw new Error(\"gl.createShader returned 0 for \" + typeStr + \" shader.\\n\" + logResult);\n  return {\n    shader: shader,\n    log: logResult\n  };\n}\n\nfunction addLineNumbers(string) {\n  var lines = string.split('\\n');\n\n  for (var i = 0; i < lines.length; i++) {\n    lines[i] = i + 1 + ': ' + lines[i];\n  }\n\n  return lines.join('\\n');\n}","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/webgl-compile-shader/index.js"],"names":["getGL","require","module","exports","opts","vertex","fragment","vertSource","trim","fragSource","gl","Error","compile","attributeLocations","verbose","attribs","log","vert","loadShader","VERTEX_SHADER","frag","FRAGMENT_SHADER","vertShader","shader","fragShader","program","createProgram","attachShader","key","hasOwnProperty","bindAttribLocation","Math","floor","linkProgram","getProgramInfoLog","getProgramParameter","LINK_STATUS","console","error","addLineNumbers","detachShader","deleteShader","type","source","createShader","shaderSource","compileShader","typeStr","logResult","getShaderInfoLog","getShaderParameter","COMPILE_STATUS","string","lines","split","i","length","join"],"mappings":"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","sourcesContent":["var getGL = require('webgl-context');\n\nmodule.exports = function(opts) {\n    if (!opts || (!opts.vertex || !opts.fragment))\n        throw \"must specify 'vertex' and 'fragment' source\";\n    var vertSource = (opts.vertex).trim();\n    var fragSource = (opts.fragment).trim();\n\n\n    var gl = opts.gl;\n    if (!gl) {\n        gl = getGL();\n        if (!gl)\n            throw new Error(\"WebGL not supported -- try another browser\");\n    }\n    return compile(gl, vertSource, fragSource, opts.attributeLocations, opts.verbose);\n};\n\n//Compiles the shaders, throwing an error if the program was invalid.\nfunction compile(gl, vertSource, fragSource, attribs, verbose) {\n    var log = \"\";\n\n    var vert = loadShader(gl, gl.VERTEX_SHADER, vertSource, verbose);\n    var frag = loadShader(gl, gl.FRAGMENT_SHADER, fragSource, verbose);\n\n    var vertShader = vert.shader;\n    var fragShader = frag.shader;\n\n    log += vert.log + \"\\n\" + frag.log;\n\n    var program = gl.createProgram();\n\n    gl.attachShader(program, vertShader);\n    gl.attachShader(program, fragShader);\n\n    //TODO: Chrome seems a bit buggy with attribute bindings...\n    if (attribs) {\n        for (var key in attribs) {\n            if (attribs.hasOwnProperty(key)) {\n                gl.bindAttribLocation(program, Math.floor(attribs[key]), key);\n            }\n        }\n    }\n\n    gl.linkProgram(program); \n\n    log += gl.getProgramInfoLog(program) || \"\";\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        if (verbose) {\n            console.error(\"Shader error:\\n\"+log);\n            console.error(\"Problematic shaders:\\nVERTEX_SHADER:\\n\"+addLineNumbers(vertSource)\n                    +\"\\n\\nFRAGMENT_SHADER:\\n\"+addLineNumbers(fragSource));\n        }\n        //delete before throwing error    \n        gl.detachShader(program, vertShader);\n        gl.detachShader(program, fragShader);\n        gl.deleteShader(vertShader);\n        gl.deleteShader(fragShader);\n        \n        throw new Error(\"Error linking the shader program:\\n\" + log);\n\n    }\n    return {\n        program: program,\n        vertex: vertShader,\n        fragment: fragShader,\n        log: log.trim()\n    };\n}\n\nfunction loadShader(gl, type, source, verbose) {\n    var shader = gl.createShader(type);\n    if (!shader) //should not occur...\n        return -1;\n\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    //we do this so the user knows which shader has the error\n    var typeStr = (type === gl.VERTEX_SHADER) ? \"vertex\" : \"fragment\";\n\n    var logResult = gl.getShaderInfoLog(shader) || \"\";\n    \n\n    //Chrome will just print \"Uncaught error object\" if the Error.message \n    //is longer than 250 chars... WTF!\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS) ) {\n        if (verbose) {\n            console.error(\"Shader error:\\n\"+logResult);\n            console.error( \"Problematic \"+typeStr+\" shader:\\n\" + addLineNumbers(source) );\n        }\n        throw new Error(\"Could not compile \"+typeStr+\" shader:\\n\"+logResult);\n    }\n    if (!shader)\n        throw new Error(\"gl.createShader returned 0 for \"+typeStr+\" shader.\\n\"+logResult);\n    return {\n        shader: shader,\n        log: logResult\n    };\n}\n\nfunction addLineNumbers( string ) {\n    var lines = string.split( '\\n' );\n    for ( var i = 0; i < lines.length; i ++ ) {\n        lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n    }\n    return lines.join( '\\n' );\n}"]},"metadata":{},"sourceType":"script"}