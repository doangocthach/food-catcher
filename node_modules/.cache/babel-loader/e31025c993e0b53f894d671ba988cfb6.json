{"ast":null,"code":"var int8 = new Int8Array(4);\nvar int32 = new Int32Array(int8.buffer, 0, 1);\nvar float32 = new Float32Array(int8.buffer, 0, 1);\n/**\n * A singleton for number utilities. \n * @class NumberUtil\n */\n\nvar NumberUtil = function NumberUtil() {};\n/**\n * Returns a float representation of the given int bits. ArrayBuffer\n * is used for the conversion.\n *\n * @method  intBitsToFloat\n * @static\n * @param  {Number} i the int to cast\n * @return {Number}   the float\n */\n\n\nNumberUtil.intBitsToFloat = function (i) {\n  int32[0] = i;\n  return float32[0];\n};\n/**\n * Returns the int bits from the given float. ArrayBuffer is used\n * for the conversion.\n *\n * @method  floatToIntBits\n * @static\n * @param  {Number} f the float to cast\n * @return {Number}   the int bits\n */\n\n\nNumberUtil.floatToIntBits = function (f) {\n  float32[0] = f;\n  return int32[0];\n};\n/**\n * Encodes ABGR int as a float, with slight precision loss.\n *\n * @method  intToFloatColor\n * @static\n * @param {Number} value an ABGR packed integer\n */\n\n\nNumberUtil.intToFloatColor = function (value) {\n  return NumberUtil.intBitsToFloat(value & 0xfeffffff);\n};\n/**\n * Returns a float encoded ABGR value from the given RGBA\n * bytes (0 - 255). Useful for saving bandwidth in vertex data.\n *\n * @method  colorToFloat\n * @static\n * @param {Number} r the Red byte (0 - 255)\n * @param {Number} g the Green byte (0 - 255)\n * @param {Number} b the Blue byte (0 - 255)\n * @param {Number} a the Alpha byte (0 - 255)\n * @return {Float32}  a Float32 of the RGBA color\n */\n\n\nNumberUtil.colorToFloat = function (r, g, b, a) {\n  var bits = a << 24 | b << 16 | g << 8 | r;\n  return NumberUtil.intToFloatColor(bits);\n};\n/**\n * Returns true if the number is a power-of-two.\n *\n * @method  isPowerOfTwo\n * @param  {Number}  n the number to test\n * @return {Boolean}   true if power-of-two\n */\n\n\nNumberUtil.isPowerOfTwo = function (n) {\n  return (n & n - 1) === 0;\n};\n/**\n * Returns the next highest power-of-two from the specified number. \n * \n * @param  {Number} n the number to test\n * @return {Number}   the next highest power of two\n */\n\n\nNumberUtil.nextPowerOfTwo = function (n) {\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  return n + 1;\n};\n\nmodule.exports = NumberUtil;","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/number-util/index.js"],"names":["int8","Int8Array","int32","Int32Array","buffer","float32","Float32Array","NumberUtil","intBitsToFloat","i","floatToIntBits","f","intToFloatColor","value","colorToFloat","r","g","b","a","bits","isPowerOfTwo","n","nextPowerOfTwo","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAG,IAAIC,SAAJ,CAAc,CAAd,CAAX;AACA,IAAIC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,IAAI,CAACI,MAApB,EAA4B,CAA5B,EAA+B,CAA/B,CAAZ;AACA,IAAIC,OAAO,GAAG,IAAIC,YAAJ,CAAiBN,IAAI,CAACI,MAAtB,EAA8B,CAA9B,EAAiC,CAAjC,CAAd;AAEA;;;;;AAIA,IAAIG,UAAU,GAAG,SAAbA,UAAa,GAAW,CAE3B,CAFD;AAKA;;;;;;;;;;;AASAA,UAAU,CAACC,cAAX,GAA4B,UAASC,CAAT,EAAY;AACvCP,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAWO,CAAX;AACA,SAAOJ,OAAO,CAAC,CAAD,CAAd;AACA,CAHD;AAKA;;;;;;;;;;;AASAE,UAAU,CAACG,cAAX,GAA4B,UAASC,CAAT,EAAY;AACvCN,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAaM,CAAb;AACA,SAAOT,KAAK,CAAC,CAAD,CAAZ;AACA,CAHD;AAKA;;;;;;;;;AAOAK,UAAU,CAACK,eAAX,GAA6B,UAASC,KAAT,EAAgB;AAC5C,SAAON,UAAU,CAACC,cAAX,CAA2BK,KAAK,GAAG,UAAnC,CAAP;AACA,CAFD;AAIA;;;;;;;;;;;;;;AAYAN,UAAU,CAACO,YAAX,GAA0B,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AAC9C,MAAIC,IAAI,GAAID,CAAC,IAAI,EAAL,GAAUD,CAAC,IAAI,EAAf,GAAoBD,CAAC,IAAI,CAAzB,GAA6BD,CAAzC;AACA,SAAOR,UAAU,CAACK,eAAX,CAA2BO,IAA3B,CAAP;AACA,CAHD;AAKA;;;;;;;;;AAOAZ,UAAU,CAACa,YAAX,GAA0B,UAASC,CAAT,EAAY;AACrC,SAAO,CAACA,CAAC,GAAIA,CAAC,GAAG,CAAV,MAAkB,CAAzB;AACA,CAFD;AAIA;;;;;;;;AAMAd,UAAU,CAACe,cAAX,GAA4B,UAASD,CAAT,EAAY;AACvCA,EAAAA,CAAC;AACDA,EAAAA,CAAC,IAAIA,CAAC,IAAI,CAAV;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAAI,CAAV;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAAI,CAAV;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAAI,CAAV;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAAI,EAAV;AACA,SAAOA,CAAC,GAAC,CAAT;AACA,CARD;;AAUAE,MAAM,CAACC,OAAP,GAAiBjB,UAAjB","sourcesContent":["var int8 = new Int8Array(4);\nvar int32 = new Int32Array(int8.buffer, 0, 1);\nvar float32 = new Float32Array(int8.buffer, 0, 1);\n\n/**\n * A singleton for number utilities. \n * @class NumberUtil\n */\nvar NumberUtil = function() {\n\n};\n\n\n/**\n * Returns a float representation of the given int bits. ArrayBuffer\n * is used for the conversion.\n *\n * @method  intBitsToFloat\n * @static\n * @param  {Number} i the int to cast\n * @return {Number}   the float\n */\nNumberUtil.intBitsToFloat = function(i) {\n\tint32[0] = i;\n\treturn float32[0];\n};\n\n/**\n * Returns the int bits from the given float. ArrayBuffer is used\n * for the conversion.\n *\n * @method  floatToIntBits\n * @static\n * @param  {Number} f the float to cast\n * @return {Number}   the int bits\n */\nNumberUtil.floatToIntBits = function(f) {\n\tfloat32[0] = f;\n\treturn int32[0];\n};\n\n/**\n * Encodes ABGR int as a float, with slight precision loss.\n *\n * @method  intToFloatColor\n * @static\n * @param {Number} value an ABGR packed integer\n */\nNumberUtil.intToFloatColor = function(value) {\n\treturn NumberUtil.intBitsToFloat( value & 0xfeffffff );\n};\n\n/**\n * Returns a float encoded ABGR value from the given RGBA\n * bytes (0 - 255). Useful for saving bandwidth in vertex data.\n *\n * @method  colorToFloat\n * @static\n * @param {Number} r the Red byte (0 - 255)\n * @param {Number} g the Green byte (0 - 255)\n * @param {Number} b the Blue byte (0 - 255)\n * @param {Number} a the Alpha byte (0 - 255)\n * @return {Float32}  a Float32 of the RGBA color\n */\nNumberUtil.colorToFloat = function(r, g, b, a) {\n\tvar bits = (a << 24 | b << 16 | g << 8 | r);\n\treturn NumberUtil.intToFloatColor(bits);\n};\n\n/**\n * Returns true if the number is a power-of-two.\n *\n * @method  isPowerOfTwo\n * @param  {Number}  n the number to test\n * @return {Boolean}   true if power-of-two\n */\nNumberUtil.isPowerOfTwo = function(n) {\n\treturn (n & (n - 1)) === 0;\n};\n\n/**\n * Returns the next highest power-of-two from the specified number. \n * \n * @param  {Number} n the number to test\n * @return {Number}   the next highest power of two\n */\nNumberUtil.nextPowerOfTwo = function(n) {\n\tn--;\n\tn |= n >> 1;\n\tn |= n >> 2;\n\tn |= n >> 4;\n\tn |= n >> 8;\n\tn |= n >> 16;\n\treturn n+1;\n};\n\nmodule.exports = NumberUtil;"]},"metadata":{},"sourceType":"script"}