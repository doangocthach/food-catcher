{"ast":null,"code":"import Vector2 from \"./Vector2\";\nvar tmpV1 = new Vector2(0, 0);\nvar tmpV2 = new Vector2(0, 0);\nexport var drawLine = function drawLine(batch, tex, x1, y1, x2, y2) {\n  var thickness = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n  var r = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var g = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n  var b = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n  var a = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n  tmpV1.set(x1, y1);\n  tmpV2.set(x2, y2);\n  var length = tmpV1.distance(tmpV2);\n  var angle = tmpV2.subVector(tmpV1).angle();\n  batch.setColor(r, g, b, a);\n  batch.draw(tex, x1, y1, thickness * 0.5, length, 0, 0, angle - Math.PI / 2);\n  batch.setColor(1, 1, 1, 1);\n};\nexport var drawPolygon = function drawPolygon(batch, tex, verts) {\n  var thickness = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var g = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var b = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n  var a = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n\n  if (verts.length < 4) {\n    return;\n  }\n\n  var prevX = verts[0];\n  var prevY = verts[1];\n\n  for (var i = 2; i < verts.length; i++) {\n    var x = verts[i];\n    var y = verts[++i];\n    drawLine(batch, tex, prevX, prevY, x, y, thickness, r, g, b, a);\n    prevX = x;\n    prevY = y;\n  }\n\n  drawLine(batch, tex, prevX, prevY, verts[0], verts[1], thickness, r, g, b, a);\n};\nexport var fillRect = function fillRect(batch, tex, x, y, w, h) {\n  var rotation = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  var originX = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : w / 2;\n  var originY = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : h / 2;\n  batch.draw(tex, x, y, w, h, originX, originY, rotation);\n};\nvar circleVerts = [];\nvar tmpV3 = new Vector2(0, 0);\nexport var drawCircle = function drawCircle(batch, tex, x, y, radius) {\n  var thickness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var segments = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 8;\n  var r = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var g = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n  var b = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n  var a = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n  circleVerts.length = 0;\n  var slice = 2 * Math.PI / segments;\n\n  for (var i = 0; i < segments; i++) {\n    tmpV3.set(0, radius);\n    tmpV3.rotateRad(slice * i).add(x, y);\n    circleVerts.push(tmpV3.x, tmpV3.y);\n  }\n\n  drawPolygon(batch, tex, circleVerts, thickness, r, g, b, a);\n};","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/gdxjs/lib/shapeUtils.js"],"names":["Vector2","tmpV1","tmpV2","drawLine","batch","tex","x1","y1","x2","y2","thickness","r","g","b","a","set","length","distance","angle","subVector","setColor","draw","Math","PI","drawPolygon","verts","prevX","prevY","i","x","y","fillRect","w","h","rotation","originX","originY","circleVerts","tmpV3","drawCircle","radius","segments","slice","rotateRad","add","push"],"mappings":"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","sourcesContent":["import Vector2 from \"./Vector2\";\nconst tmpV1 = new Vector2(0, 0);\nconst tmpV2 = new Vector2(0, 0);\nexport const drawLine = (batch, tex, x1, y1, x2, y2, thickness = 1, r = 1, g = 1, b = 1, a = 1) => {\n  tmpV1.set(x1, y1);\n  tmpV2.set(x2, y2);\n  const length = tmpV1.distance(tmpV2);\n  const angle = tmpV2.subVector(tmpV1).angle();\n  batch.setColor(r, g, b, a);\n  batch.draw(tex, x1, y1, thickness * 0.5, length, 0, 0, angle - Math.PI / 2);\n  batch.setColor(1, 1, 1, 1);\n};\nexport const drawPolygon = (batch, tex, verts, thickness = 1, r = 1, g = 1, b = 1, a = 1) => {\n  if (verts.length < 4) {\n    return;\n  }\n\n  let prevX = verts[0];\n  let prevY = verts[1];\n\n  for (let i = 2; i < verts.length; i++) {\n    const x = verts[i];\n    const y = verts[++i];\n    drawLine(batch, tex, prevX, prevY, x, y, thickness, r, g, b, a);\n    prevX = x;\n    prevY = y;\n  }\n\n  drawLine(batch, tex, prevX, prevY, verts[0], verts[1], thickness, r, g, b, a);\n};\nexport const fillRect = (batch, tex, x, y, w, h, rotation = 0, originX = w / 2, originY = h / 2) => {\n  batch.draw(tex, x, y, w, h, originX, originY, rotation);\n};\nconst circleVerts = [];\nconst tmpV3 = new Vector2(0, 0);\nexport const drawCircle = (batch, tex, x, y, radius, thickness = 1, segments = 8, r = 1, g = 1, b = 1, a = 1) => {\n  circleVerts.length = 0;\n  const slice = 2 * Math.PI / segments;\n\n  for (let i = 0; i < segments; i++) {\n    tmpV3.set(0, radius);\n    tmpV3.rotateRad(slice * i).add(x, y);\n    circleVerts.push(tmpV3.x, tmpV3.y);\n  }\n\n  drawPolygon(batch, tex, circleVerts, thickness, r, g, b, a);\n};"]},"metadata":{},"sourceType":"module"}