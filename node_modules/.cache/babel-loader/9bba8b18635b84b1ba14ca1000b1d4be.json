{"ast":null,"code":"const createFoodPositionSystem = () => {\n  return {\n    init(worldState, extra) {},\n\n    update(delta, worldState, {\n      width,\n      height\n    }) {\n      const {\n        foods,\n        redSmokeList,\n        recipes\n      } = worldState;\n\n      for (let i = 0; i < foods.length; i++) {\n        if (foods[i].upSpeedY > 0) {\n          foods[i].upSpeedY = foods[i].oriSpeedY + foods[i].upAccelerationY * foods[i].stateTime;\n          foods[i].upSpeedX = foods[i].oriSpeedX + foods[i].upAccelerationX * foods[i].stateTime;\n          foods[i].stateTime = Math.min(foods[i].stateTime += delta, foods[i].upRealTime);\n          foods[i].y -= foods[i].upSpeedY * delta;\n          foods[i].x += foods[i].upSpeedX * delta;\n        } else {\n          foods[i].y += foods[i].downSpeedY * delta;\n          foods[i].downSpeedY += foods[i].downAcceleration;\n        }\n\n        if (foods[i].y > height * 4.1 / 5) {\n          for (let j = 0; j < recipes.length; j++) {\n            if (foods[i].type === recipes[j].type) {\n              worldState.comboCounter = 0;\n              worldState.comboCheckIndex.length = 0;\n            }\n          }\n\n          redSmokeList.push({\n            x: foods[i].x,\n            y: foods[i].y,\n            stateTime: 0,\n            scale: foods[i].oriScale\n          });\n          foods.splice(i, 1);\n        }\n      }\n    }\n\n  };\n};\n\nexport default createFoodPositionSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/FoodPositionSystem.js"],"names":["createFoodPositionSystem","init","worldState","extra","update","delta","width","height","foods","redSmokeList","recipes","i","length","upSpeedY","oriSpeedY","upAccelerationY","stateTime","upSpeedX","oriSpeedX","upAccelerationX","Math","min","upRealTime","y","x","downSpeedY","downAcceleration","j","type","comboCounter","comboCheckIndex","push","scale","oriScale","splice"],"mappings":"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","sourcesContent":["const createFoodPositionSystem = () => {\r\n  return {\r\n    init(worldState, extra) {},\r\n\r\n    update(delta, worldState, { width, height }) {\r\n      const { foods, redSmokeList, recipes } = worldState;\r\n\r\n      for (let i = 0; i < foods.length; i++) {\r\n        if (foods[i].upSpeedY > 0) {\r\n          foods[i].upSpeedY =\r\n            foods[i].oriSpeedY + foods[i].upAccelerationY * foods[i].stateTime;\r\n          foods[i].upSpeedX =\r\n            foods[i].oriSpeedX + foods[i].upAccelerationX * foods[i].stateTime;\r\n\r\n          foods[i].stateTime = Math.min(\r\n            (foods[i].stateTime += delta),\r\n            foods[i].upRealTime\r\n          );\r\n\r\n          foods[i].y -= foods[i].upSpeedY * delta;\r\n          foods[i].x += foods[i].upSpeedX * delta;\r\n        } else {\r\n          foods[i].y += foods[i].downSpeedY * delta;\r\n          foods[i].downSpeedY += foods[i].downAcceleration;\r\n        }\r\n\r\n        if (foods[i].y > (height * 4.1) / 5) {\r\n          for (let j = 0; j < recipes.length; j++) {\r\n            if (foods[i].type === recipes[j].type) {\r\n              worldState.comboCounter = 0;\r\n              worldState.comboCheckIndex.length = 0;\r\n            }\r\n          }\r\n          redSmokeList.push({\r\n            x: foods[i].x,\r\n            y: foods[i].y,\r\n            stateTime: 0,\r\n            scale: foods[i].oriScale,\r\n          });\r\n          foods.splice(i, 1);\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createFoodPositionSystem;\r\n"]},"metadata":{},"sourceType":"module"}