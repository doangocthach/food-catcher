{"ast":null,"code":"var createTrayCollideFoodSystem=function createTrayCollideFoodSystem(){return{update:function update(delta,worldState,_ref){var batch=_ref.batch,camera=_ref.camera,width=_ref.width,height=_ref.height;var recipes=worldState.recipes,trayState=worldState.trayState,foods=worldState.foods,collection=worldState.collection,stateTime=worldState.stateTime,life=worldState.life,whiteSmokeList=worldState.whiteSmokeList;for(var i=0;i<foods.length;i++){if(foods[i].x>trayState.x-trayState.width/2&&foods[i].x<trayState.x+trayState.width/2&&foods[i].y>// trayState.y - trayState.height - trayState.offsetCheckY &&\ntrayState.y-trayState.height&&foods[i].y<trayState.y+trayState.height&&stateTime>foods[i].upTime){for(var j=0;j<recipes.length;j++){if(foods[i].type===recipes[j].type&&!worldState.correctCatch){worldState.correctCatch=true;if(recipes[j].counter===0){// only push that kind of food one time to collection\n// trayState.offsetCheckY += trayState.height * 0.7; // update offsetY\ncollection.push({type:foods[i].type,stateTimeSmoke:0,stateTimeFood:0,startSmoke:true});whiteSmokeList.push({inPot:true,stateTime:0// width: trayState.width,\n// height: trayState.height,\n});}else{whiteSmokeList.push({x:foods[i].x,y:foods[i].y,stateTime:0,scale:foods[i].oriScale});}recipes[j].counter=Math.min(recipes[j].amount,recipes[j].counter+=1);if(recipes[j].counter===recipes[j].amount){recipes[j].finished=true;}//   console.log(\"hit\");\nfoods.splice(i,1);break;// if there is any one match => break the loop\n}else if(foods[i].type!==recipes[j].type){}//   console.log(\"miss\");\n//wrong catch\nif(j===recipes.length-1){worldState.comboCounter=0;worldState.comboCheckIndex.length=0;life[worldState.lifeIndex].red=false;worldState.lifeIndex=Math.max(0,worldState.lifeIndex-=1);worldState.stunScreen.check=true;foods.splice(i,1);}}}}}};};export default createTrayCollideFoodSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/TrayCollideFoodSystem.js"],"names":["createTrayCollideFoodSystem","update","delta","worldState","batch","camera","width","height","recipes","trayState","foods","collection","stateTime","life","whiteSmokeList","i","length","x","y","upTime","j","type","correctCatch","counter","push","stateTimeSmoke","stateTimeFood","startSmoke","inPot","scale","oriScale","Math","min","amount","finished","splice","comboCounter","comboCheckIndex","lifeIndex","red","max","stunScreen","check"],"mappings":"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","sourcesContent":["const createTrayCollideFoodSystem = () => {\r\n  return {\r\n    update(delta, worldState, { batch, camera, width, height }) {\r\n      const {\r\n        recipes,\r\n        trayState,\r\n        foods,\r\n        collection,\r\n        stateTime,\r\n        life,\r\n        whiteSmokeList,\r\n      } = worldState;\r\n\r\n      for (let i = 0; i < foods.length; i++) {\r\n        if (\r\n          foods[i].x > trayState.x - trayState.width / 2 &&\r\n          foods[i].x < trayState.x + trayState.width / 2 &&\r\n          foods[i].y >\r\n            // trayState.y - trayState.height - trayState.offsetCheckY &&\r\n            trayState.y - trayState.height &&\r\n          foods[i].y < trayState.y + trayState.height &&\r\n          stateTime > foods[i].upTime\r\n        ) {\r\n          for (let j = 0; j < recipes.length; j++) {\r\n            if (foods[i].type === recipes[j].type && !worldState.correctCatch) {\r\n              worldState.correctCatch = true;\r\n              if (recipes[j].counter === 0) {\r\n                // only push that kind of food one time to collection\r\n                // trayState.offsetCheckY += trayState.height * 0.7; // update offsetY\r\n                collection.push({\r\n                  type: foods[i].type,\r\n                  stateTimeSmoke: 0,\r\n                  stateTimeFood: 0,\r\n                  startSmoke: true,\r\n                });\r\n\r\n                whiteSmokeList.push({\r\n                  inPot: true,\r\n\r\n                  stateTime: 0,\r\n                  // width: trayState.width,\r\n                  // height: trayState.height,\r\n                });\r\n              } else {\r\n                whiteSmokeList.push({\r\n                  x: foods[i].x,\r\n                  y: foods[i].y,\r\n                  stateTime: 0,\r\n                  scale: foods[i].oriScale,\r\n                });\r\n              }\r\n\r\n              recipes[j].counter = Math.min(\r\n                recipes[j].amount,\r\n                (recipes[j].counter += 1)\r\n              );\r\n\r\n              if (recipes[j].counter === recipes[j].amount) {\r\n                recipes[j].finished = true;\r\n              }\r\n              //   console.log(\"hit\");\r\n              foods.splice(i, 1);\r\n              break; // if there is any one match => break the loop\r\n            } else if (foods[i].type !== recipes[j].type) {\r\n              //   console.log(\"miss\");\r\n            }\r\n\r\n            //wrong catch\r\n            if (j === recipes.length - 1) {\r\n              worldState.comboCounter = 0;\r\n              worldState.comboCheckIndex.length = 0;\r\n              life[worldState.lifeIndex].red = false;\r\n              worldState.lifeIndex = Math.max(0, (worldState.lifeIndex -= 1));\r\n              worldState.stunScreen.check = true;\r\n              foods.splice(i, 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createTrayCollideFoodSystem;\r\n"]},"metadata":{},"sourceType":"module"}