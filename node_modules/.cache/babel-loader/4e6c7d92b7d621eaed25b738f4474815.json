{"ast":null,"code":"const shuffle = array => {\n  array.sort(() => Math.random() - 0.5);\n};\n\nlet randomArray, tmp, tmp2, otherFoodArray;\n\nconst getRandomFoodList = (foodTex, recipes, comboCounter, difficulty) => {\n  randomArray = [];\n  tmp = [];\n  tmp2 = [];\n  otherFoodArray = [];\n\n  for (let rep of recipes) {\n    randomArray.push(rep.type);\n    tmp.push(rep.type);\n  }\n\n  for (let i = 0; i < foodTex.length; i++) {\n    tmp2.push(foodTex[i].index);\n  }\n\n  for (let value of tmp2) {\n    if (!tmp.includes(value)) {\n      otherFoodArray.push(value);\n    }\n  } // if (comboCounter >= 5 && comboCounter < 10) {\n  //   randomArray.push(otherFoodArray[0]);\n  // }\n  // if (comboCounter >= 10 && comboCounter < 20) {\n  //   for (let i = 0; i < otherFoodArray.length - 1; i++) {\n  //     randomArray.push(otherFoodArray[i]);\n  //   }\n  // }\n  // if (comboCounter >= 20) {\n  //   for (let i = 0; i < otherFoodArray.length; i++) {\n  //     randomArray.push(otherFoodArray[i]);\n  //   }\n  // }\n\n\n  return randomArray;\n};\n\nconst getDelayBaseOnDifficulty = difficulty => {\n  if (difficulty >= 1 && difficulty <= 3) {\n    return 2.5;\n  } else if (difficulty >= 4 && difficulty <= 6) {\n    return 2;\n  } else if (difficulty >= 7 && difficulty <= 9) {\n    return 1.5;\n  } else {\n    return 1;\n  }\n};\n\nconst getPattern = (number, width, height) => {\n  let timer;\n  let upSpeedX = [];\n  let upSpeedY;\n  let upAccelerationY;\n  let time;\n  let tmpSpeedX = [];\n  let tmpAccX = [];\n\n  if (number === 0) {\n    // 3 on 1 line\n    timer = [0, 0.15, 0.2];\n    upSpeedY = [height / 2];\n    upAccelerationY = -height / 4;\n    time = -upSpeedY / upAccelerationY;\n\n    if (Math.random() > 0.5) {\n      tmpSpeedX = [width / 3];\n    } else {\n      tmpSpeedX = [-width / 3];\n    }\n  } else if (number === 3) {\n    // 4 zig zag\n    timer = [0, 0.15, 0.17, 0.25];\n    upSpeedY = [height / 2];\n    upAccelerationY = -height / 4;\n    time = -upSpeedY / upAccelerationY;\n\n    if (Math.random() > 0.5) {\n      tmpSpeedX = [width / 3, width / 10, -width / 10, -width / 3];\n    } else {\n      tmpSpeedX = [-width / 3, -width / 10, width / 10, width / 3];\n    }\n  } else if (number === 4) {\n    // 5 V\n    timer = [0, 0.16, 0.16, 0.17, 0.17];\n    upSpeedY = [height / 2.1];\n    upAccelerationY = -height / 4;\n    time = -upSpeedY / upAccelerationY;\n    tmpSpeedX = [width / 100, width / 6, -width / 6, width / 2.5, -width / 2.5];\n  } else if (number === 5) {\n    // 5 V reverse\n    timer = [0, 0, 0.12, 0.12, 0.2];\n    upSpeedY = [height / 2.1];\n    upAccelerationY = -height / 4;\n    time = -upSpeedY / upAccelerationY;\n    tmpSpeedX = [width / 2.5, -width / 2.5, width / 6, -width / 6, width / 100];\n  } else if (number === 1) {\n    // 2 random index same time\n    timer = [0, 0.15];\n    upSpeedY = [height / 2];\n    upAccelerationY = -height / 4;\n    time = -upSpeedY / upAccelerationY;\n\n    if (Math.random() > 0.5) {\n      tmpSpeedX = [Math.random() * (width / 4 - width / 8) + width / 8, -(Math.random() * (width / 4 - width / 8) + width / 8)];\n    } else {\n      tmpSpeedX = [-(Math.random() * (width / 4 - width / 8) + width / 8), Math.random() * (width / 4 - width / 8) + width / 8];\n    }\n  } else if (number === 2) {\n    // 3 random index same time\n    timer = [0, 0.2, 0.1];\n    upSpeedY = [height / 2];\n    upAccelerationY = -height / 4;\n    time = -upSpeedY / upAccelerationY;\n    tmpSpeedX = [Math.random() * (width / 4 - width / 6) + width / 6, -(Math.random() * (width / 2.8 - width / 5.5) + width / 5.5), Math.random() * (width / 20 - width / 40) + width / 40];\n  }\n\n  for (let i = 0; i < tmpSpeedX.length; i++) {\n    tmpAccX.push(-tmpSpeedX[i] / time);\n  }\n\n  for (let i = 0; i < tmpSpeedX.length; i++) {\n    upSpeedX.push({\n      speedX: tmpSpeedX[i],\n      accerX: tmpAccX[i]\n    });\n  }\n\n  return {\n    timer,\n    upSpeedX,\n    upSpeedY,\n    upAccelerationY,\n    time\n  };\n};\n\nconst getShootTypeBaseOnDifficulty = difficulty => {\n  if (difficulty >= 1 && difficulty <= 2) {\n    return {\n      minNumber: 0,\n      maxNumber: 2\n    };\n  } else if (difficulty >= 3 && difficulty <= 7) {\n    return {\n      minNumber: 0,\n      maxNumber: 3\n    };\n  } else {\n    return {\n      minNumber: 0,\n      maxNumber: 5\n    };\n  }\n};\n\nconst createFoodSpawnSystem = () => {\n  let index = 0;\n  let delayAfterCombo = 2;\n  let pattern;\n  let timer;\n  let speedXIndex = 0;\n  let speedYIndex = 0;\n  return {\n    init(worldState, extra) {},\n\n    update(delta, worldState, {\n      width,\n      height\n    }) {\n      // console.log(worldState.foods);\n      // console.log(worldState.stateTime, delayAfterCombo, timer);\n      const {\n        foodTex,\n        difficulty,\n        recipes,\n        comboCounter\n      } = worldState;\n\n      if (pattern === undefined && worldState.stateTime > delayAfterCombo) {\n        const {\n          minNumber,\n          maxNumber\n        } = getShootTypeBaseOnDifficulty(difficulty);\n        pattern = getPattern(Math.round(Math.random() * (maxNumber - minNumber) + minNumber), width, height); // pattern = getPattern(5, width, height);\n\n        timer = worldState.stateTime + pattern.timer[index];\n      } else if (worldState.stateTime > delayAfterCombo && worldState.stateTime > timer) {\n        index = Math.min(index += 1, pattern.timer.length);\n        timer = worldState.stateTime + pattern.timer[index];\n        let loop = 1;\n        let tmpIndex = index - 1;\n\n        while (true) {\n          if (pattern.timer[tmpIndex] === pattern.timer[tmpIndex + 1] && tmpIndex < pattern.timer.length) {\n            tmpIndex = Math.min(tmpIndex += 1, pattern.timer.length);\n            loop += 1;\n          } else {\n            break;\n          }\n        } // console.log(loop, index);\n\n\n        for (let i = 0; i < loop; i++) {\n          if (i > 0) {\n            index = Math.min(index += 1, pattern.timer.length);\n          }\n\n          timer = worldState.stateTime + pattern.timer[index];\n          const randomFoodArray = getRandomFoodList(foodTex, recipes, comboCounter, difficulty);\n          shuffle(randomFoodArray);\n          worldState.foods.push({\n            stateTime: 0,\n            type: randomFoodArray[0],\n            x: width / 2,\n            y: height * 2 / 3,\n            upTime: worldState.stateTime + pattern.time,\n            // check with game stateTime\n            upRealTime: pattern.time,\n            oriSpeedX: pattern.upSpeedX[speedXIndex].speedX,\n            oriSpeedY: pattern.upSpeedY[speedYIndex],\n            upSpeedX: pattern.upSpeedX[speedXIndex].speedX,\n            upSpeedY: pattern.upSpeedY[speedYIndex],\n            upAccelerationX: pattern.upSpeedX[speedXIndex].accerX,\n            upAccelerationY: pattern.upAccelerationY,\n            downSpeedY: 0,\n            downAcceleration: height / 100,\n            scaleSpeed: (1 - 0) / pattern.time,\n            opacitySpeed: (1 - 0) / pattern.time,\n            oriScale: 0,\n            oriOpacity: 0\n          });\n          speedXIndex = Math.min(speedXIndex += 1, pattern.upSpeedX.length - 1);\n          speedYIndex = Math.min(speedYIndex += 1, pattern.upSpeedY.length - 1);\n        } // last\n\n\n        if (index === pattern.timer.length) {\n          delayAfterCombo = worldState.stateTime + getDelayBaseOnDifficulty(difficulty);\n          index = 0;\n          speedXIndex = 0;\n          speedYIndex = 0;\n          pattern = undefined;\n        }\n      }\n    }\n\n  };\n};\n\nexport default createFoodSpawnSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/FoodSpawnSystem.js"],"names":["shuffle","array","sort","Math","random","randomArray","tmp","tmp2","otherFoodArray","getRandomFoodList","foodTex","recipes","comboCounter","difficulty","rep","push","type","i","length","index","value","includes","getDelayBaseOnDifficulty","getPattern","number","width","height","timer","upSpeedX","upSpeedY","upAccelerationY","time","tmpSpeedX","tmpAccX","speedX","accerX","getShootTypeBaseOnDifficulty","minNumber","maxNumber","createFoodSpawnSystem","delayAfterCombo","pattern","speedXIndex","speedYIndex","init","worldState","extra","update","delta","undefined","stateTime","round","min","loop","tmpIndex","randomFoodArray","foods","x","y","upTime","upRealTime","oriSpeedX","oriSpeedY","upAccelerationX","downSpeedY","downAcceleration","scaleSpeed","opacitySpeed","oriScale","oriOpacity"],"mappings":"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","sourcesContent":["const shuffle = (array) => {\r\n  array.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nlet randomArray, tmp, tmp2, otherFoodArray;\r\nconst getRandomFoodList = (foodTex, recipes, comboCounter, difficulty) => {\r\n  randomArray = [];\r\n  tmp = [];\r\n  tmp2 = [];\r\n  otherFoodArray = [];\r\n\r\n  for (let rep of recipes) {\r\n    randomArray.push(rep.type);\r\n    tmp.push(rep.type);\r\n  }\r\n\r\n  for (let i = 0; i < foodTex.length; i++) {\r\n    tmp2.push(foodTex[i].index);\r\n  }\r\n\r\n  for (let value of tmp2) {\r\n    if (!tmp.includes(value)) {\r\n      otherFoodArray.push(value);\r\n    }\r\n  }\r\n  // if (comboCounter >= 5 && comboCounter < 10) {\r\n  //   randomArray.push(otherFoodArray[0]);\r\n  // }\r\n\r\n  // if (comboCounter >= 10 && comboCounter < 20) {\r\n  //   for (let i = 0; i < otherFoodArray.length - 1; i++) {\r\n  //     randomArray.push(otherFoodArray[i]);\r\n  //   }\r\n  // }\r\n\r\n  // if (comboCounter >= 20) {\r\n  //   for (let i = 0; i < otherFoodArray.length; i++) {\r\n  //     randomArray.push(otherFoodArray[i]);\r\n  //   }\r\n  // }\r\n\r\n  return randomArray;\r\n};\r\n\r\nconst getDelayBaseOnDifficulty = (difficulty) => {\r\n  if (difficulty >= 1 && difficulty <= 3) {\r\n    return 2.5;\r\n  } else if (difficulty >= 4 && difficulty <= 6) {\r\n    return 2;\r\n  } else if (difficulty >= 7 && difficulty <= 9) {\r\n    return 1.5;\r\n  } else {\r\n    return 1;\r\n  }\r\n};\r\n\r\nconst getPattern = (number, width, height) => {\r\n  let timer;\r\n  let upSpeedX = [];\r\n  let upSpeedY;\r\n  let upAccelerationY;\r\n  let time;\r\n  let tmpSpeedX = [];\r\n  let tmpAccX = [];\r\n\r\n  if (number === 0) {\r\n    // 3 on 1 line\r\n    timer = [0, 0.15, 0.2];\r\n    upSpeedY = [height / 2];\r\n    upAccelerationY = -height / 4;\r\n    time = -upSpeedY / upAccelerationY;\r\n    if (Math.random() > 0.5) {\r\n      tmpSpeedX = [width / 3];\r\n    } else {\r\n      tmpSpeedX = [-width / 3];\r\n    }\r\n  } else if (number === 3) {\r\n    // 4 zig zag\r\n    timer = [0, 0.15, 0.17, 0.25];\r\n    upSpeedY = [height / 2];\r\n    upAccelerationY = -height / 4;\r\n    time = -upSpeedY / upAccelerationY;\r\n    if (Math.random() > 0.5) {\r\n      tmpSpeedX = [width / 3, width / 10, -width / 10, -width / 3];\r\n    } else {\r\n      tmpSpeedX = [-width / 3, -width / 10, width / 10, width / 3];\r\n    }\r\n  } else if (number === 4) {\r\n    // 5 V\r\n    timer = [0, 0.16, 0.16, 0.17, 0.17];\r\n    upSpeedY = [height / 2.1];\r\n    upAccelerationY = -height / 4;\r\n    time = -upSpeedY / upAccelerationY;\r\n    tmpSpeedX = [width / 100, width / 6, -width / 6, width / 2.5, -width / 2.5];\r\n  } else if (number === 5) {\r\n    // 5 V reverse\r\n    timer = [0, 0, 0.12, 0.12, 0.2];\r\n    upSpeedY = [height / 2.1];\r\n    upAccelerationY = -height / 4;\r\n    time = -upSpeedY / upAccelerationY;\r\n    tmpSpeedX = [width / 2.5, -width / 2.5, width / 6, -width / 6, width / 100];\r\n  } else if (number === 1) {\r\n    // 2 random index same time\r\n    timer = [0, 0.15];\r\n    upSpeedY = [height / 2];\r\n    upAccelerationY = -height / 4;\r\n    time = -upSpeedY / upAccelerationY;\r\n    if (Math.random() > 0.5) {\r\n      tmpSpeedX = [\r\n        Math.random() * (width / 4 - width / 8) + width / 8,\r\n        -(Math.random() * (width / 4 - width / 8) + width / 8),\r\n      ];\r\n    } else {\r\n      tmpSpeedX = [\r\n        -(Math.random() * (width / 4 - width / 8) + width / 8),\r\n        Math.random() * (width / 4 - width / 8) + width / 8,\r\n      ];\r\n    }\r\n  } else if (number === 2) {\r\n    // 3 random index same time\r\n    timer = [0, 0.2, 0.1];\r\n    upSpeedY = [height / 2];\r\n    upAccelerationY = -height / 4;\r\n    time = -upSpeedY / upAccelerationY;\r\n    tmpSpeedX = [\r\n      Math.random() * (width / 4 - width / 6) + width / 6,\r\n      -(Math.random() * (width / 2.8 - width / 5.5) + width / 5.5),\r\n      Math.random() * (width / 20 - width / 40) + width / 40,\r\n    ];\r\n  }\r\n\r\n  for (let i = 0; i < tmpSpeedX.length; i++) {\r\n    tmpAccX.push(-tmpSpeedX[i] / time);\r\n  }\r\n\r\n  for (let i = 0; i < tmpSpeedX.length; i++) {\r\n    upSpeedX.push({ speedX: tmpSpeedX[i], accerX: tmpAccX[i] });\r\n  }\r\n  return {\r\n    timer,\r\n    upSpeedX,\r\n    upSpeedY,\r\n    upAccelerationY,\r\n    time,\r\n  };\r\n};\r\n\r\nconst getShootTypeBaseOnDifficulty = (difficulty) => {\r\n  if (difficulty >= 1 && difficulty <= 2) {\r\n    return { minNumber: 0, maxNumber: 2 };\r\n  } else if (difficulty >= 3 && difficulty <= 7) {\r\n    return { minNumber: 0, maxNumber: 3 };\r\n  } else {\r\n    return { minNumber: 0, maxNumber: 5 };\r\n  }\r\n};\r\n\r\nconst createFoodSpawnSystem = () => {\r\n  let index = 0;\r\n  let delayAfterCombo = 2;\r\n  let pattern;\r\n  let timer;\r\n  let speedXIndex = 0;\r\n  let speedYIndex = 0;\r\n  return {\r\n    init(worldState, extra) {},\r\n\r\n    update(delta, worldState, { width, height }) {\r\n      // console.log(worldState.foods);\r\n      // console.log(worldState.stateTime, delayAfterCombo, timer);\r\n      const { foodTex, difficulty, recipes, comboCounter } = worldState;\r\n      if (pattern === undefined && worldState.stateTime > delayAfterCombo) {\r\n        const { minNumber, maxNumber } = getShootTypeBaseOnDifficulty(\r\n          difficulty\r\n        );\r\n        pattern = getPattern(\r\n          Math.round(Math.random() * (maxNumber - minNumber) + minNumber),\r\n          width,\r\n          height\r\n        );\r\n        // pattern = getPattern(5, width, height);\r\n\r\n        timer = worldState.stateTime + pattern.timer[index];\r\n      } else if (\r\n        worldState.stateTime > delayAfterCombo &&\r\n        worldState.stateTime > timer\r\n      ) {\r\n        index = Math.min((index += 1), pattern.timer.length);\r\n        timer = worldState.stateTime + pattern.timer[index];\r\n\r\n        let loop = 1;\r\n        let tmpIndex = index - 1;\r\n        while (true) {\r\n          if (\r\n            pattern.timer[tmpIndex] === pattern.timer[tmpIndex + 1] &&\r\n            tmpIndex < pattern.timer.length\r\n          ) {\r\n            tmpIndex = Math.min((tmpIndex += 1), pattern.timer.length);\r\n            loop += 1;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n        // console.log(loop, index);\r\n        for (let i = 0; i < loop; i++) {\r\n          if (i > 0) {\r\n            index = Math.min((index += 1), pattern.timer.length);\r\n          }\r\n          timer = worldState.stateTime + pattern.timer[index];\r\n          const randomFoodArray = getRandomFoodList(\r\n            foodTex,\r\n            recipes,\r\n            comboCounter,\r\n            difficulty\r\n          );\r\n          shuffle(randomFoodArray);\r\n\r\n          worldState.foods.push({\r\n            stateTime: 0,\r\n            type: randomFoodArray[0],\r\n            x: width / 2,\r\n            y: (height * 2) / 3,\r\n            upTime: worldState.stateTime + pattern.time, // check with game stateTime\r\n            upRealTime: pattern.time,\r\n            oriSpeedX: pattern.upSpeedX[speedXIndex].speedX,\r\n            oriSpeedY: pattern.upSpeedY[speedYIndex],\r\n            upSpeedX: pattern.upSpeedX[speedXIndex].speedX,\r\n            upSpeedY: pattern.upSpeedY[speedYIndex],\r\n            upAccelerationX: pattern.upSpeedX[speedXIndex].accerX,\r\n            upAccelerationY: pattern.upAccelerationY,\r\n            downSpeedY: 0,\r\n            downAcceleration: height / 100,\r\n            scaleSpeed: (1 - 0) / pattern.time,\r\n            opacitySpeed: (1 - 0) / pattern.time,\r\n            oriScale: 0,\r\n            oriOpacity: 0,\r\n          });\r\n\r\n          speedXIndex = Math.min(\r\n            (speedXIndex += 1),\r\n            pattern.upSpeedX.length - 1\r\n          );\r\n          speedYIndex = Math.min(\r\n            (speedYIndex += 1),\r\n            pattern.upSpeedY.length - 1\r\n          );\r\n        }\r\n\r\n        // last\r\n        if (index === pattern.timer.length) {\r\n          delayAfterCombo =\r\n            worldState.stateTime + getDelayBaseOnDifficulty(difficulty);\r\n          index = 0;\r\n          speedXIndex = 0;\r\n          speedYIndex = 0;\r\n          pattern = undefined;\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createFoodSpawnSystem;\r\n"]},"metadata":{},"sourceType":"module"}