{"ast":null,"code":"import InputHandler from './InputHandler';\nimport Vector2 from './Vector2';\n\nvar createViewportAwareInputListener = function createViewportAwareInputListener(handler, viewport) {\n  return function (x, y, id) {\n    var _viewport$getViewport = viewport.getViewportInfo(),\n        vX = _viewport$getViewport.x,\n        vY = _viewport$getViewport.y,\n        pixelRatio = _viewport$getViewport.pixelRatio;\n\n    x = (x - vX) * pixelRatio;\n    y = (y - vY) * pixelRatio;\n    handler(x, y, id);\n  };\n};\n\nexport default (function (canvas, viewport) {\n  var inputHandler = new InputHandler(canvas);\n  var screenCoord = new Vector2();\n  var worldCoord = new Vector2();\n  return {\n    cleanup: function cleanup() {\n      inputHandler.cleanup();\n    },\n    addEventListener: function addEventListener(event, listener) {\n      inputHandler.addEventListener(event, createViewportAwareInputListener(listener, viewport));\n    },\n    getX: function getX() {\n      var _viewport$getViewport2 = viewport.getViewportInfo(),\n          vX = _viewport$getViewport2.x,\n          pixelRatio = _viewport$getViewport2.pixelRatio;\n\n      return inputHandler.getX() * pixelRatio - vX;\n    },\n    getY: function getY() {\n      var _viewport$getViewport3 = viewport.getViewportInfo(),\n          vY = _viewport$getViewport3.y,\n          pixelRatio = _viewport$getViewport3.pixelRatio;\n\n      return inputHandler.getY() * pixelRatio - vY;\n    },\n    getTouchedWorldCoord: function getTouchedWorldCoord() {\n      screenCoord.set(this.getX(), this.getY());\n      viewport.getCamera().unprojectVector2(worldCoord, screenCoord);\n      return worldCoord;\n    }\n  };\n});","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/gdxjs/lib/createViewportAwareInputHandler.js"],"names":["InputHandler","Vector2","createViewportAwareInputListener","handler","viewport","x","y","id","getViewportInfo","vX","vY","pixelRatio","canvas","inputHandler","screenCoord","worldCoord","cleanup","addEventListener","event","listener","getX","getY","getTouchedWorldCoord","set","getCamera","unprojectVector2"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,IAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACC,OAAD,EAAUC,QAAV,EAAuB;AAC9D,SAAO,UAACC,CAAD,EAAIC,CAAJ,EAAOC,EAAP,EAAc;AAAA,gCAKfH,QAAQ,CAACI,eAAT,EALe;AAAA,QAEdC,EAFc,yBAEjBJ,CAFiB;AAAA,QAGdK,EAHc,yBAGjBJ,CAHiB;AAAA,QAIjBK,UAJiB,yBAIjBA,UAJiB;;AAMnBN,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAGI,EAAL,IAAWE,UAAf;AACAL,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAGI,EAAL,IAAWC,UAAf;AACAR,IAAAA,OAAO,CAACE,CAAD,EAAIC,CAAJ,EAAOC,EAAP,CAAP;AACD,GATD;AAUD,CAXD;;AAaA,gBAAgB,UAACK,MAAD,EAASR,QAAT,EAAsB;AACpC,MAAMS,YAAY,GAAG,IAAIb,YAAJ,CAAiBY,MAAjB,CAArB;AACA,MAAME,WAAW,GAAG,IAAIb,OAAJ,EAApB;AACA,MAAMc,UAAU,GAAG,IAAId,OAAJ,EAAnB;AACA,SAAO;AACLe,IAAAA,OADK,qBACK;AACRH,MAAAA,YAAY,CAACG,OAAb;AACD,KAHI;AAKLC,IAAAA,gBALK,4BAKYC,KALZ,EAKmBC,QALnB,EAK6B;AAChCN,MAAAA,YAAY,CAACI,gBAAb,CAA8BC,KAA9B,EAAqChB,gCAAgC,CAACiB,QAAD,EAAWf,QAAX,CAArE;AACD,KAPI;AASLgB,IAAAA,IATK,kBASE;AAAA,mCAIDhB,QAAQ,CAACI,eAAT,EAJC;AAAA,UAEAC,EAFA,0BAEHJ,CAFG;AAAA,UAGHM,UAHG,0BAGHA,UAHG;;AAKL,aAAOE,YAAY,CAACO,IAAb,KAAsBT,UAAtB,GAAmCF,EAA1C;AACD,KAfI;AAiBLY,IAAAA,IAjBK,kBAiBE;AAAA,mCAIDjB,QAAQ,CAACI,eAAT,EAJC;AAAA,UAEAE,EAFA,0BAEHJ,CAFG;AAAA,UAGHK,UAHG,0BAGHA,UAHG;;AAKL,aAAOE,YAAY,CAACQ,IAAb,KAAsBV,UAAtB,GAAmCD,EAA1C;AACD,KAvBI;AAyBLY,IAAAA,oBAzBK,kCAyBkB;AACrBR,MAAAA,WAAW,CAACS,GAAZ,CAAgB,KAAKH,IAAL,EAAhB,EAA6B,KAAKC,IAAL,EAA7B;AACAjB,MAAAA,QAAQ,CAACoB,SAAT,GAAqBC,gBAArB,CAAsCV,UAAtC,EAAkDD,WAAlD;AACA,aAAOC,UAAP;AACD;AA7BI,GAAP;AAgCD,CApCD","sourcesContent":["import InputHandler from './InputHandler';\nimport Vector2 from './Vector2';\n\nconst createViewportAwareInputListener = (handler, viewport) => {\n  return (x, y, id) => {\n    const {\n      x: vX,\n      y: vY,\n      pixelRatio\n    } = viewport.getViewportInfo();\n    x = (x - vX) * pixelRatio;\n    y = (y - vY) * pixelRatio;\n    handler(x, y, id);\n  };\n};\n\nexport default ((canvas, viewport) => {\n  const inputHandler = new InputHandler(canvas);\n  const screenCoord = new Vector2();\n  const worldCoord = new Vector2();\n  return {\n    cleanup() {\n      inputHandler.cleanup();\n    },\n\n    addEventListener(event, listener) {\n      inputHandler.addEventListener(event, createViewportAwareInputListener(listener, viewport));\n    },\n\n    getX() {\n      const {\n        x: vX,\n        pixelRatio\n      } = viewport.getViewportInfo();\n      return inputHandler.getX() * pixelRatio - vX;\n    },\n\n    getY() {\n      const {\n        y: vY,\n        pixelRatio\n      } = viewport.getViewportInfo();\n      return inputHandler.getY() * pixelRatio - vY;\n    },\n\n    getTouchedWorldCoord() {\n      screenCoord.set(this.getX(), this.getY());\n      viewport.getCamera().unprojectVector2(worldCoord, screenCoord);\n      return worldCoord;\n    }\n\n  };\n});"]},"metadata":{},"sourceType":"module"}