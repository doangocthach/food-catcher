{"ast":null,"code":"import \"./index.css\";\nimport { createGameLoop, createBatch, loadTexture, loadAtlas, createViewport } from \"gdxjs\";\nimport createWhiteText from \"gl-white-texture\";\nimport loadFontFile from \"./utils/loadFontFile\";\nimport createStartScreenSystem from \"./StartScreen\";\n\nconst init = async canvas => {\n  // const canvas = document.getElementById(\"main\");\n  const width = 47;\n  const height = 100;\n  const viewport = createViewport(canvas, width, height);\n  const camera = viewport.getCamera();\n  const gl = viewport.getContext();\n  const batch = createBatch(gl);\n  const whiteTex = createWhiteText(gl);\n  const Game = {\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    viewport,\n\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n\n      Game.currentScreen = screen;\n    }\n\n  };\n\n  const doAndCount = promise => promise.then(result => {\n    return result;\n  });\n\n  const [gameAssets, animAssets, backGround, newAssets, foodInPot, startScreen, backGround2] = await Promise.all([doAndCount(loadAtlas(gl, \"./assets/food_catch.atlas\")), doAndCount(loadAtlas(gl, \"./assets/hotpot.atlas\")), doAndCount(loadTexture(gl, \"./assets/bg.jpg\")), doAndCount(loadAtlas(gl, \"./assets/hotpot-additional.atlas\")), doAndCount(loadAtlas(gl, \"./assets/foodinhotpot.atlas\")), doAndCount(loadAtlas(gl, \"./assets/start_menu.atlas\")), doAndCount(loadTexture(gl, \"./assets/bbg-start.jpg\"))]);\n  let assets = {\n    gameAssets,\n    animAssets,\n    backGround,\n    newAssets,\n    foodInPot,\n    startScreen,\n    backGround2\n  };\n  Game.assets = assets;\n  const numberFont = await loadFontFile(gl, \"./fonts/iciel-64.fnt\");\n  Game.font = numberFont;\n  Game.setCurrentScreen(await createStartScreenSystem(Game)); // Game.setCurrentScreen(await createGameScreenSystem(Game));\n\n  gl.clearColor(255 / 255, 114 / 255, 22 / 255, 1);\n\n  const update = delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n\n  createGameLoop(update);\n};\n\nexport default init;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/index.js"],"names":["createGameLoop","createBatch","loadTexture","loadAtlas","createViewport","createWhiteText","loadFontFile","createStartScreenSystem","init","canvas","width","height","viewport","camera","getCamera","gl","getContext","batch","whiteTex","Game","setCurrentScreen","screen","currentScreen","destroy","doAndCount","promise","then","result","gameAssets","animAssets","backGround","newAssets","foodInPot","startScreen","backGround2","Promise","all","assets","numberFont","font","clearColor","update","delta","clear","COLOR_BUFFER_BIT"],"mappings":"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","sourcesContent":["import \"./index.css\";\r\nimport {\r\n  createGameLoop,\r\n  createBatch,\r\n  loadTexture,\r\n  loadAtlas,\r\n  createViewport,\r\n} from \"gdxjs\";\r\nimport createWhiteText from \"gl-white-texture\";\r\nimport loadFontFile from \"./utils/loadFontFile\";\r\n\r\nimport createStartScreenSystem from \"./StartScreen\";\r\n\r\nconst init = async (canvas) => {\r\n  // const canvas = document.getElementById(\"main\");\r\n  const width = 47;\r\n  const height = 100;\r\n  const viewport = createViewport(canvas, width, height);\r\n  const camera = viewport.getCamera();\r\n  const gl = viewport.getContext();\r\n  const batch = createBatch(gl);\r\n  const whiteTex = createWhiteText(gl);\r\n\r\n  const Game = {\r\n    width,\r\n    height,\r\n    canvas,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    viewport,\r\n    setCurrentScreen(screen) {\r\n      if (Game.currentScreen) {\r\n        Game.currentScreen.destroy();\r\n      }\r\n      Game.currentScreen = screen;\r\n    },\r\n  };\r\n\r\n  const doAndCount = (promise) =>\r\n    promise.then((result) => {\r\n      return result;\r\n    });\r\n\r\n  const [\r\n    gameAssets,\r\n    animAssets,\r\n    backGround,\r\n    newAssets,\r\n    foodInPot,\r\n    startScreen,\r\n    backGround2,\r\n  ] = await Promise.all([\r\n    doAndCount(loadAtlas(gl, \"./assets/food_catch.atlas\")),\r\n    doAndCount(loadAtlas(gl, \"./assets/hotpot.atlas\")),\r\n    doAndCount(loadTexture(gl, \"./assets/bg.jpg\")),\r\n    doAndCount(loadAtlas(gl, \"./assets/hotpot-additional.atlas\")),\r\n    doAndCount(loadAtlas(gl, \"./assets/foodinhotpot.atlas\")),\r\n    doAndCount(loadAtlas(gl, \"./assets/start_menu.atlas\")),\r\n    doAndCount(loadTexture(gl, \"./assets/bbg-start.jpg\")),\r\n  ]);\r\n\r\n  let assets = {\r\n    gameAssets,\r\n    animAssets,\r\n    backGround,\r\n    newAssets,\r\n    foodInPot,\r\n    startScreen,\r\n    backGround2,\r\n  };\r\n  Game.assets = assets;\r\n\r\n  const numberFont = await loadFontFile(gl, \"./fonts/iciel-64.fnt\");\r\n\r\n  Game.font = numberFont;\r\n  Game.setCurrentScreen(await createStartScreenSystem(Game));\r\n  // Game.setCurrentScreen(await createGameScreenSystem(Game));\r\n\r\n  gl.clearColor(255 / 255, 114 / 255, 22 / 255, 1);\r\n  const update = (delta) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    if (Game.currentScreen) {\r\n      Game.currentScreen.update(delta);\r\n    }\r\n  };\r\n  createGameLoop(update);\r\n};\r\n\r\nexport default init;\r\n"]},"metadata":{},"sourceType":"module"}