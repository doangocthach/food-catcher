{"ast":null,"code":"import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i = void 0,\n        l = void 0;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/kami-batch2/node_modules/gl-matrix/lib/gl-matrix/vec2.js"],"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","fromValues","x","y","copy","set","add","b","subtract","multiply","divide","ceil","Math","floor","min","max","round","scale","scaleAndAdd","distance","sqrt","squaredDistance","length","squaredLength","negate","inverse","normalize","len","dot","cross","z","lerp","t","ax","ay","random","r","RANDOM","PI","cos","sin","transformMat2","m","transformMat2d","transformMat3","transformMat4","rotate","c","p0","p1","sinC","cosC","angle","x1","y1","x2","y2","len1","len2","cosine","acos","str","exactEquals","equals","a0","a1","b0","b1","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"mappings":"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","sourcesContent":["import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function fromValues(x, y) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nexport function set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  var len = x * x + y * y;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n      ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\r\nexport function rotate(out, a, b, c) {\r\n  //Translate point to the origin\r\n  var p0 = a[0] - b[0],\r\n      p1 = a[1] - b[1],\r\n      sinC = Math.sin(c),\r\n      cosC = Math.cos(c);\r\n\r\n  //perform rotation and translate to correct position\r\n  out[0] = p0 * cosC - p1 * sinC + b[0];\r\n  out[1] = p0 * sinC + p1 * cosC + b[1];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var x1 = a[0],\r\n      y1 = a[1],\r\n      x2 = b[0],\r\n      y2 = b[1];\r\n\r\n  var len1 = x1 * x1 + y1 * y1;\r\n  if (len1 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len1 = 1 / Math.sqrt(len1);\r\n  }\r\n\r\n  var len2 = x2 * x2 + y2 * y2;\r\n  if (len2 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len2 = 1 / Math.sqrt(len2);\r\n  }\r\n\r\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1];\r\n  var b0 = b[0],\r\n      b1 = b[1];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();"]},"metadata":{},"sourceType":"module"}