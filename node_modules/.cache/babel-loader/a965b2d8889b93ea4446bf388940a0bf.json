{"ast":null,"code":"var _jsxFileName = \"E:\\\\fcatcher-client\\\\src\\\\components\\\\game\\\\GameScreen.js\";\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport LeaderBoard from \"../LeaderBoard\";\nimport axios from \"../../utils/axios\";\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\nimport createWorld from \"./createWorld\";\nimport { getFoodTexture, getFoodAnimation, getFoodInPotTexture } from \"./utils/getFood\";\nimport createBackGroundRenderSystem from \"./systems/BgRenderSystem\";\nimport createTrayRenderSystem from \"./systems/TrayRenderSystem\";\nimport createTrayPositionSystem from \"./systems/TrayPositionSystem\";\nimport createInputHandlerGameScreenSystem from \"./systems/InputHandlerGameScreenSystem\";\nimport createFoodSpawnSystem from \"./systems/FoodSpawnSystem\";\nimport createFoodPositionSystem from \"./systems/FoodPositionSystem\";\nimport createFoodRenderSystem from \"./systems/FoodRenderSystem\";\nimport createRecipeRenderSystem from \"./systems/RecipeRenderSystem\";\nimport createTrayCollideFoodSystem from \"./systems/TrayCollideFoodSystem\";\nimport createRedSmokeRenderSystem from \"./systems/RedSmokeRenderSystem\";\nimport createCollectionRenderSystem from \"./systems/CollectionRenderSystem\";\nimport createLifeRenderSystem from \"./systems/LifeRenderSystem\";\nimport createStunScreenRenderSystem from \"./systems/StunScreenRenderSystem\";\nimport createScoreRenderSystem from \"./systems/ScoreRenderSystem\";\nimport createScoreCalcSystem from \"./systems/ScoreCalcSystem\";\nimport createWhiteSmokeRenderSystem from \"./systems/WhiteSmokeRenderSystem\";\nimport createBannerComboRenderSystem from \"./systems/BannerComboRenderSystem\";\nimport createStartScreenSystem from \"./StartScreen\";\nimport createLeaderBoardSystem from \"./LeaderBoardScreen\";\nlet shouldShowLeaderBoard = true;\n\nconst showLeaderBoard = async (score, onRestart) => {\n  if (!shouldShowLeaderBoard) {\n    return;\n  }\n\n  shouldShowLeaderBoard = false;\n  let players = [];\n\n  try {\n    const res = await axios.post(\"/leader-board\", {\n      score\n    }, {\n      headers: {\n        \"x-access-token\": localStorage.getItem(\"@Token\")\n      }\n    });\n    players = res.data;\n  } catch (e) {}\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.setAttribute(\"id\", \"leader-board-wrapper\");\n  document.body.appendChild(wrapper);\n  ReactDOM.render( /*#__PURE__*/React.createElement(LeaderBoard, {\n    players: players,\n    score: score,\n    onClickRestart: () => {\n      onRestart();\n      shouldShowLeaderBoard = true;\n      document.body.removeChild(wrapper);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }), wrapper);\n};\n\nconst createGameScreenSystem = Game => {\n  const {\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    assets,\n    viewport,\n    font\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const TRAY_INITIAL_Y = height * 3.1 / 4;\n  const foodTex = getFoodTexture(assets.animAssets);\n  const recipes = [];\n\n  const shuffle = array => {\n    array.sort(() => Math.random() - 0.5);\n  };\n\n  const genderNewRecipe = () => {\n    shuffle(foodTex);\n    recipes.length = 0;\n\n    for (let i = 0; i < 4; i++) {\n      recipes.push({\n        type: foodTex[i].index,\n        // amount: Math.floor(Math.random() * (7 - 1) + 1),\n        amount: Math.floor(Math.random() * (6 - 4) + 4),\n        finished: false,\n        aniStateTime: 0,\n        counter: 0\n      });\n    }\n  };\n\n  genderNewRecipe();\n  const worldState = {\n    score: 0,\n    comboCounter: 0,\n    correctCatch: false,\n    genderNewRecipeAmount: true,\n    stateTime: 0,\n    gameOver: false,\n    emptyLife: false,\n    life: [{\n      red: true\n    }, {\n      red: true\n    }, {\n      red: true\n    }],\n    lifeIndex: 2,\n    // life checking index\n    stunScreen: {\n      check: false,\n      opacity: 1\n    },\n    trayState: {\n      x: width / 2,\n      y: TRAY_INITIAL_Y,\n      position: new Vector2(width / 2, TRAY_INITIAL_Y),\n      target: new Vector2(width / 2, TRAY_INITIAL_Y),\n      moveLeft: false,\n      moveRight: false,\n      speed: width * 2.5 // offsetCheckY: 0, //\n\n    },\n    difficulty: 1,\n    //\n    collection: [],\n    //\n    collectionFinished: [],\n    recipes: recipes,\n    //\n    foods: [],\n    //\n    foodTex: foodTex,\n    // foodAnimation: getFoodAnimation(assets.animAssets).foodAnimation,\n    smokeAnimation: getFoodAnimation(assets.animAssets).smokeAnimation,\n    foodInPot: getFoodInPotTexture(assets.foodInPot),\n    whiteSmokeList: [],\n    // contain position of ws when collection have that kind of food\n    redSmokeList: [],\n    // contain position of rs whenever red smoke event triggered\n    comboState: {\n      delayTime: 0.5,\n      scaleSpeed: (1 - 0) / 0.2,\n      opacitySpeed: (1 - 0) / 0.2\n    },\n    comboCheckIndex: []\n  };\n  const tray = assets.foodInPot.findRegion(\"hot_pot\", -1);\n  const TRAY_WIDTH = width / 3.8;\n  const TRAY_HEIGHT = TRAY_WIDTH * tray.height / tray.width;\n  worldState.trayState.width = TRAY_WIDTH;\n  worldState.trayState.height = TRAY_HEIGHT;\n  const extra = {\n    canvas,\n    width,\n    height,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    inputHandler,\n    assets,\n    font\n  };\n  const world = createWorld(worldState, extra);\n  world.addSystem(createInputHandlerGameScreenSystem());\n  world.addSystem(createBackGroundRenderSystem());\n  world.addSystem(createTrayPositionSystem());\n  world.addSystem(createFoodSpawnSystem());\n  world.addSystem(createFoodPositionSystem());\n  world.addSystem(createFoodRenderSystem()); // world.addSystem(createRecipeRenderSystem());\n  // world.addSystem(createRedSmokeRenderSystem(), true);\n\n  world.addSystem(createCollectionRenderSystem()); // world.addSystem(createLifeRenderSystem(), true);\n  // world.addSystem(createStunScreenRenderSystem());\n\n  world.addSystem(createTrayCollideFoodSystem()); // world.addSystem(createScoreRenderSystem(), true);\n\n  world.addSystem(createScoreCalcSystem()); // world.addSystem(createBannerComboRenderSystem());\n\n  world.addSystem(createTrayRenderSystem(), true);\n  world.addSystem(createWhiteSmokeRenderSystem());\n  let count = 0;\n  let countRemainLife = worldState.life.length;\n  let oneTimeCheck = true; // const restartGame = async () => {\n  //   Game.setCurrentScreen(await createStartScreenSystem(Game));\n  // };\n\n  const goToLeaderBoardScreen = async () => {\n    Game.setCurrentScreen(await createLeaderBoardSystem(Game));\n  };\n\n  const update = delta => {\n    if (!worldState.gameOver) {\n      // check remaining life\n      countRemainLife = worldState.life.length;\n\n      for (let l of worldState.life) {\n        if (!l.red) {\n          countRemainLife--;\n        }\n      }\n\n      if (countRemainLife === 0 && oneTimeCheck) {\n        worldState.emptyLife = true;\n        oneTimeCheck = false;\n\n        for (let i = 0; i < worldState.foods.length; i++) {\n          worldState.redSmokeList.push({\n            x: worldState.foods[i].x,\n            y: worldState.foods[i].y,\n            stateTime: 0,\n            scale: worldState.foods[i].oriScale\n          });\n        }\n\n        worldState.foods.length = 0;\n        worldState.gameOver = true;\n      } // check finished current recipe\n\n\n      count = 0;\n\n      for (let rep of worldState.recipes) {\n        if (rep.finished) {\n          count++;\n        }\n      }\n\n      if (count === worldState.recipes.length) {\n        for (let i = 0; i < worldState.foods.length; i++) {\n          worldState.redSmokeList.push({\n            x: worldState.foods[i].x,\n            y: worldState.foods[i].y,\n            stateTime: 0,\n            scale: worldState.foods[i].oriScale\n          });\n        }\n\n        genderNewRecipe();\n        worldState.genderNewRecipeAmount = true;\n        worldState.foods.length = 0;\n        worldState.collection.length = 0;\n        worldState.difficulty += 1; // worldState.trayState.offsetCheckY = 0;\n      }\n\n      worldState.stateTime += delta;\n      world.update(delta);\n    } else {\n      // inputHandler.cleanup();\n      // world.update(delta, true);\n      Game.score = worldState.score;\n      goToLeaderBoardScreen(); // showLeaderBoard(worldState.score, restartGame);\n    }\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createGameScreenSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/GameScreen.js"],"names":["ReactDOM","React","LeaderBoard","axios","createViewportAwareInputHandler","Vector2","createWorld","getFoodTexture","getFoodAnimation","getFoodInPotTexture","createBackGroundRenderSystem","createTrayRenderSystem","createTrayPositionSystem","createInputHandlerGameScreenSystem","createFoodSpawnSystem","createFoodPositionSystem","createFoodRenderSystem","createRecipeRenderSystem","createTrayCollideFoodSystem","createRedSmokeRenderSystem","createCollectionRenderSystem","createLifeRenderSystem","createStunScreenRenderSystem","createScoreRenderSystem","createScoreCalcSystem","createWhiteSmokeRenderSystem","createBannerComboRenderSystem","createStartScreenSystem","createLeaderBoardSystem","shouldShowLeaderBoard","showLeaderBoard","score","onRestart","players","res","post","headers","localStorage","getItem","data","e","wrapper","document","createElement","setAttribute","body","appendChild","render","removeChild","createGameScreenSystem","Game","width","height","canvas","gl","batch","camera","whiteTex","assets","viewport","font","inputHandler","TRAY_INITIAL_Y","foodTex","animAssets","recipes","shuffle","array","sort","Math","random","genderNewRecipe","length","i","push","type","index","amount","floor","finished","aniStateTime","counter","worldState","comboCounter","correctCatch","genderNewRecipeAmount","stateTime","gameOver","emptyLife","life","red","lifeIndex","stunScreen","check","opacity","trayState","x","y","position","target","moveLeft","moveRight","speed","difficulty","collection","collectionFinished","foods","smokeAnimation","foodInPot","whiteSmokeList","redSmokeList","comboState","delayTime","scaleSpeed","opacitySpeed","comboCheckIndex","tray","findRegion","TRAY_WIDTH","TRAY_HEIGHT","extra","world","addSystem","count","countRemainLife","oneTimeCheck","goToLeaderBoardScreen","setCurrentScreen","update","delta","l","scale","oriScale","rep","destroy","cleanup"],"mappings":"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","sourcesContent":["import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport LeaderBoard from \"../LeaderBoard\";\r\nimport axios from \"../../utils/axios\";\r\n\r\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\r\nimport createWorld from \"./createWorld\";\r\nimport {\r\n  getFoodTexture,\r\n  getFoodAnimation,\r\n  getFoodInPotTexture,\r\n} from \"./utils/getFood\";\r\nimport createBackGroundRenderSystem from \"./systems/BgRenderSystem\";\r\nimport createTrayRenderSystem from \"./systems/TrayRenderSystem\";\r\nimport createTrayPositionSystem from \"./systems/TrayPositionSystem\";\r\nimport createInputHandlerGameScreenSystem from \"./systems/InputHandlerGameScreenSystem\";\r\nimport createFoodSpawnSystem from \"./systems/FoodSpawnSystem\";\r\nimport createFoodPositionSystem from \"./systems/FoodPositionSystem\";\r\nimport createFoodRenderSystem from \"./systems/FoodRenderSystem\";\r\nimport createRecipeRenderSystem from \"./systems/RecipeRenderSystem\";\r\nimport createTrayCollideFoodSystem from \"./systems/TrayCollideFoodSystem\";\r\nimport createRedSmokeRenderSystem from \"./systems/RedSmokeRenderSystem\";\r\nimport createCollectionRenderSystem from \"./systems/CollectionRenderSystem\";\r\nimport createLifeRenderSystem from \"./systems/LifeRenderSystem\";\r\nimport createStunScreenRenderSystem from \"./systems/StunScreenRenderSystem\";\r\nimport createScoreRenderSystem from \"./systems/ScoreRenderSystem\";\r\nimport createScoreCalcSystem from \"./systems/ScoreCalcSystem\";\r\nimport createWhiteSmokeRenderSystem from \"./systems/WhiteSmokeRenderSystem\";\r\nimport createBannerComboRenderSystem from \"./systems/BannerComboRenderSystem\";\r\nimport createStartScreenSystem from \"./StartScreen\";\r\nimport createLeaderBoardSystem from \"./LeaderBoardScreen\";\r\n\r\nlet shouldShowLeaderBoard = true;\r\nconst showLeaderBoard = async (score, onRestart) => {\r\n  if (!shouldShowLeaderBoard) {\r\n    return;\r\n  }\r\n  shouldShowLeaderBoard = false;\r\n  let players = [];\r\n  try {\r\n    const res = await axios.post(\r\n      \"/leader-board\",\r\n      { score },\r\n      {\r\n        headers: { \"x-access-token\": localStorage.getItem(\"@Token\") },\r\n      }\r\n    );\r\n    players = res.data;\r\n  } catch (e) {}\r\n  const wrapper = document.createElement(\"div\");\r\n  wrapper.setAttribute(\"id\", \"leader-board-wrapper\");\r\n  document.body.appendChild(wrapper);\r\n  ReactDOM.render(\r\n    <LeaderBoard\r\n      players={players}\r\n      score={score}\r\n      onClickRestart={() => {\r\n        onRestart();\r\n        shouldShowLeaderBoard = true;\r\n        document.body.removeChild(wrapper);\r\n      }}\r\n    />,\r\n    wrapper\r\n  );\r\n};\r\n\r\nconst createGameScreenSystem = (Game) => {\r\n  const {\r\n    width,\r\n    height,\r\n    canvas,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    assets,\r\n    viewport,\r\n    font,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n  const TRAY_INITIAL_Y = (height * 3.1) / 4;\r\n\r\n  const foodTex = getFoodTexture(assets.animAssets);\r\n  const recipes = [];\r\n\r\n  const shuffle = (array) => {\r\n    array.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  const genderNewRecipe = () => {\r\n    shuffle(foodTex);\r\n    recipes.length = 0;\r\n    for (let i = 0; i < 4; i++) {\r\n      recipes.push({\r\n        type: foodTex[i].index,\r\n        // amount: Math.floor(Math.random() * (7 - 1) + 1),\r\n        amount: Math.floor(Math.random() * (6 - 4) + 4),\r\n        finished: false,\r\n        aniStateTime: 0,\r\n        counter: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  genderNewRecipe();\r\n\r\n  const worldState = {\r\n    score: 0,\r\n    comboCounter: 0,\r\n    correctCatch: false,\r\n    genderNewRecipeAmount: true,\r\n    stateTime: 0,\r\n    gameOver: false,\r\n    emptyLife: false,\r\n    life: [{ red: true }, { red: true }, { red: true }],\r\n    lifeIndex: 2, // life checking index\r\n    stunScreen: { check: false, opacity: 1 },\r\n    trayState: {\r\n      x: width / 2,\r\n      y: TRAY_INITIAL_Y,\r\n      position: new Vector2(width / 2, TRAY_INITIAL_Y),\r\n      target: new Vector2(width / 2, TRAY_INITIAL_Y),\r\n      moveLeft: false,\r\n      moveRight: false,\r\n      speed: width * 2.5,\r\n      // offsetCheckY: 0, //\r\n    },\r\n    difficulty: 1, //\r\n    collection: [], //\r\n    collectionFinished: [],\r\n    recipes: recipes, //\r\n    foods: [], //\r\n    foodTex: foodTex,\r\n    // foodAnimation: getFoodAnimation(assets.animAssets).foodAnimation,\r\n    smokeAnimation: getFoodAnimation(assets.animAssets).smokeAnimation,\r\n    foodInPot: getFoodInPotTexture(assets.foodInPot),\r\n    whiteSmokeList: [], // contain position of ws when collection have that kind of food\r\n    redSmokeList: [], // contain position of rs whenever red smoke event triggered\r\n    comboState: {\r\n      delayTime: 0.5,\r\n      scaleSpeed: (1 - 0) / 0.2,\r\n      opacitySpeed: (1 - 0) / 0.2,\r\n    },\r\n    comboCheckIndex: [],\r\n  };\r\n\r\n  const tray = assets.foodInPot.findRegion(\"hot_pot\", -1);\r\n  const TRAY_WIDTH = width / 3.8;\r\n  const TRAY_HEIGHT = (TRAY_WIDTH * tray.height) / tray.width;\r\n  worldState.trayState.width = TRAY_WIDTH;\r\n  worldState.trayState.height = TRAY_HEIGHT;\r\n\r\n  const extra = {\r\n    canvas,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    inputHandler,\r\n    assets,\r\n    font,\r\n  };\r\n  const world = createWorld(worldState, extra);\r\n  world.addSystem(createInputHandlerGameScreenSystem());\r\n  world.addSystem(createBackGroundRenderSystem());\r\n  world.addSystem(createTrayPositionSystem());\r\n\r\n  world.addSystem(createFoodSpawnSystem());\r\n  world.addSystem(createFoodPositionSystem());\r\n  world.addSystem(createFoodRenderSystem());\r\n  // world.addSystem(createRecipeRenderSystem());\r\n  // world.addSystem(createRedSmokeRenderSystem(), true);\r\n  world.addSystem(createCollectionRenderSystem());\r\n  // world.addSystem(createLifeRenderSystem(), true);\r\n  // world.addSystem(createStunScreenRenderSystem());\r\n  world.addSystem(createTrayCollideFoodSystem());\r\n  // world.addSystem(createScoreRenderSystem(), true);\r\n  world.addSystem(createScoreCalcSystem());\r\n  // world.addSystem(createBannerComboRenderSystem());\r\n  world.addSystem(createTrayRenderSystem(), true);\r\n  world.addSystem(createWhiteSmokeRenderSystem());\r\n\r\n  let count = 0;\r\n  let countRemainLife = worldState.life.length;\r\n  let oneTimeCheck = true;\r\n\r\n  // const restartGame = async () => {\r\n  //   Game.setCurrentScreen(await createStartScreenSystem(Game));\r\n  // };\r\n  const goToLeaderBoardScreen = async () => {\r\n    Game.setCurrentScreen(await createLeaderBoardSystem(Game));\r\n  };\r\n\r\n  const update = (delta) => {\r\n    if (!worldState.gameOver) {\r\n      // check remaining life\r\n      countRemainLife = worldState.life.length;\r\n      for (let l of worldState.life) {\r\n        if (!l.red) {\r\n          countRemainLife--;\r\n        }\r\n      }\r\n\r\n      if (countRemainLife === 0 && oneTimeCheck) {\r\n        worldState.emptyLife = true;\r\n        oneTimeCheck = false;\r\n        for (let i = 0; i < worldState.foods.length; i++) {\r\n          worldState.redSmokeList.push({\r\n            x: worldState.foods[i].x,\r\n            y: worldState.foods[i].y,\r\n            stateTime: 0,\r\n            scale: worldState.foods[i].oriScale,\r\n          });\r\n        }\r\n        worldState.foods.length = 0;\r\n        worldState.gameOver = true;\r\n      }\r\n\r\n      // check finished current recipe\r\n      count = 0;\r\n      for (let rep of worldState.recipes) {\r\n        if (rep.finished) {\r\n          count++;\r\n        }\r\n      }\r\n\r\n      if (count === worldState.recipes.length) {\r\n        for (let i = 0; i < worldState.foods.length; i++) {\r\n          worldState.redSmokeList.push({\r\n            x: worldState.foods[i].x,\r\n            y: worldState.foods[i].y,\r\n            stateTime: 0,\r\n            scale: worldState.foods[i].oriScale,\r\n          });\r\n        }\r\n\r\n        genderNewRecipe();\r\n        worldState.genderNewRecipeAmount = true;\r\n        worldState.foods.length = 0;\r\n        worldState.collection.length = 0;\r\n        worldState.difficulty += 1;\r\n        // worldState.trayState.offsetCheckY = 0;\r\n      }\r\n\r\n      worldState.stateTime += delta;\r\n      world.update(delta);\r\n    } else {\r\n      // inputHandler.cleanup();\r\n      // world.update(delta, true);\r\n      Game.score = worldState.score;\r\n      goToLeaderBoardScreen();\r\n      // showLeaderBoard(worldState.score, restartGame);\r\n    }\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createGameScreenSystem;\r\n"]},"metadata":{},"sourceType":"module"}