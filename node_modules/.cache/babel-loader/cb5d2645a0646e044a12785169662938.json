{"ast":null,"code":"import { EventEmitter } from 'fbemitter';\nexport default class InputHandler {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.lastX = 0;\n    this.lastY = 0;\n    this.touched = false;\n    const emitter = this.emitter = new EventEmitter();\n\n    this.mouseDownHandler = evt => {\n      this.touched = true;\n      this.handleMove(evt);\n      emitter.emit('touchStart', this.getX(), this.getY());\n    };\n\n    this.mouseUpHandler = evt => {\n      this.touched = false;\n      emitter.emit('touchEnd', this.getX(), this.getY());\n    };\n\n    this.mouseMoveHandler = evt => {\n      this.handleMove(evt);\n      emitter.emit('touchMove', this.getX(), this.getY());\n    };\n\n    this.touchStartHandler = evt => {\n      evt.preventDefault(); // TODO: handle multi touch\n\n      let touch = evt.touches[0];\n      this.canvas.dispatchEvent(new MouseEvent('mousedown', {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n      }));\n    };\n\n    this.touchEndHandler = evt => {\n      evt.preventDefault();\n      this.canvas.dispatchEvent(new MouseEvent('mouseup'));\n    };\n\n    this.touchMoveHandler = evt => {\n      evt.preventDefault();\n      let touch = evt.touches[0];\n      this.canvas.dispatchEvent(new MouseEvent('mousemove', {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n      }));\n    };\n\n    this.canvas.addEventListener('mousedown', this.mouseDownHandler, false);\n    this.canvas.addEventListener('mouseup', this.mouseUpHandler, false);\n    this.canvas.addEventListener('mousemove', this.mouseMoveHandler, false);\n    this.canvas.addEventListener('touchstart', this.touchStartHandler, false);\n    this.canvas.addEventListener('touchend', this.touchEndHandler, false);\n    this.canvas.addEventListener('touchmove', this.touchMoveHandler, false);\n  }\n\n  cleanup() {\n    this.canvas.removeEventListener('mousedown', this.mouseDownHandler);\n    this.canvas.removeEventListener('mouseup', this.mouseUpHandler);\n    this.canvas.removeEventListener('mousemove', this.mouseMoveHandler);\n    this.canvas.removeEventListener('touchstart', this.touchStartHandler);\n    this.canvas.removeEventListener('touchend', this.touchEndHandler);\n    this.canvas.removeEventListener('touchmove', this.touchMoveHandler);\n  }\n\n  addEventListener(event, listener) {\n    this.emitter.addListener(event, listener);\n  }\n\n  handleMove(evt) {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = evt.clientX - rect.left;\n    const y = evt.clientY - rect.top;\n    this.lastX = x;\n    this.lastY = y;\n  }\n\n  getX() {\n    return this.lastX;\n  }\n\n  getY() {\n    return this.lastY;\n  }\n\n  isTouched() {\n    return this.touched;\n  }\n\n}","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/gdxjs/lib/InputHandler.js"],"names":["EventEmitter","InputHandler","constructor","canvas","lastX","lastY","touched","emitter","mouseDownHandler","evt","handleMove","emit","getX","getY","mouseUpHandler","mouseMoveHandler","touchStartHandler","preventDefault","touch","touches","dispatchEvent","MouseEvent","clientX","clientY","touchEndHandler","touchMoveHandler","addEventListener","cleanup","removeEventListener","event","listener","addListener","rect","getBoundingClientRect","x","left","y","top","isTouched"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'fbemitter';\nexport default class InputHandler {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.lastX = 0;\n    this.lastY = 0;\n    this.touched = false;\n    const emitter = this.emitter = new EventEmitter();\n\n    this.mouseDownHandler = evt => {\n      this.touched = true;\n      this.handleMove(evt);\n      emitter.emit('touchStart', this.getX(), this.getY());\n    };\n\n    this.mouseUpHandler = evt => {\n      this.touched = false;\n      emitter.emit('touchEnd', this.getX(), this.getY());\n    };\n\n    this.mouseMoveHandler = evt => {\n      this.handleMove(evt);\n      emitter.emit('touchMove', this.getX(), this.getY());\n    };\n\n    this.touchStartHandler = evt => {\n      evt.preventDefault(); // TODO: handle multi touch\n\n      let touch = evt.touches[0];\n      this.canvas.dispatchEvent(new MouseEvent('mousedown', {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n      }));\n    };\n\n    this.touchEndHandler = evt => {\n      evt.preventDefault();\n      this.canvas.dispatchEvent(new MouseEvent('mouseup'));\n    };\n\n    this.touchMoveHandler = evt => {\n      evt.preventDefault();\n      let touch = evt.touches[0];\n      this.canvas.dispatchEvent(new MouseEvent('mousemove', {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n      }));\n    };\n\n    this.canvas.addEventListener('mousedown', this.mouseDownHandler, false);\n    this.canvas.addEventListener('mouseup', this.mouseUpHandler, false);\n    this.canvas.addEventListener('mousemove', this.mouseMoveHandler, false);\n    this.canvas.addEventListener('touchstart', this.touchStartHandler, false);\n    this.canvas.addEventListener('touchend', this.touchEndHandler, false);\n    this.canvas.addEventListener('touchmove', this.touchMoveHandler, false);\n  }\n\n  cleanup() {\n    this.canvas.removeEventListener('mousedown', this.mouseDownHandler);\n    this.canvas.removeEventListener('mouseup', this.mouseUpHandler);\n    this.canvas.removeEventListener('mousemove', this.mouseMoveHandler);\n    this.canvas.removeEventListener('touchstart', this.touchStartHandler);\n    this.canvas.removeEventListener('touchend', this.touchEndHandler);\n    this.canvas.removeEventListener('touchmove', this.touchMoveHandler);\n  }\n\n  addEventListener(event, listener) {\n    this.emitter.addListener(event, listener);\n  }\n\n  handleMove(evt) {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = evt.clientX - rect.left;\n    const y = evt.clientY - rect.top;\n    this.lastX = x;\n    this.lastY = y;\n  }\n\n  getX() {\n    return this.lastX;\n  }\n\n  getY() {\n    return this.lastY;\n  }\n\n  isTouched() {\n    return this.touched;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}