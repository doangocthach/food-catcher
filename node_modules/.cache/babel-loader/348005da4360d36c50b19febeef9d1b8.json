{"ast":null,"code":"import { fillRect } from \"gdxjs\";\n\nconst createBackGroundRenderSystem = () => {\n  let bg, bar;\n  let BAR_WIDTH, BAR_HEIGHT;\n  return {\n    init(worldState, {\n      width,\n      assets\n    }) {\n      let atlas = assets.newAssets;\n      bg = assets.backGround;\n      bar = atlas.findRegion(\"menu-bar\", -1);\n      BAR_WIDTH = width;\n      BAR_HEIGHT = BAR_WIDTH * bar.height / bar.width;\n    },\n\n    update(delta, worldState, {\n      batch,\n      width,\n      height,\n      camera\n    }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n      fillRect(batch, bg, 0, 0, width, height);\n      bar.draw(batch, 0, 0, BAR_WIDTH, BAR_HEIGHT);\n      batch.end();\n    }\n\n  };\n};\n\nexport default createBackGroundRenderSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/BgRenderSystem.js"],"names":["fillRect","createBackGroundRenderSystem","bg","bar","BAR_WIDTH","BAR_HEIGHT","init","worldState","width","assets","atlas","newAssets","backGround","findRegion","height","update","delta","batch","camera","setProjection","combined","begin","setColor","draw","end"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,4BAA4B,GAAG,MAAM;AACzC,MAAIC,EAAJ,EAAQC,GAAR;AACA,MAAIC,SAAJ,EAAeC,UAAf;AACA,SAAO;AACLC,IAAAA,IAAI,CAACC,UAAD,EAAa;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAb,EAAgC;AAClC,UAAIC,KAAK,GAAGD,MAAM,CAACE,SAAnB;AAEAT,MAAAA,EAAE,GAAGO,MAAM,CAACG,UAAZ;AACAT,MAAAA,GAAG,GAAGO,KAAK,CAACG,UAAN,CAAiB,UAAjB,EAA6B,CAAC,CAA9B,CAAN;AACAT,MAAAA,SAAS,GAAGI,KAAZ;AACAH,MAAAA,UAAU,GAAID,SAAS,GAAGD,GAAG,CAACW,MAAjB,GAA2BX,GAAG,CAACK,KAA5C;AACD,KARI;;AASLO,IAAAA,MAAM,CAACC,KAAD,EAAQT,UAAR,EAAoB;AAAEU,MAAAA,KAAF;AAAST,MAAAA,KAAT;AAAgBM,MAAAA,MAAhB;AAAwBI,MAAAA;AAAxB,KAApB,EAAsD;AAC1DD,MAAAA,KAAK,CAACE,aAAN,CAAoBD,MAAM,CAACE,QAA3B;AACAH,MAAAA,KAAK,CAACI,KAAN;AACAJ,MAAAA,KAAK,CAACK,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AAEAtB,MAAAA,QAAQ,CAACiB,KAAD,EAAQf,EAAR,EAAY,CAAZ,EAAe,CAAf,EAAkBM,KAAlB,EAAyBM,MAAzB,CAAR;AACAX,MAAAA,GAAG,CAACoB,IAAJ,CAASN,KAAT,EAAgB,CAAhB,EAAmB,CAAnB,EAAsBb,SAAtB,EAAiCC,UAAjC;AAEAY,MAAAA,KAAK,CAACO,GAAN;AACD;;AAlBI,GAAP;AAoBD,CAvBD;;AAyBA,eAAevB,4BAAf","sourcesContent":["import { fillRect } from \"gdxjs\";\r\n\r\nconst createBackGroundRenderSystem = () => {\r\n  let bg, bar;\r\n  let BAR_WIDTH, BAR_HEIGHT;\r\n  return {\r\n    init(worldState, { width, assets }) {\r\n      let atlas = assets.newAssets;\r\n\r\n      bg = assets.backGround;\r\n      bar = atlas.findRegion(\"menu-bar\", -1);\r\n      BAR_WIDTH = width;\r\n      BAR_HEIGHT = (BAR_WIDTH * bar.height) / bar.width;\r\n    },\r\n    update(delta, worldState, { batch, width, height, camera }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n\r\n      fillRect(batch, bg, 0, 0, width, height);\r\n      bar.draw(batch, 0, 0, BAR_WIDTH, BAR_HEIGHT);\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBackGroundRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}