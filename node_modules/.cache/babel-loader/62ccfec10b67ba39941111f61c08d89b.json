{"ast":null,"code":"import InputHandler from './InputHandler';\nimport Vector2 from './Vector2';\n\nconst createViewportAwareInputListener = (handler, viewport) => {\n  return (x, y, id) => {\n    const {\n      x: vX,\n      y: vY,\n      pixelRatio\n    } = viewport.getViewportInfo();\n    x = (x - vX) * pixelRatio;\n    y = (y - vY) * pixelRatio;\n    handler(x, y, id);\n  };\n};\n\nexport default ((canvas, viewport) => {\n  const inputHandler = new InputHandler(canvas);\n  const screenCoord = new Vector2();\n  const worldCoord = new Vector2();\n  return {\n    cleanup() {\n      inputHandler.cleanup();\n    },\n\n    addEventListener(event, listener) {\n      inputHandler.addEventListener(event, createViewportAwareInputListener(listener, viewport));\n    },\n\n    getX() {\n      const {\n        x: vX,\n        pixelRatio\n      } = viewport.getViewportInfo();\n      return inputHandler.getX() * pixelRatio - vX;\n    },\n\n    getY() {\n      const {\n        y: vY,\n        pixelRatio\n      } = viewport.getViewportInfo();\n      return inputHandler.getY() * pixelRatio - vY;\n    },\n\n    getTouchedWorldCoord() {\n      screenCoord.set(this.getX(), this.getY());\n      viewport.getCamera().unprojectVector2(worldCoord, screenCoord);\n      return worldCoord;\n    }\n\n  };\n});","map":{"version":3,"sources":["E:/fcatcher-client/node_modules/gdxjs/lib/createViewportAwareInputHandler.js"],"names":["InputHandler","Vector2","createViewportAwareInputListener","handler","viewport","x","y","id","vX","vY","pixelRatio","getViewportInfo","canvas","inputHandler","screenCoord","worldCoord","cleanup","addEventListener","event","listener","getX","getY","getTouchedWorldCoord","set","getCamera","unprojectVector2"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,gCAAgC,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AAC9D,SAAO,CAACC,CAAD,EAAIC,CAAJ,EAAOC,EAAP,KAAc;AACnB,UAAM;AACJF,MAAAA,CAAC,EAAEG,EADC;AAEJF,MAAAA,CAAC,EAAEG,EAFC;AAGJC,MAAAA;AAHI,QAIFN,QAAQ,CAACO,eAAT,EAJJ;AAKAN,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAGG,EAAL,IAAWE,UAAf;AACAJ,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAGG,EAAL,IAAWC,UAAf;AACAP,IAAAA,OAAO,CAACE,CAAD,EAAIC,CAAJ,EAAOC,EAAP,CAAP;AACD,GATD;AAUD,CAXD;;AAaA,gBAAgB,CAACK,MAAD,EAASR,QAAT,KAAsB;AACpC,QAAMS,YAAY,GAAG,IAAIb,YAAJ,CAAiBY,MAAjB,CAArB;AACA,QAAME,WAAW,GAAG,IAAIb,OAAJ,EAApB;AACA,QAAMc,UAAU,GAAG,IAAId,OAAJ,EAAnB;AACA,SAAO;AACLe,IAAAA,OAAO,GAAG;AACRH,MAAAA,YAAY,CAACG,OAAb;AACD,KAHI;;AAKLC,IAAAA,gBAAgB,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAChCN,MAAAA,YAAY,CAACI,gBAAb,CAA8BC,KAA9B,EAAqChB,gCAAgC,CAACiB,QAAD,EAAWf,QAAX,CAArE;AACD,KAPI;;AASLgB,IAAAA,IAAI,GAAG;AACL,YAAM;AACJf,QAAAA,CAAC,EAAEG,EADC;AAEJE,QAAAA;AAFI,UAGFN,QAAQ,CAACO,eAAT,EAHJ;AAIA,aAAOE,YAAY,CAACO,IAAb,KAAsBV,UAAtB,GAAmCF,EAA1C;AACD,KAfI;;AAiBLa,IAAAA,IAAI,GAAG;AACL,YAAM;AACJf,QAAAA,CAAC,EAAEG,EADC;AAEJC,QAAAA;AAFI,UAGFN,QAAQ,CAACO,eAAT,EAHJ;AAIA,aAAOE,YAAY,CAACQ,IAAb,KAAsBX,UAAtB,GAAmCD,EAA1C;AACD,KAvBI;;AAyBLa,IAAAA,oBAAoB,GAAG;AACrBR,MAAAA,WAAW,CAACS,GAAZ,CAAgB,KAAKH,IAAL,EAAhB,EAA6B,KAAKC,IAAL,EAA7B;AACAjB,MAAAA,QAAQ,CAACoB,SAAT,GAAqBC,gBAArB,CAAsCV,UAAtC,EAAkDD,WAAlD;AACA,aAAOC,UAAP;AACD;;AA7BI,GAAP;AAgCD,CApCD","sourcesContent":["import InputHandler from './InputHandler';\nimport Vector2 from './Vector2';\n\nconst createViewportAwareInputListener = (handler, viewport) => {\n  return (x, y, id) => {\n    const {\n      x: vX,\n      y: vY,\n      pixelRatio\n    } = viewport.getViewportInfo();\n    x = (x - vX) * pixelRatio;\n    y = (y - vY) * pixelRatio;\n    handler(x, y, id);\n  };\n};\n\nexport default ((canvas, viewport) => {\n  const inputHandler = new InputHandler(canvas);\n  const screenCoord = new Vector2();\n  const worldCoord = new Vector2();\n  return {\n    cleanup() {\n      inputHandler.cleanup();\n    },\n\n    addEventListener(event, listener) {\n      inputHandler.addEventListener(event, createViewportAwareInputListener(listener, viewport));\n    },\n\n    getX() {\n      const {\n        x: vX,\n        pixelRatio\n      } = viewport.getViewportInfo();\n      return inputHandler.getX() * pixelRatio - vX;\n    },\n\n    getY() {\n      const {\n        y: vY,\n        pixelRatio\n      } = viewport.getViewportInfo();\n      return inputHandler.getY() * pixelRatio - vY;\n    },\n\n    getTouchedWorldCoord() {\n      screenCoord.set(this.getX(), this.getY());\n      viewport.getCamera().unprojectVector2(worldCoord, screenCoord);\n      return worldCoord;\n    }\n\n  };\n});"]},"metadata":{},"sourceType":"module"}