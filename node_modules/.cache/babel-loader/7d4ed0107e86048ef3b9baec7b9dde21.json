{"ast":null,"code":"import { AlignMode, TextType } from \"../utils/loadFontFile\";\n\nconst createScoreRenderSystem = () => {\n  let scoreText;\n  let scoreTexTure;\n  let ST_WIDTH, ST_HEIGHT;\n  return {\n    init(worldState, {\n      font,\n      width,\n      assets\n    }) {\n      scoreText = font.setNewText(width);\n      const atlas = assets.newAssets;\n      scoreTexTure = atlas.findRegion(\"Score\", -1);\n      ST_WIDTH = width / 6;\n      ST_HEIGHT = ST_WIDTH * scoreTexTure.height / scoreTexTure.width;\n    },\n\n    update(delta, {\n      score\n    }, {\n      batch,\n      camera,\n      width,\n      height\n    }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(0, 0, 0, 1);\n      scoreTexTure.draw(batch, width * 0.97 - ST_WIDTH, height * 0.11, ST_WIDTH, ST_HEIGHT);\n      scoreText.setAlignMode(AlignMode.right);\n      scoreText.setType(TextType.dynamic); // scoreText.setFixedGlyphWidth(width);\n\n      scoreText.draw(batch, `${score}`, width * 0.975, height * 0.12, width / 8);\n      batch.end();\n    }\n\n  };\n};\n\nexport default createScoreRenderSystem;","map":{"version":3,"sources":["E:/fcatcher-client/src/components/game/systems/ScoreRenderSystem.js"],"names":["AlignMode","TextType","createScoreRenderSystem","scoreText","scoreTexTure","ST_WIDTH","ST_HEIGHT","init","worldState","font","width","assets","setNewText","atlas","newAssets","findRegion","height","update","delta","score","batch","camera","setProjection","combined","begin","setColor","draw","setAlignMode","right","setType","dynamic","end"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,uBAApC;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AACpC,MAAIC,SAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,QAAJ,EAAcC,SAAd;AACA,SAAO;AACLC,IAAAA,IAAI,CAACC,UAAD,EAAa;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAb,EAAsC;AACxCR,MAAAA,SAAS,GAAGM,IAAI,CAACG,UAAL,CAAgBF,KAAhB,CAAZ;AAEA,YAAMG,KAAK,GAAGF,MAAM,CAACG,SAArB;AAEAV,MAAAA,YAAY,GAAGS,KAAK,CAACE,UAAN,CAAiB,OAAjB,EAA0B,CAAC,CAA3B,CAAf;AAEAV,MAAAA,QAAQ,GAAGK,KAAK,GAAG,CAAnB;AACAJ,MAAAA,SAAS,GAAID,QAAQ,GAAGD,YAAY,CAACY,MAAzB,GAAmCZ,YAAY,CAACM,KAA5D;AACD,KAVI;;AAWLO,IAAAA,MAAM,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAmB;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBX,MAAAA,KAAjB;AAAwBM,MAAAA;AAAxB,KAAnB,EAAqD;AACzDI,MAAAA,KAAK,CAACE,aAAN,CAAoBD,MAAM,CAACE,QAA3B;AACAH,MAAAA,KAAK,CAACI,KAAN;AACAJ,MAAAA,KAAK,CAACK,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AAEArB,MAAAA,YAAY,CAACsB,IAAb,CACEN,KADF,EAEEV,KAAK,GAAG,IAAR,GAAeL,QAFjB,EAGEW,MAAM,GAAG,IAHX,EAIEX,QAJF,EAKEC,SALF;AAQAH,MAAAA,SAAS,CAACwB,YAAV,CAAuB3B,SAAS,CAAC4B,KAAjC;AACAzB,MAAAA,SAAS,CAAC0B,OAAV,CAAkB5B,QAAQ,CAAC6B,OAA3B,EAdyD,CAezD;;AACA3B,MAAAA,SAAS,CAACuB,IAAV,CACEN,KADF,EAEG,GAAED,KAAM,EAFX,EAGET,KAAK,GAAG,KAHV,EAIEM,MAAM,GAAG,IAJX,EAKEN,KAAK,GAAG,CALV;AAQAU,MAAAA,KAAK,CAACW,GAAN;AACD;;AApCI,GAAP;AAsCD,CA1CD;;AA4CA,eAAe7B,uBAAf","sourcesContent":["import { AlignMode, TextType } from \"../utils/loadFontFile\";\r\n\r\nconst createScoreRenderSystem = () => {\r\n  let scoreText;\r\n  let scoreTexTure;\r\n  let ST_WIDTH, ST_HEIGHT;\r\n  return {\r\n    init(worldState, { font, width, assets }) {\r\n      scoreText = font.setNewText(width);\r\n\r\n      const atlas = assets.newAssets;\r\n\r\n      scoreTexTure = atlas.findRegion(\"Score\", -1);\r\n\r\n      ST_WIDTH = width / 6;\r\n      ST_HEIGHT = (ST_WIDTH * scoreTexTure.height) / scoreTexTure.width;\r\n    },\r\n    update(delta, { score }, { batch, camera, width, height }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(0, 0, 0, 1);\r\n\r\n      scoreTexTure.draw(\r\n        batch,\r\n        width * 0.97 - ST_WIDTH,\r\n        height * 0.11,\r\n        ST_WIDTH,\r\n        ST_HEIGHT\r\n      );\r\n\r\n      scoreText.setAlignMode(AlignMode.right);\r\n      scoreText.setType(TextType.dynamic);\r\n      // scoreText.setFixedGlyphWidth(width);\r\n      scoreText.draw(\r\n        batch,\r\n        `${score}`,\r\n        width * 0.975,\r\n        height * 0.12,\r\n        width / 8\r\n      );\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createScoreRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}