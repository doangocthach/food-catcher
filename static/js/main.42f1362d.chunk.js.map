{"version":3,"sources":["enviroment.js","containerRender.js","inputHandler.js","foodCreate.js","foodRender.js","foodClear.js","recipeCreate.js","chopsticks.js","foodZoom.js","recipeRender.js","containerCollideFood.js","collectionRender.js","destoyFood.js","renderLoseScreen.js","stuningScreen.js","debug.js","removeStunedFood.js","gamePlay.js","modal.js","containerPhysical.js","loadImage.js","index.js"],"names":["tableWidth","tableHeight","batch","worldWidth","worldHeight","bg","table","a","setColor","draw","height","width","scale","worldPosition","Vector2","screenPosition","DEVICE_PIXEL_RATIO","window","devicePixelRatio","other_food_array","random_array","tmp","tmp2","image","impulseY_ratio","impulseX_ratio","accumulate","createTimer","index_random","random_impulseX","random_phase","you_lose","document","getElementById","foodCreate","foods","delta","world","foodTex","container","recipes","gameState","style","display","innerHTML","difficulty","Math","random","round","x","y","type","recipe","push","index","i","length","value","includes","food","random_food_list","sort","foodT","impulseX","impulseY","density","image1","bodyDef","b2BodyDef","b2BodyType","b2_dynamicBody","userData","scaleX","scaleY","scale_speed","stateTime","delete_time","goUp","state","destroy_position","opacity","opacity_speed","fixedRotation","angularDamping","PI","position","b2Vec2","body","CreateBody","shape","b2PolygonShape","SetAsBox","fixtureDef","b2FixtureDef","friction","restitution","filter","groupIndex","CreateFixture","ApplyLinearImpulse","createFoodBody","pos","data","foodRender","GetBodyList","GetNext","GetPosition","GetUserData","fixture","GetFixtureList","GetShape","GetType","b2ShapeType","e_polygonShape","GetAngle","clearFood","smoke_animation","begin","end","createRecipe","chopstick","zoom","recipeRender","smoke","animation","getKeyFrame","duration","frame_length","check_right","checkCollide","check","DestroyBody","collection_height","collection","stateTime_smoke","stateTime_food","life","collectionCommon","renderCollection","food_animation","collection_width","animations","destroyFood","image_food","width_board","height_board","board_max_size","offSetX","offSetY","scale_x","Array","fill","check_render_board","renderEndScreen","whiteTex","set","fillRect","win_board","top","broadX","broadY","containerY","j","renderStunningScreen","worldPoint","debugBox2d","vertices","m_vertices","vertice","GetWorldPoint","drawPolygon","e_circleShape","drawCircle","m_radius","removeStunedFood","gamePlay","camera","canvas","Image","object","containerWidth","containerHeight","FOOD_WIDTH_1","console","log","FOOD_HEIGHT_1","RECIPE_WIDTH","RECIPE_HEIGHT","COLLECTION_WIDTH","COLLECTION_HEIGHT","LIFE_WIDTH","LIFE_HEIGHT","chopsticks","distance","speed","target","moveLeft","moveRight","moveToLeft","moveToRight","position_acc","life_width","life_height","stun_time","modal","inputHandler","addEventListener","unprojectVector2","inRight","inLeft","e","which","InputHandler","drawEnviroment","enviroment","containerPhysicals","containerPhysical","checkCollidefood","drawChopicks","chopstickTex","chopicks","drawContainer","containerTex","shadowTex","containerRender","tray_shadow","createFoods","foodZoom","renderFoods","clearFoods","destroyFoods","createRecipes","renderRecipes","renderCollections","renderLoseScreens","renderLoseScreen","renderStunningScreens","debugs","removeStunedFoods","loadImage","gl","loadTexture","loadAtlas","atlas","findRegion","effect","findRegions","tom_efftect","kimchi_efftect","nam_efftect","ngao_efftect","raucai_efftect","thitbo_efftect","bachtuoc_effect","createAnimation","infor","resizeCanvas","getContext","cam","createOrthoCamera","createBatch","createWhiteTexture","b2World","newGame","clearColor","update","clear","COLOR_BUFFER_BIT","setProjection","combined","Step","game","createGameLoop","setInterval","getFps","init"],"mappings":"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","file":"static/js/main.42f1362d.chunk.js","sourcesContent":["let tableWidth = 0;\r\nlet tableHeight = 0;\r\nexport default async function DrawEnviroment(\r\n  batch,\r\n  worldWidth,\r\n  worldHeight,\r\n  bg,\r\n  table\r\n) {\r\n  batch.setColor(1, 1, 1, 1);\r\n  batch.draw(bg, 0, 0, worldWidth, worldHeight);\r\n\r\n  tableWidth = worldWidth;\r\n  tableHeight = (tableWidth * table.height) / table.width;\r\n  batch.setColor(1, 1, 1, 1);\r\n  batch.draw(table, 0, worldHeight - tableHeight, tableWidth, tableHeight);\r\n}\r\n","import { fillRect } from \"gdxjs\";\r\nlet scale = 0;\r\nexport default function containerRender(\r\n  batch,\r\n  container,\r\n  containerTex,\r\n  shadowTex,\r\n  worldHeight\r\n) {\r\n  batch.setColor(1, 1, 1, 1);\r\n  fillRect(\r\n    batch,\r\n    containerTex,\r\n    container.position.x - container.width / 2,\r\n    container.position.y - container.height / 2,\r\n    container.width,\r\n    container.height\r\n  );\r\n  // console.log(container.width);\r\n  // console.log(container.height);\r\n  scale = 0.7;\r\n  batch.setColor(1, 1, 1, 1);\r\n  fillRect(\r\n    batch,\r\n    shadowTex,\r\n    container.position.x - (container.width / 2) * scale,\r\n    container.position.y - (container.height / 2) * scale + worldHeight / 12,\r\n    container.width * scale,\r\n    container.height * scale\r\n  );\r\n  // fillRect(\r\n  //   batch,\r\n  //   dishTex,\r\n  //   container.position.x - container.width / 2.5,\r\n  //   dish.position.y - dish.height / 2,\r\n  //   dish.width,\r\n  //   dish.height\r\n  // );\r\n}\r\n","import { Vector2 } from \"gdxjs\";\r\n\r\nconst worldPosition = new Vector2(0, 0);\r\nconst screenPosition = new Vector2(0, 0);\r\n\r\nconst DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;\r\n\r\nexport default function inputHandler(\r\n  inputHandler,\r\n  camera,\r\n  worldWidth,\r\n  worldHeight,\r\n  container,\r\n  recipes,\r\n  canvas\r\n) {\r\n  // canvas.addEventListener(\"mousedown\", e => {\r\n  //   const rect = canvas.getBoundingClientRect();\r\n  //   console.log(e.clientX - rect.left, e.clientY - rect.top);\r\n  // });\r\n\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    x = x * DEVICE_PIXEL_RATIO;\r\n    y = y * DEVICE_PIXEL_RATIO;\r\n    screenPosition.x = x;\r\n    screenPosition.y = y;\r\n    camera.unprojectVector2(worldPosition, screenPosition);\r\n    container.target.x = worldPosition.x;\r\n\r\n    if (worldPosition.x >= worldWidth / 2) {\r\n      container.moveRight = true;\r\n      container.inRight = true;\r\n    } else {\r\n      container.moveLeft = true;\r\n      container.inLeft = true;\r\n    }\r\n    inputHandler.addEventListener(\"touchEnd\", () => {\r\n      if (container.inLeft) {\r\n        container.moveLeft = false;\r\n        container.inLeft = false;\r\n      } else {\r\n        container.moveRight = false;\r\n        container.inRight = false;\r\n      }\r\n    });\r\n\r\n    if (\r\n      worldPosition.x >= 0 &&\r\n      worldPosition.x <= worldWidth &&\r\n      worldPosition.y >= 0 &&\r\n      worldPosition.y <= worldHeight\r\n    ) {\r\n      if (container.gameState === \"CAN_RESET_LOSE\") {\r\n        recipes.type.length = 0;\r\n        container.collectionCommon.length = 0;\r\n        container.collection.length = 0;\r\n        container.life = [\r\n          { state: \"ENABLE\", stateTime: 0, position_acc: 0, scale: 1 },\r\n          { state: \"ENABLE\", stateTime: 0, position_acc: 0, scale: 1 },\r\n          { state: \"ENABLE\", stateTime: 0, position_acc: 0, scale: 1 }\r\n        ];\r\n        container.gameState = \"NEW_RECIPE\";\r\n      }\r\n    }\r\n  });\r\n\r\n  document.addEventListener(\"mouseup\", e => {\r\n    if (container.gameState === \"CAN_RESET_LOSE\") {\r\n      recipes.type.length = 0;\r\n      container.collectionCommon.length = 0;\r\n      container.collection.length = 0;\r\n      container.life = [\r\n        { state: \"ENABLE\", stateTime: 0, position_acc: 0, scale: 1 },\r\n        { state: \"ENABLE\", stateTime: 0, position_acc: 0, scale: 1 },\r\n        { state: \"ENABLE\", stateTime: 0, position_acc: 0, scale: 1 }\r\n      ];\r\n      container.gameState = \"NEW_RECIPE\";\r\n    }\r\n  });\r\n\r\n  document.addEventListener(\"keydown\", e => {\r\n    if (e.which === 39) {\r\n      container.moveRight = true;\r\n    }\r\n    if (e.which === 37) {\r\n      container.moveLeft = true;\r\n    }\r\n  });\r\n\r\n  document.addEventListener(\"keyup\", e => {\r\n    if (e.which === 39) {\r\n      container.moveRight = false;\r\n    }\r\n    if (e.which === 37) {\r\n      container.moveLeft = false;\r\n    }\r\n  });\r\n}\r\n","import {\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2PolygonShape,\r\n  b2FixtureDef,\r\n  b2Vec2\r\n} from \"@flyover/box2d\";\r\n\r\nconst createFoodBody = (\r\n  x,\r\n  y,\r\n  impulseX,\r\n  impulseY,\r\n  density = 1,\r\n  foods,\r\n  world,\r\n  image1,\r\n  type\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  // bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.userData = {\r\n    width: foods.width,\r\n    height: foods.height,\r\n    scaleX: foods.scaleX,\r\n    scaleY: foods.scaleY,\r\n    scale_speed: foods.scale_speed,\r\n    stateTime: 0,\r\n    delete_time: 0,\r\n    image1: image1,\r\n    goUp: true,\r\n    type: type,\r\n    state: \"ENABLE\",\r\n    destroy_position: { x: 0, y: 0 },\r\n    opacity: 0,\r\n    opacity_speed: foods.opacity_speed\r\n  };\r\n  bodyDef.fixedRotation = true;\r\n  bodyDef.angularDamping = Math.PI / 30;\r\n  bodyDef.position = new b2Vec2(x, y);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(foods.width / 2, foods.height / 2);\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.density = density;\r\n  fixtureDef.shape = shape;\r\n  fixtureDef.friction = 1;\r\n  fixtureDef.restitution = 1;\r\n  fixtureDef.filter.groupIndex = -1;\r\n  body.CreateFixture(fixtureDef);\r\n  body.ApplyLinearImpulse(\r\n    new b2Vec2(impulseX, impulseY),\r\n    new b2Vec2(x - foods.width / 50, y + foods.height / 10)\r\n  );\r\n  return body;\r\n};\r\n\r\nconst shuffle = array => {\r\n  array.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nlet other_food_array = [];\r\nlet random_array = [];\r\nlet tmp = [];\r\nlet tmp2 = [];\r\n\r\nconst random_food_list = (foodTex, recipes, difficulty) => {\r\n  random_array = [];\r\n  tmp = [];\r\n  tmp2 = [];\r\n  other_food_array = [];\r\n\r\n  for (let recipe of recipes.type) {\r\n    // if (recipe.state === \"ENABLE\") {\r\n    /// optional\r\n    random_array.push(recipe.index);\r\n    tmp.push(recipe.index);\r\n    // }\r\n  }\r\n\r\n  for (let i = 0; i < foodTex.length; i++) {\r\n    tmp2.push(foodTex[i].type);\r\n  }\r\n\r\n  for (let value of tmp2) {\r\n    if (!tmp.includes(value)) {\r\n      other_food_array.push(value);\r\n    }\r\n  }\r\n  if (difficulty >= 4 && difficulty <= 8) {\r\n    random_array.push(\r\n      other_food_array[\r\n        Math.round(Math.random() * (other_food_array.length - 1))\r\n      ]\r\n    );\r\n  }\r\n\r\n  if (difficulty >= 9) {\r\n    for (let food of other_food_array) {\r\n      random_array.push(food);\r\n    }\r\n  }\r\n\r\n  return random_array;\r\n};\r\n\r\nlet image = 0;\r\nlet impulseY_ratio = 0;\r\nlet impulseX_ratio = 0;\r\n\r\nlet accumulate = 0;\r\nlet createTimer = 0.1;\r\nlet index_random = 0;\r\n\r\nlet random_impulseX = [];\r\nlet random_phase = 0;\r\nconst you_lose = document.getElementById(\"content\");\r\nconst foodCreate = (\r\n  foods,\r\n  delta,\r\n  worldWidth,\r\n  worldHeight,\r\n  world,\r\n  foodTex,\r\n  container,\r\n  recipes\r\n) => {\r\n  accumulate += delta;\r\n  // container.difficulty = 1;\r\n  // console.log(container.difficulty);\r\n  if (accumulate >= createTimer && container.gameState === \"OLD_RECIPE\") {\r\n    accumulate = 0;\r\n    you_lose.style.display = \"none\";\r\n    you_lose.innerHTML = \"\";\r\n    if (container.difficulty >= 1 && container.difficulty <= 3) {\r\n      createTimer =\r\n        Math.random() * (2 / container.difficulty) + 0.5 / container.difficulty;\r\n    }\r\n\r\n    if (container.difficulty >= 4 && container.difficulty <= 8) {\r\n      createTimer =\r\n        Math.random() * (2.5 / container.difficulty) +\r\n        0.5 / container.difficulty;\r\n    }\r\n\r\n    if (container.difficulty >= 9 && container.difficulty <= 15) {\r\n      createTimer =\r\n        Math.random() * (2.8 / container.difficulty) +\r\n        0.3 / container.difficulty;\r\n    }\r\n\r\n    if (container.difficulty >= 16) {\r\n      createTimer = 0.1;\r\n    }\r\n\r\n    // createTimer = 0.3;\r\n    // console.log(container.difficulty);\r\n    random_impulseX = [\r\n      -(Math.random() * (300 - 73) + 73),\r\n      Math.random() * (300 - 73) + 73\r\n    ];\r\n\r\n    impulseX_ratio = random_impulseX[Math.round(Math.random() * 1 + 0)];\r\n    impulseY_ratio = Math.random() * (12 - 11.3) + 11.3;\r\n\r\n    random_phase = {\r\n      x: worldWidth / impulseX_ratio,\r\n      y: -worldHeight / impulseY_ratio\r\n    };\r\n\r\n    random_array = random_food_list(foodTex, recipes, container.difficulty);\r\n    shuffle(random_array);\r\n    index_random =\r\n      random_array[Math.round(Math.random() * (random_array.length - 1))];\r\n\r\n    for (let foodT of foodTex) {\r\n      if (index_random === foodT.type) {\r\n        image = foodT;\r\n        break;\r\n      }\r\n    }\r\n    createFoodBody(\r\n      foods.position.x,\r\n      foods.position.y,\r\n      random_phase.x,\r\n      random_phase.y,\r\n      1,\r\n      foods,\r\n      world,\r\n      image.image1,\r\n      image.type\r\n    );\r\n  }\r\n};\r\n\r\nexport default foodCreate;\r\n","import { b2ShapeType } from \"@flyover/box2d\";\r\n\r\nlet pos = 0;\r\nlet data = 0;\r\n\r\nconst foodRender = (world, batch, worldHeight) => {\r\n  for (let body = world.GetBodyList(); body; body = body.GetNext()) {\r\n    pos = body.GetPosition();\r\n    data = body.GetUserData();\r\n    for (\r\n      let fixture = body.GetFixtureList();\r\n      fixture;\r\n      fixture = fixture.GetNext()\r\n    ) {\r\n      const shape = fixture.GetShape();\r\n\r\n      if (shape.GetType() === b2ShapeType.e_polygonShape) {\r\n        if (pos.y <= worldHeight / 2 && data.goUp) {\r\n          data.goUp = false;\r\n        }\r\n        if (data.state === \"ENABLE\") {\r\n          batch.setColor(1, 1, 1, data.opacity);\r\n          data.image1.draw(\r\n            batch,\r\n            pos.x - data.width / 2,\r\n            pos.y - data.height / 2,\r\n            data.width,\r\n            data.height,\r\n            data.width / 2,\r\n            data.height / 2,\r\n            body.GetAngle(),\r\n            data.scaleX,\r\n            data.scaleY\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default foodRender;\r\n","let pos = 0;\r\nlet data = 0;\r\nconst clearFood = (\r\n  world,\r\n  worldWidth,\r\n  worldHeight,\r\n  smoke_animation,\r\n  delta,\r\n  batch,\r\n  container\r\n) => {\r\n  batch.begin();\r\n  for (let body = world.GetBodyList(); body; body = body.GetNext()) {\r\n    pos = body.GetPosition();\r\n    data = body.GetUserData();\r\n    if (\r\n      pos.x < 0 ||\r\n      pos.x > worldWidth ||\r\n      pos.y > worldHeight * 0.85 ||\r\n      container.gameState === \"CAN_BE_NEW\" ||\r\n      container.gameState === \"LOSE\" ||\r\n      data.state === \"EATED\"\r\n    ) {\r\n      if (data.state === \"ENABLE\") {\r\n        data.state = \"VISIBLE\";\r\n        data.destroy_position.x = pos.x;\r\n        data.destroy_position.y = pos.y;\r\n      }\r\n      if (data.state === \"EATED\") {\r\n        data.state = \"VISIBLE\";\r\n        // world.DestroyBody(body);\r\n        container.gameState = \"STUNNING\";\r\n      }\r\n    }\r\n  }\r\n  batch.end();\r\n};\r\n\r\nexport default clearFood;\r\n","const shuffle = array => {\r\n  array.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nconst createRecipe = (recipes, container, foodTex) => {\r\n  if (container.gameState === \"NEW_RECIPE\") {\r\n    shuffle(foodTex);\r\n    recipes.type.length = 0;\r\n    for (let i = 0; i < 4; i++) {\r\n      recipes.type.push({\r\n        index: foodTex[i].type,\r\n        image: foodTex[i].image1,\r\n        state: \"ENABLE\",\r\n        stateTime: 0,\r\n        height: recipes.height,\r\n        // (recipes.width * foodTex[1].image1.height) / foodTex[1].image1.width,\r\n        width: recipes.width\r\n      });\r\n    }\r\n    container.gameState = \"OLD_RECIPE\";\r\n  }\r\n};\r\n\r\nexport default createRecipe;\r\n","let chopstick = 0;\r\nlet check_all_visible = 0;\r\n\r\nexport default function chopsticks(\r\n  batch,\r\n  worldWidth,\r\n  worldHeight,\r\n  container,\r\n  chopstickTex,\r\n  delta\r\n) {\r\n  for (let i = 0; i < container.life.length; i++) {\r\n    chopstick = container.life[i];\r\n    if (chopstick.state === \"ENABLE\") {\r\n      batch.draw(\r\n        chopstickTex,\r\n        worldWidth - worldWidth / 10 - container.life_width / 2,\r\n        worldHeight / 20 +\r\n          container.life_height * i -\r\n          container.life_height / 2,\r\n        container.life_width,\r\n        container.life_height\r\n      );\r\n    }\r\n\r\n    if (chopstick.state === \"START_VISIBLE\") {\r\n      chopstick.stateTime += delta;\r\n      if (chopstick.stateTime < 0.1) {\r\n        chopstick.scale = 1.2;\r\n      } else if (chopstick.stateTime < 0.05 && chopstick.stateTime >= 0) {\r\n        container.life[i].position_acc += (delta * worldWidth) / 5;\r\n      } else if (chopstick.stateTime < 0.15 && chopstick.stateTime >= 0.05) {\r\n        container.life[i].position_acc -= (delta * worldWidth) / 5;\r\n      } else if (chopstick.stateTime < 0.25 && chopstick.stateTime >= 0.15) {\r\n        container.life[i].position_acc += (delta * worldWidth) / 5;\r\n      } else if (chopstick.stateTime >= 0.25) {\r\n        container.life[i].position_acc = 0;\r\n        chopstick.scale -= (delta * worldWidth) / 2.5;\r\n        if (chopstick.scale < 0) {\r\n          chopstick.scale = 0;\r\n        }\r\n      }\r\n      batch.draw(\r\n        chopstickTex,\r\n        worldWidth -\r\n          worldWidth / 10 -\r\n          (container.life_width / 2) * chopstick.scale +\r\n          container.life[i].position_acc,\r\n        worldHeight / 20 +\r\n          container.life_height * i -\r\n          (container.life_height / 2) * chopstick.scale,\r\n        container.life_width * chopstick.scale,\r\n        container.life_height * chopstick.scale\r\n      );\r\n    }\r\n  }\r\n\r\n  check_all_visible = container.life.filter(\r\n    life => life.state === \"START_VISIBLE\"\r\n  );\r\n  if (\r\n    check_all_visible.length === container.life.length &&\r\n    container.gameState === \"STUNNING\"\r\n  ) {\r\n    container.gameState = \"LOSE\";\r\n  }\r\n}\r\n","import { b2ShapeType } from \"@flyover/box2d\";\r\n\r\nlet data = 0;\r\nlet shape = 0;\r\nconst zoom = (world, delta, worldWidth) => {\r\n  for (let body = world.GetBodyList(); body; body = body.GetNext()) {\r\n    data = body.GetUserData();\r\n    for (\r\n      let fixture = body.GetFixtureList();\r\n      fixture;\r\n      fixture = fixture.GetNext()\r\n    ) {\r\n      shape = fixture.GetShape();\r\n      if (shape.GetType() === b2ShapeType.e_polygonShape) {\r\n        data.opacity += delta * data.opacity_speed;\r\n        if (data.opacity >= 1) {\r\n          data.opacity = 1;\r\n        }\r\n        data.scaleX += delta * data.scale_speed;\r\n        data.scaleY += delta * data.scale_speed;\r\n        if (data.scaleX >= worldWidth / 2.7) {\r\n          data.scaleX = worldWidth / 2.7;\r\n          data.scaleY = worldWidth / 2.7;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default zoom;\r\n","let type = 0;\r\nlet position = 0;\r\nlet scale = 3;\r\nconst recipeRender = (recipes, batch, smoke, delta) => {\r\n  if (recipes.type.length > 0) {\r\n    for (let i = 0; i < recipes.type.length; i++) {\r\n      type = recipes.type[i];\r\n      position = recipes.position[i];\r\n      if (type.state === \"ENABLE\") {\r\n        batch.setColor(1, 1, 1, 1);\r\n        type.image.draw(\r\n          batch,\r\n          position.x,\r\n          position.y - type.height,\r\n          type.width,\r\n          type.height\r\n        );\r\n      }\r\n      if (type.state === \"VISIBLE\") {\r\n        type.stateTime += delta;\r\n        batch.setColor(1, 1, 1, 1);\r\n        smoke.animation\r\n          .getKeyFrame(type.stateTime, 1)\r\n          .draw(\r\n            batch,\r\n            position.x - (type.width / 4) * scale,\r\n            position.y - (type.height / 1.7) * scale,\r\n            type.width * scale,\r\n            type.height * scale\r\n          );\r\n        if (type.stateTime >= smoke.duration * smoke.frame_length) {\r\n          type.state = \"DELETED\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\nexport default recipeRender;\r\n","import { b2ShapeType } from \"@flyover/box2d\";\r\n\r\nlet pos = 0;\r\nlet data = 0;\r\nlet shape = 0;\r\nlet index = 2;\r\nlet check_right = false;\r\nlet checkArray = 0;\r\nconst checkCollide = (container, recipes, world) => {\r\n  for (let body = world.GetBodyList(); body; body = body.GetNext()) {\r\n    pos = body.GetPosition();\r\n    data = body.GetUserData();\r\n    for (\r\n      let fixture = body.GetFixtureList();\r\n      fixture;\r\n      fixture = fixture.GetNext()\r\n    ) {\r\n      shape = fixture.GetShape();\r\n      if (shape.GetType() === b2ShapeType.e_polygonShape) {\r\n        if (\r\n          pos.y >=\r\n            container.position.y - container.check - container.height / 2 &&\r\n          pos.x >= container.position.x - container.width / 2 &&\r\n          pos.x <= container.position.x + container.width / 2 &&\r\n          pos.y <= container.position.y + container.height / 2 &&\r\n          data.goUp === false &&\r\n          data.state === \"ENABLE\"\r\n        ) {\r\n          // world.DestroyBody(body);\r\n          for (let type of recipes.type) {\r\n            if (type.index === data.type && type.state === \"ENABLE\") {\r\n              // neu dung thi delete food va add to collection\r\n              world.DestroyBody(body);\r\n              container.check += container.collection_height / 4;\r\n              type.state = \"VISIBLE\";\r\n              container.collection.push({\r\n                type: type.index,\r\n                stateTime_smoke: 0,\r\n                stateTime_food: 0,\r\n                state: \"START_ANIMATION\",\r\n                smoke: true\r\n              });\r\n              check_right = true;\r\n              break;\r\n            } else {\r\n              check_right = false;\r\n            }\r\n          }\r\n\r\n          if (!check_right) {\r\n            // neu sai thi ve animation red cloud\r\n            data.state = \"EATED\";\r\n            data.destroy_position.x = pos.x;\r\n            data.destroy_position.y = pos.y;\r\n            container.life[index].state = \"START_VISIBLE\";\r\n            index--;\r\n            if (index <= 0) {\r\n              index = 0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  checkArray = recipes.type.filter(type => type.state === \"DELETED\");\r\n  if (checkArray.length === 4 && container.gameState === \"CAN_BE_NEW\") {\r\n    // index = 2;\r\n    container.difficulty += 1;\r\n    if (container.difficulty >= 10) {\r\n      container.difficulty = 10;\r\n    }\r\n\r\n    // for (let i = 0; i < 15; i++) {\r\n    container.collectionCommon.push(container.collection);\r\n    // }\r\n    recipes.type.length = 0;\r\n    container.gameState = \"NEW_RECIPE\"; // nếu chơi nhiều phase thì dùng state này\r\n    // container.gameState = \"VICTORY\"; // nếu thành công 1 lần thì win thì dùng state này\r\n    container.collection = []; // nếu thành công 1 lần thì win thì không cần\r\n    container.check = 0;\r\n    // console.log(container.collectionCommon);\r\n  }\r\n\r\n  if (container.gameState === \"LOSE\") {\r\n    container.difficulty = 1;\r\n    index = 2;\r\n    container.check = 0;\r\n    for (let type of recipes.type) {\r\n      type.state = \"VISIBLE\";\r\n    }\r\n  }\r\n};\r\n\r\nexport default checkCollide;\r\n","let food = 0;\r\nlet animation = 0;\r\nlet width = 0;\r\nlet height = 0;\r\nlet scale_smoke = 1.6;\r\n\r\nconst renderCollection = (container, batch, smoke, food_animation, delta) => {\r\n  width = container.collection_width;\r\n  height = container.collection_height;\r\n  if (container.collection.length > 0) {\r\n    for (let i = 0; i < container.collection.length; i++) {\r\n      food = container.collection[i];\r\n      for (let animations of food_animation) {\r\n        if (animations.type === food.type) {\r\n          animation = animations;\r\n        }\r\n      }\r\n      if (food.state === \"START_ANIMATION\") {\r\n        food.stateTime_smoke += delta;\r\n        if (\r\n          food.stateTime_smoke >=\r\n          (smoke.frame_length / 1.5) * smoke.duration\r\n        ) {\r\n          food.stateTime_food += delta;\r\n\r\n          animation.animation\r\n            .getKeyFrame(food.stateTime_food, 1)\r\n            .draw(\r\n              batch,\r\n              container.position.x - width / 2,\r\n              container.position.y - height - (height * i) / 4,\r\n              width,\r\n              height\r\n            );\r\n\r\n          if (food.stateTime_food >= animation.length * animation.duration) {\r\n            food.stateTime_food = (animation.length + 1) * animation.duration;\r\n            // if (i === 3 && container.gameState === \"OLD_RECIPE\") {\r\n            //   container.gameState = \"CAN_BE_NEW\";\r\n            // }\r\n          }\r\n        }\r\n        if (food.stateTime_smoke >= smoke.frame_length * smoke.duration) {\r\n          food.smoke = false;\r\n        }\r\n        if (food.smoke) {\r\n          if (i === 3 && container.gameState === \"OLD_RECIPE\") {\r\n            container.gameState = \"CAN_BE_NEW\";\r\n          }\r\n          smoke.animation\r\n            .getKeyFrame(food.stateTime_smoke, 1)\r\n            .draw(\r\n              batch,\r\n              container.position.x - (width / 2.4) * scale_smoke,\r\n              container.position.y - height - (height * i) / 4,\r\n              width * scale_smoke,\r\n              height * scale_smoke\r\n            );\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default renderCollection;\r\n","import { b2ShapeType } from \"@flyover/box2d\";\r\n\r\nlet data = 0;\r\nlet shape = 0;\r\nlet scale_ratio = 2;\r\nconst destroyFood = (world, smoke, delta, batch, container) => {\r\n  for (let body = world.GetBodyList(); body; body = body.GetNext()) {\r\n    data = body.GetUserData();\r\n\r\n    for (\r\n      let fixture = body.GetFixtureList();\r\n      fixture;\r\n      fixture = fixture.GetNext()\r\n    ) {\r\n      shape = fixture.GetShape();\r\n      if (shape.GetType() === b2ShapeType.e_polygonShape) {\r\n        if (data.state === \"VISIBLE\") {\r\n          data.stateTime += delta;\r\n          batch.setColor(1, 0, 0, 1);\r\n          smoke.animation\r\n            .getKeyFrame(data.stateTime, 1)\r\n            .draw(\r\n              batch,\r\n              data.destroy_position.x -\r\n                (data.width * data.scaleX * scale_ratio) / 2 +\r\n                data.width / 2,\r\n              data.destroy_position.y -\r\n                (data.height * data.scaleY * scale_ratio) / 2,\r\n              data.width * data.scaleX * scale_ratio,\r\n              data.height * data.scaleY * scale_ratio\r\n            );\r\n\r\n          if (data.stateTime >= smoke.frame_length * smoke.duration) {\r\n            world.DestroyBody(body);\r\n            // if (container.gameState === \"CAN_BE_NEW\") {\r\n            //   container.gameState = \"CREATE_RECIPE\";\r\n            // }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default destroyFood;\r\n","import { fillRect } from \"gdxjs\";\r\n\r\nlet image_food = 0;\r\nlet width = 0;\r\nlet height = 0;\r\nlet width_board = 0;\r\nlet height_board = 0;\r\nlet scale_speed = 4;\r\n// let result_speed = 3.5;\r\nlet board_max_size = 0;\r\nlet scale = 0;\r\nlet offSetX = 0;\r\nlet offSetY = 0;\r\nlet scale_x = 0;\r\nlet stateTime = new Array(20).fill(0);\r\nlet check_render_board = false;\r\nconst you_lose = document.getElementById(\"content\");\r\nconst renderEndScreen = (\r\n  container,\r\n  batch,\r\n  image,\r\n  worldWidth,\r\n  worldHeight,\r\n  whiteTex,\r\n  delta,\r\n  recipes\r\n) => {\r\n  if (\r\n    container.gameState === \"LOSE_SCREEN\" ||\r\n    container.gameState === \"CAN_RESET_LOSE\"\r\n  ) {\r\n    let length = container.collectionCommon.length;\r\n    container.position.set(worldWidth / 2, (worldHeight * 3.1) / 4);\r\n    batch.setColor(0, 0, 0, 0.3);\r\n    fillRect(batch, whiteTex, 0, 0, worldWidth, worldHeight);\r\n\r\n    batch.setColor(1, 1, 1, 1);\r\n    // draw victory board\r\n    board_max_size = worldWidth / 1;\r\n\r\n    if (width_board < board_max_size) {\r\n      width_board += (worldWidth / 2) * delta * scale_speed;\r\n      height_board +=\r\n        (((worldWidth / 2) * image.win_board.height) / image.win_board.width) *\r\n        delta *\r\n        scale_speed;\r\n    } else {\r\n      check_render_board = true;\r\n      width_board = board_max_size;\r\n      height_board =\r\n        (board_max_size * image.win_board.height) / image.win_board.width;\r\n      if (length === 0) {\r\n        you_lose.style.display = \"block\";\r\n        you_lose.innerHTML = \"<h2>(Tap To Play)</h2>\";\r\n        container.gameState = \"CAN_RESET_LOSE\";\r\n        you_lose.style.top = \"50%\";\r\n      } else {\r\n        you_lose.innerHTML = \"<h2>(Tap To Play)</h2>\";\r\n        you_lose.style.display = \"block\";\r\n        you_lose.style.top = \"70%\";\r\n      }\r\n    }\r\n\r\n    let broadX = worldWidth / 2 - width_board / 2;\r\n    let broadY = worldHeight / 3 - height_board / 2;\r\n    batch.draw(image.win_board, broadX, broadY, width_board, height_board);\r\n\r\n    // draw collection\r\n    let containerY = worldHeight / 2;\r\n\r\n    scale = 0.7;\r\n    if (check_render_board) {\r\n      for (let j = 0; j < container.collectionCommon.length; j++) {\r\n        stateTime[j] += delta * recipes.width * 4;\r\n        if (stateTime[j] >= 1) {\r\n          stateTime[j] = 1;\r\n          container.gameState = \"CAN_RESET_LOSE\";\r\n        }\r\n        width = recipes.width / 1.9;\r\n        height = (image.container.height * width) / image.container.width;\r\n        if (j >= 0 && j <= 4) {\r\n          offSetY = height * 4.8;\r\n          scale_x = j + 1 - 1;\r\n        }\r\n        if (j >= 5 && j <= 9) {\r\n          offSetY = height / 1.8;\r\n          scale_x = j + 1 - 6;\r\n        }\r\n        if (j >= 10 && j <= 14) {\r\n          offSetY = -height * 3.6;\r\n          scale_x = j + 1 - 11;\r\n        }\r\n        offSetX = width * 1.1 * scale_x;\r\n\r\n        batch.setColor(1, 1, 1, stateTime[j]);\r\n        batch.draw(\r\n          image.container,\r\n          worldWidth / 2 - width * 2.7 + offSetX,\r\n          containerY - height / 2 - offSetY,\r\n          width,\r\n          height\r\n        );\r\n        // console.log(container.collectionCommon);\r\n        for (let i = 0; i < container.collectionCommon[j].length; i++) {\r\n          for (let foodTex of image.foodTex) {\r\n            if (foodTex.type === container.collectionCommon[j][i].type) {\r\n              image_food = foodTex.image1;\r\n            }\r\n            if (foodTex.type === 1) {\r\n              width = recipes.width / 1.9;\r\n              height = (foodTex.image1.height * width) / foodTex.image1.width;\r\n            }\r\n          }\r\n          batch.setColor(1, 1, 1, stateTime[j]);\r\n          image_food.draw(\r\n            batch,\r\n            worldWidth / 2 - width * 2.7 + (width * scale) / 4 + offSetX,\r\n            containerY -\r\n              (height * scale) / 2 -\r\n              height / 3 -\r\n              offSetY -\r\n              (height * scale * i) / 1.6,\r\n            width * scale,\r\n            height * scale\r\n          );\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    width = 0;\r\n    height = 0;\r\n    width_board = 0;\r\n    height_board = 0;\r\n    check_render_board = false;\r\n    stateTime = new Array(20).fill(0);\r\n  }\r\n};\r\n\r\nexport default renderEndScreen;\r\n","import { fillRect } from \"gdxjs\";\r\n\r\nlet speed = 3;\r\nlet tmp = 0;\r\nlet index = 0;\r\nlet accumulate = [0, 0, 0];\r\nconst renderStunningScreen = (\r\n  container,\r\n  batch,\r\n  whiteTex,\r\n  delta,\r\n  worldWidth,\r\n  worldHeight\r\n) => {\r\n  if (container.gameState === \"STUNNING\" || container.gameState === \"LOSE\") {\r\n    accumulate[index] += delta * speed;\r\n    tmp = 1 - accumulate[index];\r\n    if (tmp <= 0) {\r\n      tmp = 0;\r\n    }\r\n    batch.setColor(1, 0, 0, tmp);\r\n    fillRect(batch, whiteTex, 0, 0, worldWidth, worldHeight);\r\n    if (tmp <= 0) {\r\n      if (container.gameState === \"LOSE\") {\r\n        container.gameState = \"LOSE_SCREEN\";\r\n        accumulate = [0, 0, 0];\r\n        index = 0;\r\n      }\r\n      if (container.gameState !== \"LOSE_SCREEN\") {\r\n        container.gameState = \"OLD_RECIPE\";\r\n        index++;\r\n      }\r\n    }\r\n  }\r\n  if (container.gameState === \"NEW_RECIPE\") {\r\n    accumulate = [0, 0, 0];\r\n    index = 0;\r\n  }\r\n};\r\n\r\nexport default renderStunningScreen;\r\n","import { drawCircle, drawPolygon } from \"gdxjs\";\r\nimport { b2ShapeType, b2Vec2 } from \"@flyover/box2d\";\r\nconst tmp = [];\r\nconst worldPoint = new b2Vec2(0, 0);\r\n\r\nconst debugBox2d = (world, batch, whiteTex) => {\r\n  for (let body = world.GetBodyList(); body; body = body.GetNext()) {\r\n    const pos = body.GetPosition();\r\n    for (\r\n      let fixture = body.GetFixtureList();\r\n      fixture;\r\n      fixture = fixture.GetNext()\r\n    ) {\r\n      const shape = fixture.GetShape();\r\n      if (shape.GetType() === b2ShapeType.e_polygonShape) {\r\n        const vertices = shape.m_vertices;\r\n        tmp.length = 0;\r\n        for (let vertice of vertices) {\r\n          body.GetWorldPoint(vertice, worldPoint);\r\n          tmp.push(worldPoint.x, worldPoint.y);\r\n        }\r\n        drawPolygon(batch, whiteTex, tmp, 0.05, 0, 0, 0);\r\n      } else if (shape.GetType() === b2ShapeType.e_circleShape) {\r\n        drawCircle(\r\n          batch,\r\n          whiteTex,\r\n          pos.x,\r\n          pos.y,\r\n          shape.m_radius,\r\n          0.05,\r\n          10,\r\n          0,\r\n          0,\r\n          0\r\n        );\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default debugBox2d;\r\n","import { b2ShapeType } from \"@flyover/box2d\";\r\nlet data = 0;\r\nconst removeStunedFood = (world, delta) => {\r\n  for (let body = world.GetBodyList(); body; body = body.GetNext()) {\r\n    data = body.GetUserData();\r\n    for (\r\n      let fixture = body.GetFixtureList();\r\n      fixture;\r\n      fixture = fixture.GetNext()\r\n    ) {\r\n      const shape = fixture.GetShape();\r\n\r\n      if (shape.GetType() === b2ShapeType.e_polygonShape) {\r\n        data.delete_time += delta;\r\n        if (data.delete_time >= 6) {\r\n          world.DestroyBody(body);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default removeStunedFood;\r\n","import { InputHandler } from \"gdxjs\";\r\nimport enviroment from \"./enviroment\";\r\nimport containerPhysical from \"./containerPhysical\";\r\nimport modal from \"./modal\";\r\nimport containerRender from \"./containerRender\";\r\nimport inputHandler from \"./inputHandler\";\r\nimport foodCreate from \"./foodCreate\";\r\nimport foodRender from \"./foodRender\";\r\nimport clearFood from \"./foodClear\";\r\nimport createRecipe from \"./recipeCreate\";\r\nimport chopicks from \"./chopsticks\";\r\nimport zoom from \"./foodZoom\";\r\nimport recipeRender from \"./recipeRender\";\r\nimport checkCollide from \"./containerCollideFood\";\r\nimport renderCollection from \"./collectionRender\";\r\nimport destroyFood from \"./destoyFood\";\r\nimport renderLoseScreen from \"./renderLoseScreen\";\r\nimport renderStunningScreen from \"./stuningScreen\";\r\nimport debugBox2d from \"./debug\";\r\nimport removeStunedFood from \"./removeStunedFood\";\r\nexport default function gamePlay(\r\n  batch,\r\n  worldWidth,\r\n  worldHeight,\r\n  whiteTex,\r\n  camera,\r\n  canvas,\r\n  world,\r\n  Image\r\n) {\r\n  const object = modal(worldWidth, worldHeight, Image);\r\n  const inputHandle = new InputHandler(canvas);\r\n  inputHandler(\r\n    inputHandle,\r\n    camera,\r\n    worldWidth,\r\n    worldHeight,\r\n    object.container,\r\n    object.recipes,\r\n    canvas\r\n  );\r\n\r\n  return {\r\n    drawEnviroment(bg, table) {\r\n      enviroment(batch, worldWidth, worldHeight, bg, table);\r\n    },\r\n    containerPhysicals(delta) {\r\n      containerPhysical(object.container, delta, worldWidth);\r\n    },\r\n\r\n    checkCollidefood() {\r\n      checkCollide(object.container, object.recipes, world);\r\n    },\r\n\r\n    drawChopicks(chopstickTex, delta) {\r\n      chopicks(\r\n        batch,\r\n        worldWidth,\r\n        worldHeight,\r\n        object.container,\r\n        chopstickTex,\r\n        delta\r\n      );\r\n    },\r\n    // drawChopicks(chopstickTex, delta) {\r\n    //   chopicks(\r\n    //     batch,\r\n    //     worldWidth,\r\n    //     worldHeight,\r\n    //     object.container,\r\n    //     chopstickTex,\r\n    //     delta\r\n    //   );\r\n    // },\r\n    drawContainer(containerTex) {\r\n      containerRender(\r\n        batch,\r\n        object.container,\r\n        containerTex,\r\n        Image.tray_shadow,\r\n        worldHeight\r\n      );\r\n    },\r\n\r\n    createFoods(delta) {\r\n      foodCreate(\r\n        object.foods,\r\n        delta,\r\n        worldWidth,\r\n        worldHeight,\r\n        world,\r\n        Image.foodTex,\r\n        object.container,\r\n        object.recipes\r\n      );\r\n    },\r\n\r\n    foodZoom(delta) {\r\n      zoom(world, delta, worldWidth);\r\n    },\r\n\r\n    renderFoods() {\r\n      foodRender(world, batch, worldHeight);\r\n    },\r\n\r\n    clearFoods(delta) {\r\n      clearFood(\r\n        world,\r\n        worldWidth,\r\n        worldHeight,\r\n        Image.smoke_animation,\r\n        delta,\r\n        batch,\r\n        object.container\r\n      );\r\n    },\r\n\r\n    destroyFoods(delta) {\r\n      destroyFood(world, Image.smoke_animation, delta, batch, object.container);\r\n    },\r\n\r\n    createRecipes() {\r\n      createRecipe(object.recipes, object.container, Image.foodTex);\r\n    },\r\n\r\n    // drawChopicks(chopstickTex, delta) {\r\n    //   chopicks(\r\n    //     batch,\r\n    //     worldWidth,\r\n    //     worldHeight,\r\n    //     object.container,\r\n    //     chopstickTex,\r\n    //     delta\r\n    //   );\r\n    // },\r\n    renderRecipes(delta) {\r\n      recipeRender(object.recipes, batch, Image.smoke_animation, delta);\r\n    },\r\n\r\n    renderCollections(delta) {\r\n      renderCollection(\r\n        object.container,\r\n        batch,\r\n        Image.smoke_animation,\r\n        Image.food_animation,\r\n        delta\r\n      );\r\n    },\r\n\r\n    renderLoseScreens(delta) {\r\n      renderLoseScreen(\r\n        object.container,\r\n        batch,\r\n        Image,\r\n        worldWidth,\r\n        worldHeight,\r\n        whiteTex,\r\n        delta,\r\n        object.recipes\r\n      );\r\n    },\r\n    renderStunningScreens(delta) {\r\n      renderStunningScreen(\r\n        object.container,\r\n        batch,\r\n        whiteTex,\r\n        delta,\r\n        worldWidth,\r\n        worldHeight\r\n      );\r\n    },\r\n\r\n    debugs() {\r\n      debugBox2d(world, batch, whiteTex);\r\n    },\r\n\r\n    removeStunedFoods(delta) {\r\n      removeStunedFood(world, delta);\r\n    }\r\n  };\r\n}\r\n","import { Vector2 } from \"gdxjs\";\r\nexport default function modal(worldWidth, worldHeight, image) {\r\n  const containerWidth = worldWidth / 4;\r\n  const containerHeight =\r\n    (containerWidth * image.container.height) / image.container.width;\r\n\r\n  const FOOD_WIDTH_1 = worldWidth / 20;\r\n  console.log(image);\r\n  const FOOD_HEIGHT_1 =\r\n    (FOOD_WIDTH_1 * image.foodTex[1].image1.height) /\r\n    image.foodTex[1].image1.width;\r\n\r\n  const scaleX = 1;\r\n  const scaleY = 1;\r\n  const scale_speed = worldWidth / 11;\r\n  const opacity_speed = worldWidth / 20;\r\n\r\n  const RECIPE_WIDTH = worldWidth / 7;\r\n  const RECIPE_HEIGHT =\r\n    (RECIPE_WIDTH * image.foodTex[1].image1.height) /\r\n    image.foodTex[1].image1.width;\r\n\r\n  const COLLECTION_WIDTH = worldWidth / 3;\r\n  const COLLECTION_HEIGHT = (COLLECTION_WIDTH * 255) / 400;\r\n\r\n  const LIFE_WIDTH = worldWidth / 8;\r\n  const LIFE_HEIGHT =\r\n    (LIFE_WIDTH * image.chopsticks.height) / image.chopsticks.width;\r\n\r\n  const distance = RECIPE_WIDTH + worldWidth / 150;\r\n  // const lifeWidth = worldWidth / 10;\r\n  // const lifeHeight =\r\n  //   (lifeWidth * image.chopsticks.height) / image.chopsticks.width;\r\n  const foods = {\r\n    position: new Vector2(worldWidth / 2, worldHeight / 1.4),\r\n    scale: worldWidth / 10,\r\n    speed: Math.PI / 100,\r\n    width: FOOD_WIDTH_1,\r\n    height: FOOD_HEIGHT_1,\r\n    scaleX: scaleX,\r\n    scaleY: scaleY,\r\n    scale_speed: scale_speed,\r\n    opacity_speed: opacity_speed,\r\n  };\r\n\r\n  const recipes = {\r\n    type: [],\r\n    position: [\r\n      new Vector2(worldWidth / 2.95, worldHeight / 1.038),\r\n      new Vector2(worldWidth / 2.95 + distance, worldHeight / 1.038),\r\n      new Vector2(worldWidth / 2.95 + distance * 2, worldHeight / 1.038),\r\n      new Vector2(worldWidth / 2.95 + distance * 3, worldHeight / 1.038),\r\n    ],\r\n    width: RECIPE_WIDTH,\r\n    height: RECIPE_HEIGHT,\r\n  };\r\n\r\n  const container = {\r\n    position: new Vector2(worldWidth / 2, (worldHeight * 3.1) / 4),\r\n    target: new Vector2(worldWidth / 2, (worldHeight * 3.1) / 4),\r\n    difficulty: 1,\r\n    check: 0,\r\n    width: containerWidth,\r\n    height: containerHeight,\r\n    speed: worldWidth * 1.5,\r\n    collection: [],\r\n    collection_width: COLLECTION_WIDTH,\r\n    collection_height: COLLECTION_HEIGHT,\r\n    gameState: \"NEW_RECIPE\",\r\n    moveLeft: false,\r\n    moveRight: false,\r\n    moveToLeft: false,\r\n    moveToRight: false,\r\n    life: [\r\n      { state: \"ENABLE\", stateTime: 0, position_acc: 0, scale: 1 },\r\n      { state: \"ENABLE\", stateTime: 0, position_acc: 0, scale: 1 },\r\n      { state: \"ENABLE\", stateTime: 0, position_acc: 0, scale: 1 },\r\n    ],\r\n    life_width: LIFE_WIDTH,\r\n    life_height: LIFE_HEIGHT,\r\n    stun_time: 0.5,\r\n    collectionCommon: [],\r\n  };\r\n  return {\r\n    foods,\r\n    container,\r\n    recipes,\r\n  };\r\n}\r\n","export default function containerPhysical(container, delta, worldWidth) {\r\n  if (\r\n    (container.moveLeft && container.gameState === \"OLD_RECIPE\") ||\r\n    (container.moveLeft && container.gameState === \"STUNNING\")\r\n  ) {\r\n    container.position.x -= container.speed * delta;\r\n    if (container.position.x <= container.width / 2) {\r\n      container.position.x = container.width / 2;\r\n    }\r\n  }\r\n\r\n  if (\r\n    (container.moveRight && container.gameState === \"OLD_RECIPE\") ||\r\n    (container.moveRight && container.gameState === \"STUNNING\")\r\n  ) {\r\n    container.position.x += container.speed * delta;\r\n    if (container.position.x >= worldWidth - container.width / 2) {\r\n      container.position.x = worldWidth - container.width / 2;\r\n    }\r\n  }\r\n}\r\n","import { loadTexture, loadAtlas, createAnimation } from \"gdxjs\";\r\n\r\nconst loadImage = async gl => {\r\n  const bg = await loadTexture(gl, \"./assets/bg.png\");\r\n  const table = await loadTexture(gl, \"./assets/menu-bar.png\");\r\n  const container = await loadTexture(gl, \"./assets/tray.png\");\r\n  const tray_shadow = await loadTexture(gl, \"./assets/tray-shadow.png\");\r\n  const win_board = await loadTexture(gl, \"./assets/win.png\");\r\n  const chopsticks = await loadTexture(gl, \"./assets/chopsticks.png\");\r\n\r\n  const atlas = await loadAtlas(gl, \"./hotpot-atlas/hotpot.atlas\");\r\n\r\n  const foodTex = [\r\n    {\r\n      image1: atlas.findRegion(\"tom xuong\", -1),\r\n      type: 0\r\n    },\r\n    {\r\n      image1: atlas.findRegion(\"kimchi xuong\", -1),\r\n      type: 1\r\n    },\r\n    {\r\n      image1: atlas.findRegion(\"nam xuong\", -1),\r\n      type: 2\r\n    },\r\n    {\r\n      image1: atlas.findRegion(\"ngao xuong\", -1),\r\n      type: 3\r\n    },\r\n    {\r\n      image1: atlas.findRegion(\"raucai xuong\", -1),\r\n      type: 4\r\n    },\r\n    {\r\n      image1: atlas.findRegion(\"thitbo xuong\", -1),\r\n      type: 5\r\n    },\r\n    {\r\n      image1: atlas.findRegion(\"bachtuoc xuong\", -1),\r\n      type: 6\r\n    }\r\n  ];\r\n\r\n  const effect = atlas.findRegions(\"effect boc khoi\");\r\n  const tom_efftect = atlas.findRegions(\"Tom\");\r\n  const kimchi_efftect = atlas.findRegions(\"kimchi\");\r\n  const nam_efftect = atlas.findRegions(\"nam\");\r\n  const ngao_efftect = atlas.findRegions(\"ngao\");\r\n  const raucai_efftect = atlas.findRegions(\"raucai\");\r\n  const thitbo_efftect = atlas.findRegions(\"thitbo\");\r\n  const bachtuoc_effect = atlas.findRegions(\"bachtuoc\");\r\n\r\n  const duration_smoke = 0.05;\r\n  const duration_food = 0.05;\r\n  const smoke_animation = createAnimation(duration_smoke, effect);\r\n\r\n  const food_animation = [\r\n    {\r\n      animation: createAnimation(duration_food, tom_efftect),\r\n      type: 0,\r\n      length: tom_efftect.length - 1,\r\n      duration: duration_food\r\n    },\r\n    {\r\n      animation: createAnimation(duration_food, kimchi_efftect),\r\n      type: 1,\r\n      length: kimchi_efftect.length - 1,\r\n      duration: duration_food\r\n    },\r\n    {\r\n      animation: createAnimation(duration_food, nam_efftect),\r\n      type: 2,\r\n      length: nam_efftect.length - 1,\r\n      duration: duration_food\r\n    },\r\n    {\r\n      animation: createAnimation(duration_food, ngao_efftect),\r\n      type: 3,\r\n      length: ngao_efftect.length - 1,\r\n      duration: duration_food\r\n    },\r\n    {\r\n      animation: createAnimation(duration_food, raucai_efftect),\r\n      type: 4,\r\n      length: raucai_efftect.length - 1,\r\n      duration: duration_food\r\n    },\r\n    {\r\n      animation: createAnimation(duration_food, thitbo_efftect),\r\n      type: 5,\r\n      length: thitbo_efftect.length - 1,\r\n      duration: duration_food\r\n    },\r\n    {\r\n      animation: createAnimation(duration_food, bachtuoc_effect),\r\n      type: 6,\r\n      length: bachtuoc_effect.length - 1,\r\n      duration: duration_food\r\n    }\r\n  ];\r\n\r\n  return {\r\n    foodTex: foodTex,\r\n    win_board: win_board,\r\n    bg: bg,\r\n    tray_shadow: tray_shadow,\r\n    table: table,\r\n    container: container,\r\n    smoke_animation: {\r\n      animation: smoke_animation,\r\n      duration: duration_smoke,\r\n      frame_length: effect.length - 1\r\n    },\r\n    food_animation: food_animation,\r\n    chopsticks: chopsticks\r\n  };\r\n};\r\n\r\nexport default loadImage;\r\n","import \"./index.css\";\r\nimport {\r\n  resizeCanvas,\r\n  createOrthoCamera,\r\n  createBatch,\r\n  createGameLoop\r\n} from \"gdxjs\";\r\nimport gamePlay from \"./gamePlay\";\r\nimport loadImage from \"./loadImage\";\r\nimport createWhiteTexture from \"gl-white-texture\";\r\nimport { b2World, b2Vec2 } from \"@flyover/box2d\";\r\nconst init = async () => {\r\n  const canvas = document.getElementById(\"main\");\r\n  const infor = document.getElementById(\"infor\");\r\n  const [width, height] = resizeCanvas(canvas);\r\n  // const [width, height] = [canvas.width, canvas.height];\r\n  const gl = canvas.getContext(\"webgl\");\r\n  const worldWidth = 10;\r\n  const worldHeight = (worldWidth * height) / width;\r\n  const cam = createOrthoCamera(worldWidth, worldHeight, width, height);\r\n  const batch = createBatch(gl);\r\n  const whiteTex = createWhiteTexture(gl);\r\n  const world = new b2World(new b2Vec2(0, 10));\r\n\r\n  const image = await loadImage(gl);\r\n\r\n  const newGame = gamePlay(\r\n    batch,\r\n    worldWidth,\r\n    worldHeight,\r\n    whiteTex,\r\n    cam,\r\n    canvas,\r\n    world,\r\n    image\r\n  );\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  const update = delta => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    batch.setProjection(cam.combined);\r\n    world.Step(delta, 8, 3);\r\n    newGame.containerPhysicals(delta);\r\n    newGame.createRecipes();\r\n    newGame.createFoods(delta);\r\n    newGame.removeStunedFoods(delta);\r\n    newGame.clearFoods(delta);\r\n    newGame.checkCollidefood();\r\n    newGame.foodZoom(delta);\r\n    batch.begin();\r\n    newGame.drawEnviroment(image.bg, image.table);\r\n    newGame.drawChopicks(image.chopsticks, delta);\r\n    newGame.drawContainer(image.container);\r\n    newGame.drawChopicks(image.chopsticks, delta);\r\n    newGame.renderFoods();\r\n    newGame.renderRecipes(delta);\r\n    newGame.renderCollections(delta);\r\n    newGame.destroyFoods(delta);\r\n    // newGame.renderEndScreens(delta);\r\n    newGame.renderLoseScreens(delta);\r\n    newGame.renderStunningScreens(delta);\r\n    // newGame.debugs();\r\n    batch.end();\r\n  };\r\n\r\n  const game = createGameLoop(update);\r\n\r\n  setInterval(() => {\r\n    infor.innerHTML = `FPS: ${Math.round(game.getFps())}`;\r\n  }, 1000);\r\n};\r\n\r\ninit();\r\n"],"sourceRoot":""}